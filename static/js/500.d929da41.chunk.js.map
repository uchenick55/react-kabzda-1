{"version":3,"file":"static/js/500.d929da41.chunk.js","mappings":"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","sources":["assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/Dialog2Messages2/dialog2Messages2Common.module.scss?84d0","webpack://my-app/./src/components/Dialog2Messages2/Dialog2/dialog2Render.module.css?aae0","components/Dialog2Messages2/Dialog2/Dialog2Item.tsx","components/Dialog2Messages2/Dialog2/Dialog2Render.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/messages2Render.module.scss?0979","components/Dialog2Messages2/Messages2/Messages2Item.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/MessagesFormik.module.css?1d18","components/Dialog2Messages2/Messages2/Msg2SendMessageRender.tsx","components/Dialog2Messages2/Messages2/Msg2HeaderNamePhoto.tsx","components/Dialog2Messages2/Messages2/Messages2Render.tsx","components/Dialog2Messages2/Dialog2Messages2Common.tsx","components/Dialog2Messages2/Dialog2Messages2Container.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","components/hoc/withRouter2.jsx"],"sourcesContent":["var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.12d8e771d6d27bcd4485de69966afd04.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"dialog2Messages2Common\":\"dialog2Messages2Common_dialog2Messages2Common__GkIaf\",\"Fixed\":\"dialog2Messages2Common_Fixed__WWRqa\"};","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"dialog2Render_Fixed__yAlTJ\",\"dialog2HeaderCommon\":\"dialog2Render_dialog2HeaderCommon__YO-4Y\",\"dialog2ListCommon\":\"dialog2Render_dialog2ListCommon__ZMqFo\",\"MobileDialogWidth\":\"dialog2Render_MobileDialogWidth__ahAt-\",\"DesktopDialogWidth\":\"dialog2Render_DesktopDialogWidth__zSxVR\",\"Dialog2ItemCardExt\":\"dialog2Render_Dialog2ItemCardExt__LODJo\",\"Dialog2ItemCardInt\":\"dialog2Render_Dialog2ItemCardInt__HQqPI\",\"Dialog2ItemCardName\":\"dialog2Render_Dialog2ItemCardName__zSixE\",\"Dialog2ItemCardPhoto\":\"dialog2Render_Dialog2ItemCardPhoto__jPmgw\",\"Dialog2ItemCardNewMsgCnt\":\"dialog2Render_Dialog2ItemCardNewMsgCnt__TrWvv\",\"Dialog2ItemCardMsgTime\":\"dialog2Render_Dialog2ItemCardMsgTime__2bCd+\"};","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\n\ntype Dialog2ItemType = {\n    userName: string, //\"evgeniysazonov\"\n    hasNewMessages: boolean,\n    lastDialogActivityDate: string, //\"2023-04-30T19:10:31.843\"\n    newMessagesCount: number, //0\n    photos: {\n        small: string,// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user-small.jpg?v=1\",\n        large: string// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user.jpg?v=1\"\n    },\n    id: number\n}\nconst Dialog2Item: React.FC<Dialog2ItemType> = (\n    {userName, hasNewMessages, photos, lastDialogActivityDate, newMessagesCount, id}) => {\n    return <div className={classes.Dialog2ItemCardExt}>\n        <NavLink to={'/messages/' + id}>\n            <div className={classes.Dialog2ItemCardInt}>\n                <div className={classes.Dialog2ItemCardName}>{userName}</div>\n                {/*Имя пользователя*/}\n                {hasNewMessages && <div\n                    className={classes.Dialog2ItemCardNewMsgCnt}>{newMessagesCount}</div>} {/*вывод количества новых сообщений*/}\n                <img src={photos.small ? photos.small : userPhoto} className={classes.Dialog2ItemCardPhoto}\n                     alt=\"CardPhoto\"/> {/*Фото*/}\n                <div className={classes.Dialog2ItemCardMsgTime}>{lastDialogActivityDate.slice( 11, 16 )}</div>\n                {/*Время*/}\n            </div>\n        </NavLink>\n    </div>\n}\nexport default Dialog2Item\n","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport {getDialog2AllType} from \"../../api/apiTypes\";\nimport Dialog2Item from \"./Dialog2Item\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n}\nconst Dialog2Render: React.FC<Dialog2RenderType> = (\n    {PageWidth, MobileWidth, patch, Dialog2All}\n    ) => {\n    const hasRendered: Array<number> = [] // массив, какие диалоги в списке уже были отрисованы\n    return <div>\n        { // Компонента Dialog2Render отрисовывается на странице dialog всегда.\n            // На странице messages только при десктопной версии\n            ((patch === \"messages\" && PageWidth > MobileWidth) || (patch === \"dialog2\"))\n            && <div>\n                <div  //Fixed слева вверху.\n                    // Поле остается на странице dialog2 всегда.\n                    // На странице messages только при десктопной версии\n                    className={`${classes.Fixed} ${classes.dialog2HeaderCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\n                    /*поиск по именам списка диалогов, с задержкой после ввода, без кнопки отправить*/\n\n                > поиск, без кнопки отправить, с задержкой после ввода.\n                </div>\n                <div // Fixed слева внизу + прокрутка. Поле остается на странице dialog2 всегда\n                    className={`${classes.Fixed} ${classes.dialog2ListCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\n                >\n                    {Dialog2All.map(d2=>{\n                        const {id, userName, hasNewMessages, lastDialogActivityDate, newMessagesCount, photos} = d2\n                        if (hasRendered.includes(id)) { //был глюк с записью двух одинаковых диалогов на сервер.\n                            // Исправил проверкой, что уже отрисовано\n                            return <div/>\n                        }\n                        hasRendered.push(id)\n                        return <Dialog2Item\n                            key={id} userName={userName} hasNewMessages={hasNewMessages} photos={photos}\n                            lastDialogActivityDate={lastDialogActivityDate} newMessagesCount={newMessagesCount} id={id} />\n                    })}\n\n                    {/*список диалогов с фильтрацией по имени из заголовка. */}\n                </div>\n            </div>}\n\n    </div>\n}\nexport default Dialog2Render\n","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"messages2Render_Fixed__baHQ8\",\"messages2NameAndProfileLink\":\"messages2Render_messages2NameAndProfileLink__gsVN6\",\"messages2ChooseDialog\":\"messages2Render_messages2ChooseDialog__JKbif\",\"messages2RenderMessages\":\"messages2Render_messages2RenderMessages__Ebe0U\",\"messages2PrintMessage\":\"messages2Render_messages2PrintMessage__dhozP\",\"MobileMessagesLeft\":\"messages2Render_MobileMessagesLeft__6JOQ+\",\"DesktopMessagesLeft\":\"messages2Render_DesktopMessagesLeft__rsM5T\",\"Msg2HeaderName\":\"messages2Render_Msg2HeaderName__Mw++x\",\"Msg2HeaderPhoto\":\"messages2Render_Msg2HeaderPhoto__XGI9W\",\"Msg2HeaderActivityDate\":\"messages2Render_Msg2HeaderActivityDate__ZWTOr\"};","import React from \"react\";\n\ntype Messages2ItemType = {\n   id: string// \"cde7821a-6981-4f49-8b12-faf681cb1621\",\n   body: string// \"555\",\n    addedAt: string// \"2023-05-01T07:13:00.54\",\n    senderId:number// 25528,\n    senderName:string// \"evgeniysazonov1983\",\n    recipientId: number//27045,\n    recipientName:string// \"evgeniysazonov\",\n    viewed: boolean// false,\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n\n}\nconst Messages2Item: React.FC<Messages2ItemType> = (\n    {id, body, Msg2DeleteMessage, addedAt, senderId, senderName, recipientId, recipientName, viewed })=>{\n    return <div>\n        <div onClick={()=>{\n            Msg2DeleteMessage(id)\n        }}>{body}</div>\n    </div>\n}\nexport default Messages2Item\n","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"MessagesFormik_legendStyle__Vv1lX\",\"fieldSetStyle\":\"MessagesFormik_fieldSetStyle__2ectG\",\"sendSwg\":\"MessagesFormik_sendSwg__TECWd\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\nimport sendSwg from \"../../../assets/images/swg/send-svg2.svg\"\nimport classes from \"./MessagesFormik.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype DialogFormikType = {\n    Msg2SendMessage: (messageBody: string) =>void,\n\n}\ntype valuesType = {\n    newMessage:string\n}\nconst Msg2SendMessageRender:React.FC<DialogFormikType> = ({Msg2SendMessage}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:valuesType, {resetForm}:any) => { // действия по сабмиту\n        Msg2SendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n                {({\n                      handleReset,// обнуление полей\n                    values,\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\n                            <div  className='col-9'>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"\"\n                                    autoFocus={false}\n                                    name='newMessage'\n                                    type='text'\n                                    placeholder='Введите ваше сообщение'\n                                    leftLabelLength={\"\"}\n                                   // autoFocus={true}\n                                />\n                            </div>\n                            <div>\n                                <Button variant={\"light\"} className={\"mx-2\"}\n                                        type=\"submit\" //кнопка отправить форму\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\n                                >\n\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\n                                           title={'Отправить сообщение'}/>\n                                </Button>\n                            </div>\n                        </div>\n                        {/*   <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default Msg2SendMessageRender\n\n","import React from \"react\";\nimport {getDialog2AllType} from \"../../api/apiTypes\";\nimport classes from \"./messages2Render.module.scss\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\n\ntype Msg2HeaderNamePhotoType = {\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n}\nconst Msg2HeaderNamePhoto:React.FC<Msg2HeaderNamePhotoType> = ({Dialog2All}) => {\n    const photoSrc = Dialog2All[0]&&Dialog2All[0].photos&& Dialog2All[0].photos.small? Dialog2All[0].photos.small : userPhoto // фото с сервера или заглушка\n    return <div>\n        {Dialog2All[0] && <div>\n            <div className={classes.Msg2HeaderName}>{Dialog2All[0] && Dialog2All[0].userName}</div>\n            <img className={classes.Msg2HeaderPhoto} src={photoSrc} alt=\"photoSrc\"/>\n            <div className={classes.Msg2HeaderActivityDate} >Был(а): {\" \"}\n                {Dialog2All[0] && Dialog2All[0].lastUserActivityDate.slice(0, 10)} {/*дата активности*/}\n            </div>\n        </div>}\n    </div>\n}\nexport default Msg2HeaderNamePhoto\n","import React from \"react\";\nimport classes from \"./messages2Render.module.scss\"\nimport {getDialog2AllType, sendMessageType} from \"../../api/apiTypes\";\nimport Messages2Item from \"./Messages2Item\";\nimport Msg2SendMessageRender from \"./Msg2SendMessageRender\";\nimport Msg2HeaderNamePhoto from \"./Msg2HeaderNamePhoto\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody: string) => void // отправить сообщение указанному пользователю\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n\n}\nconst Messages2Render: React.FC<Dialog2RenderType> = (\n    {PageWidth, MobileWidth, patch, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, Dialog2All}) => {\n\n    return <div>\n        {patch === \"dialog2\" && PageWidth > MobileWidth && <div\n            //- предложение выбрать диалог.Fixed все остальное поле справа.\n            // эта часть отображается только на странице dialog и только в десктопной версии\n            className={`${classes.Fixed} ${classes.messages2ChooseDialog}`}\n        > Выберите диалог\n        </div>}\n\n        {patch === \"messages\" &&\n        <div // эта часть компоненты Messages2Render отрисовывается на странице messages всегда.\n        >\n            <div\n                //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2NameAndProfileLink} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2HeaderNamePhoto Dialog2All={Dialog2All} />\n\n            </div>\n            <div //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2RenderMessages} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                {MessagesNewerThen.map( m2 => { // отрисовка всех сообщений\n                    const {\n                        id, body, addedAt, senderId, senderName, recipientId, recipientName, viewed,\n                      //  deletedBySender, deletedByRecipient, isSpam\n                    } = m2\n                    return <Messages2Item key={id} id={id} body={body} Msg2DeleteMessage={Msg2DeleteMessage}\n                                          addedAt={addedAt} senderId={senderId}\n                                          senderName={senderName} recipientId={recipientId}\n                                          recipientName={recipientName} viewed={viewed}\n                    />\n                } )}\n\n            </div>\n            <div//fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2PrintMessage} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2SendMessageRender Msg2SendMessage={Msg2SendMessage}/>\n            </div>\n        </div>\n        }\n\n    </div>\n\n}\nexport default Messages2Render\n","import React from \"react\";\nimport classesCommon from \"./dialog2Messages2Common.module.scss\";\nimport Dialog2Render from \"./Dialog2/Dialog2Render\";\nimport Messages2Render from \"./Messages2/Messages2Render\";\nimport {getDialog2AllType, sendMessageType} from \"../api/apiTypes\";\n\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody:string) => void // отправить сообщение указанному пользователю\n}\n\nconst Dialog2Messages2Common: React.FC<Dialog2RenderType> = (\n    {patch, PageWidth, MobileWidth, Dialog2All, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage}\n    ) => {\n    return <div className={classesCommon.dialog2Messages2Common}>\n        {/*Отрисовка поля диалогов*/}\n        <Dialog2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch} Dialog2All={Dialog2All}/>\n\n        <Messages2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch}\n                         MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n                         Msg2SendMessage={Msg2SendMessage} Dialog2All={Dialog2All}/>\n    </div>\n}\nexport default Dialog2Messages2Common\n","import React, {useCallback, useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {\n    deleteDialog2MessageIdThCr,\n    getDialog2MessageIdViewedThCr, getDialog2MessagesNewerThenThCr,\n    getDialog2AllThCr, postDialog2MessageIdToSpamThCr,\n    postDialog2MessageThCr, putDialog2MessageIdRestoreThCr,\n    putDialog2StartThCr, getDailog2UnreadMessagesThCr\n} from \"../../redux/dialog2-reducer\";\nimport Dialog2Messages2Common from \"./Dialog2Messages2Common\";\nimport {getDialog2AllType, sendMessageType} from \"../api/apiTypes\";\nimport {compose} from \"redux\";\nimport withRouter2 from \"../hoc/withRouter2\";\n\ntype DialogContainerType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    userId: number, // id пользователя из URL (withRouter2)\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,// получить список всех диалогов\n\n    putDialog2StartThCr: (currentDialogId: number) => void,\n    postDialog2MessageThCr: (userId: number, body: string, date: string) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string) => void,\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n\n}\nconst Dialog2Messages2Container: React.FC<DialogContainerType> = (\n    {\n        putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n        getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n        putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n        patch, PageWidth, MobileWidth, Dialog2All, userId, MessagesNewerThen\n    }\n) => {\n    //cde7821a-6981-4f49-8b12-faf681cb1621 от \"555\"\n    // 84ac68ee-73d0-43c4-82bb-0fd0273d4808 (привет андрей)\n    // 25528  | 27045 | 1079\n    const Msg2GetAllDialogs = useCallback( // убираем зацикленность при ререндере\n        () => {\n            console.log( \"Msg2GetAllDialogs\" )\n            getDialog2MessagesNewerThenThCr( userId, \"2022-04-30T19:10:31.843\" ) // получить все сообщения от указанного ID пользователя новее чем указанная дата\n        }\n        , [userId, getDialog2MessagesNewerThenThCr] )\n    const Msg2DeleteMessage = (message2Id: string) => {\n        // deleteDialog2MessageIdThCr(message2Id, userId, \"2022-04-30T19:10:31.843\") // - удалить сообщение (только у себя) по ID сообщения\n    }\n    const Msg2SendMessage = (messageBody: string) => {\n        postDialog2MessageThCr( userId, messageBody, \"2022-04-30T19:10:31.843\" )// отправить сообщение указав ID пользователя\n    }\n    useEffect( () => {\n        console.log( \"useEffect Msg2GetAllDialogs\" )\n        Msg2GetAllDialogs() // получить все сообщения от указанного ID пользователя новее чем указанная дата\n    }, [userId, Msg2GetAllDialogs] )\n    useEffect( () => { // при загрузке получить список всех диалогов\n        getDialog2AllThCr( 9999999999, 1, 10 ) // получить список всех диалогов\n\n        //putDialog2StartThCr(1079)\n        //  getDialog2MessageIdViewedThCr(\"84ac68ee-73d0-43c4-82bb-0fd0273d4808\") // проверить прочитано ли сообщение по его ID\n        // postDialog2MessageIdToSpamThCr(\"cde7821a-6981-4f49-8b12-faf681cb1621\") // пометить как спам сообщение по его ID\n        // putDialog2MessageIdRestoreThCr(\"cde7821a-6981-4f49-8b12-faf681cb1621\") // - восстановить сообщение из спама и удаленных\n        // getDailog2UnreadMessagesThCr() // - вернуть количество непрочтенных сообщений\n    }, [MessagesNewerThen, getDialog2AllThCr] )\n\n    return <div>\n        <Dialog2Messages2Common\n            patch={patch} PageWidth={PageWidth} MobileWidth={MobileWidth} Dialog2All={Dialog2All}\n            MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n            Msg2SendMessage={Msg2SendMessage}\n        />\n\n    </div>\n}\nconst mapStateToProps = (state: GlobalStateType) => {\n    return {\n        patch: state.app.patch,\n        PageWidth: state.app.PageWidth,\n        MobileWidth: state.app.MobileWidth,\n        Dialog2All: state.dialog2.Dialog2All,\n        MessagesNewerThen: state.dialog2.MessagesNewerThen,\n    }\n}\ntype mapStateToPropsType = {\n    patch: string,\n    PageWidth: number,\n    MobileWidth: number,\n    Dialog2All: getDialog2AllType,\n    MessagesNewerThen: Array<sendMessageType>\n}\ntype mapDispatchToPropsType = {\n    putDialog2StartThCr: (currentDialogId: number) => void,\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,\n    postDialog2MessageThCr: (userId: number, body: string, date: string) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string) => void,\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n\n}\nexport default compose<any>(\n    connect<mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType>( mapStateToProps,\n        {\n            putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n            getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n            putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr\n        }\n    ),\n    withRouter2// получить данные ID из URL браузера и добавить в пропсы\n)\n( Dialog2Messages2Container );\n\n/*\nexport default compose<any>(\n    connect<\n        mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType\n        >( mapStateToProps,\n        {\n    putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n    getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n    putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr\n\n        }\n    ),\n    withRouter2// получить данные ID из URL браузера и добавить в пропсы\n)\n( Dialog2Messages2Container );\n\n* */\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n"],"names":["_ref","userName","hasNewMessages","photos","lastDialogActivityDate","newMessagesCount","id","_jsx","className","classes","children","NavLink","to","_jsxs","src","small","userPhoto","alt","slice","PageWidth","MobileWidth","patch","Dialog2All","hasRendered","concat","map","d2","includes","push","Dialog2Item","body","Msg2DeleteMessage","addedAt","senderId","senderName","recipientId","recipientName","viewed","onClick","myInitialValues","newMessage","myValidationSchema","Yup","Msg2SendMessage","_Fragment","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","Button","variant","disabled","Image","sendSwg","title","photoSrc","lastUserActivityDate","MessagesNewerThen","Msg2HeaderNamePhoto","m2","Messages2Item","Msg2SendMessageRender","classesCommon","Dialog2Render","Messages2Render","compose","connect","state","app","dialog2","putDialog2StartThCr","getDialog2AllThCr","postDialog2MessageThCr","getDialog2MessageIdViewedThCr","postDialog2MessageIdToSpamThCr","deleteDialog2MessageIdThCr","putDialog2MessageIdRestoreThCr","getDialog2MessagesNewerThenThCr","getDailog2UnreadMessagesThCr","withRouter2","userId","Msg2GetAllDialogs","useCallback","console","log","useEffect","Dialog2Messages2Common","message2Id","messageBody","CommonInputTextArea","props","_objectWithoutProperties","_excluded","_useField","useField","meta","_slicedToArray","touched","error","_excluded2","_useField3","_useField4","field","InputGroup","size","style","width","_objectSpread","as","undefined","MyCheckbox","_excluded3","_useField5","_useField6","Children","aaa","params","useParams","Number"],"sourceRoot":""}