{"version":3,"file":"static/js/634.0696bedc.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/common/CommonClasses/ButtonOverImage.module.css?6d79","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusUseReducer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/EditProfile/EditProfile.module.css?6ed4","components/Profile/ProfileInfo/EditProfile/EditProfileFormikBS.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ShowProfile.tsx","components/Profile/ProfileInfo/ProfileInfoBS.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://my-app/./src/components/Profile/MyPosts/Post/MyPostsFormik/MyPosts.module.css?8e75","components/Profile/MyPosts/Post/MyPostsFormik/MyPostsFormikBS.tsx","components/Profile/MyPosts/MyPostsBS.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainerFC.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx","../node_modules/react-bootstrap/esm/createUtilityClasses.js","../node_modules/react-bootstrap/esm/Stack.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__G-3+o\",\"posts\":\"Profile_posts__ne6BS\"};","// extracted by mini-css-extract-plugin\nexport default {\"profilePhotoIMG\":\"ButtonOverImage_profilePhotoIMG__vdjsa\",\"ImgHover\":\"ButtonOverImage_ImgHover__b9CzX\",\"container\":\"ButtonOverImage_container__6pZv8\",\"btn1\":\"ButtonOverImage_btn1__d1Jbl\",\"displayNone\":\"ButtonOverImage_displayNone__2P3O5\",\"btn2\":\"ButtonOverImage_btn2__BaRhB\",\"btn\":\"ButtonOverImage_btn__KVVic\"};","import React, {ChangeEvent, useReducer} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\n\ntype ProfileStatusUseReducerType = {\n    myId:number, // мой id для модификации статуса\n    userId: number, // id отображаемого пользователя\n    status:string, // статус из BLL\n    putStatusThunkCreator: (statusTmpInput:string, myId:number)=>void, // санкреатор для обновления сатуса\n}\nlet ProfileStatusUseReducer:React.FC<ProfileStatusUseReducerType> = ({status, userId, myId, putStatusThunkCreator}) => {\n    const initialState = {\n        modifyStatus2: false,// локальная переменная-флаг модификации статуса\n        statusTmpInput2: \"\" // локальный статус до отправки на сервер (поле input)\n    }\n    type initialStateType = typeof initialState\n\n    const SET_MODIFY_STATUS_TRUE = \"SET_MODIFY_STATUS_TRUE\"; // константа (modify true)\n    const SET_MODIFY_STATUS_FALSE = \"SET_MODIFY_STATUS_FALSE\";// константа (modify false)\n    const SET_STATUS_TMP_INPUT = \"SET_STATUS_TMP_INPUT\";// константа (временный статус input)\n\n    type setModifyStatusTrue = {type:typeof SET_MODIFY_STATUS_TRUE}\n    type setModifyStatusFalse = {type:typeof SET_MODIFY_STATUS_FALSE}\n    type setStatusTmpInput = {type:typeof SET_STATUS_TMP_INPUT, text: string}\n\n    type ActionTypes = setModifyStatusTrue | setModifyStatusFalse | setStatusTmpInput\n\n    const localReducer = (localState:initialStateType, action:ActionTypes):initialStateType => {\n        let stateCopy; // копия стейта для дебага\n        switch (action.type) {\n            case SET_MODIFY_STATUS_TRUE: // если мы открываем поле input (модификацию стьатуса)\n                stateCopy = {\n                    ...localState,\n                    modifyStatus2: true, // флаг модификации в true\n                    statusTmpInput2: status// локальный статус для input берем из стейта\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            case SET_MODIFY_STATUS_FALSE: // если мы закрываем модификацию стьатуса\n                stateCopy = {\n                    ...localState,\n                    modifyStatus2: false // флаг модификации в false\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            case 'SET_STATUS_TMP_INPUT':\n                stateCopy = {\n                    ...localState,\n                    statusTmpInput2: action.text // задаем локальный статус из value input\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            default:\n                throw new Error(); // заглушка обработчика ошибок\n        }\n    }\n\n    const [localState, dispatch] = useReducer(localReducer, initialState)// меняем отдельные useState на useReducer\n\n    type checkIfICanModifyStatusType = () => void\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\n        if (userId === myId) { // если ID открытого пользователя равен моему\n            dispatch({type: SET_MODIFY_STATUS_TRUE})// смена текстового отображения статуса на поле input\n        }\n    }\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\n        dispatch({type: SET_MODIFY_STATUS_FALSE})// смена текстового отображения статуса на поле input\n\n        putStatusThunkCreator(localState.statusTmpInput2, myId)// санкреатор на обновление статуса на сервере\n    }\n    const onChangeStatus = (event:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const text = event.target.value;// вынимаем значение введенное в поле ввода input\n        dispatch({type: SET_STATUS_TMP_INPUT, text: text})// присваиваем переменной временного статуса из локального стейта введенное значение в поле\n    }\n    const checkEnterPressed = (e: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (e.charCode === 13) {\n            setMyStatus()//задание статуса при нажатии Enter\n        }\n    }\n\n    type CommonInputGroupType = {\n        isDisabled: boolean,\n        onClickMethod: checkIfICanModifyStatusType,\n        value:string\n    }\n    const CommonInputGroup:React.FC<CommonInputGroupType>  = ({isDisabled, onClickMethod, value}) => {\n        if (!value) {\n            value=\"\";\n        }\n        // общий метод (компонента) редактирования и отображения статуса\n        return <InputGroup className=\"my-3\" onClick={onClickMethod}> {/*отступ и метод по клику*/}\n            <InputGroup.Text id=\"basic-addon1\">Статус:</InputGroup.Text> {/* текст слева от поля*/}\n            <Form.Control\n                title={value}\n                onClick={onClickMethod}\n                value={value} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\n                onChange={(e)=>onChangeStatus(e)} // задание временного локального статуса\n                onBlur={setMyStatus}// задание стейта при потере фокуса input\n                autoFocus // фокусировка на поле ввода текста\n                placeholder={\"задайте статус\"}// текст при пустом поле ввода\n                onKeyPress={(e)=>checkEnterPressed(e)} // проверка нажатия Enter\n                disabled={isDisabled}\n            />\n        </InputGroup>\n    }\n    return (<div>\n        {!localState.modifyStatus2 // отображение или модификация статуса\n            ? <CommonInputGroup isDisabled={true} onClickMethod={checkIfICanModifyStatus} value={status}/>\n            : <CommonInputGroup isDisabled={false} onClickMethod={setMyStatus} value={localState.statusTmpInput2}/>\n        }\n    </div>)\n}\nexport default ProfileStatusUseReducer\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"HeaderEditProfileForm\":\"EditProfile_HeaderEditProfileForm__+ggeL\",\"EditProfile\":\"EditProfile_EditProfile__KCw4z\",\"EditProfileContactsFields\":\"EditProfile_EditProfileContactsFields__9QV1r\",\"errorText\":\"EditProfile_errorText__piK3h\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from './EditProfile.module.css'\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyCheckbox, MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport {ProfileType} from \"../../../../types/commonTypes\";\nimport {getProfileType} from \"../../../api/apiTypes\";\n\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype EditProfileFormikType = {\n    putProfile: (putProfile2: ProfileType) =>void,\n    setEditMode: (editMode: boolean)=> void\n    profile: getProfileType,\n    editProfileStatus:Array<string>,\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\n\n}\nconst EditProfileFormik:React.FC<EditProfileFormikType> = (\n    {putProfile, setEditMode, profile, editProfileStatus, setEditProfileStatus}\n    ) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n\n    const myInitialValues = { // начальные зачения форм\n        FullName: profile.fullName,\n        AboutMe: profile.aboutMe,\n        LookingForAJob: profile.lookingForAJob,\n        LookingForAJobDescription: profile.lookingForAJobDescription,\n        contacts: profile.contacts, // остальные данные с контактов профиля\n    }\n\n    const myOnSubmit = (values:ProfileType, {resetForm}:any) => { // действия по сабмиту\n        putProfile(values) // колбек, который принимает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n\n    }\n\n    return (\n        React.createElement(Formik, {\n            initialValues: myInitialValues, // начальные значения форм\n            validationSchema: myValidationSchema, // схема валидации\n            // @ts-ignore\n            onSubmit: myOnSubmit // действия по сабмиту\n        }, ({\n                // @ts-ignore\n                handleReset,// обнуление полей\n            }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n        React.createElement(Form, {className: classes.MyPosts},\n\n            React.createElement('div', {},\n                React.createElement('div', //Редактирование профиля\n                        {className: classes.HeaderEditProfileForm},\n                        'Редактирование профиля'\n                    ),\n                React.createElement(MyTextInput, //Полное имя:\n                        {\n                            label: \"Имя\",\n                            autoFocus: false,\n                            name: 'FullName',\n                            type: 'text',\n                            placeholder: 'Имя',\n                            leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\n                        }\n                    ),\n\n                React.createElement(MyTextInput,//Обо мне\n                        {label: \"Обо мне\", autoFocus: false, name: 'AboutMe', type: 'text', placeholder: 'Обо мне', leftLabelLength: \"5rem\"}, // слева в input появляется label указанной длины\n                    ),\n\n                // @ts-ignore\n                React.createElement(MyCheckbox, {name: 'LookingForAJob'}, //чекбокс ищу работу\n                        \"в поисках работы\"\n                    ),\n\n                React.createElement(MyTextInput, { //Описание поиска работы\n                            label: \"Описание\", autoFocus: false, name: 'LookingForAJobDescription',\n                            type: 'textarea', placeholder: 'Описание', leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\n                        }\n                    ),\n\n                React.createElement('h4', {},// вывод всех полей подобъекта контакты\n                        \"Контакты:\"\n                    ),\n\n                React.createElement('div', {className: classes.EditProfileContactsFields},\n                    Object.keys(profile.contacts).map((c) => { // вывод списка контактов, мапим\n                            return React.createElement('div', {key: c},\n                                React.createElement(\n                                    MyTextInput,\n                                    {\n                                        label: c,\n                                        autoFocus: false,\n                                        name: 'contacts[' + c + ']',\n                                        type: 'text',\n                                        placeholder: c,\n                                        leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\n                                    },\n                                ),\n                                React.createElement('div', {}, //ошибки редактирования профиля с сервера\n                                    editProfileStatus.map(err => {// прогоняем весь массив ошибок с сервера на обновление профиля\n                                        if (err.toLowerCase().includes(c.toLowerCase())) { // если имя отрисовываемого поля \"с\" соджержится в сообщении об ошибке\n                                            return React.createElement('div', {key: err, className: classes.errorText}, err )// выводим сообщение об ошибке рядом с полем\n                                        }\n                                        return null\n                                    })\n                                ),\n                            )\n                        })\n                    ),\n                React.createElement('br'), //перенос строки\n\n                    //кнопка сброса к значениям по умолчанию\n                React.createElement(Button, {\n                        type: 'button',\n                        variant: \"warning\",\n                        onClick: () => { // при клике по кнопке сброс\n                            handleReset();// занулить поля ввода по умолчанию\n                            setEditProfileStatus([]); // сбросить сообщение об ошибке с сервера\n                        }\n                    }, 'Сброс'),\n\n                    \" \", //отступ между кнопками\n\n                    //кнопка отправить форму\n                React.createElement(Button, {type: 'submit'}, 'Применить'),\n\n                    \" \", //отступ между кнопками\n\n                    //отмена\n                React.createElement(Button, {\n                        variant: \"secondary\",\n                        onClick: () => { // при клике по кнопке отмена\n                            setEditMode(false)// переключиться с режима редактирования профиля на просмотр\n                            setEditProfileStatus([]) // сбросить сообщение об ошибке с сервера\n                        }\n                    }, 'Отмена'),\n                )\n            )\n        ))\n    )\n}\n\nexport default EditProfileFormik\n\n","import React from \"react\";\n\ntype ContactType = {\n    key1:string,\n    Value:string\n}\nconst Contact:React.FC<ContactType> = ({key1, Value}) => { /*простая функция вывода отдельного элемента contacts из profile*/\n    return <div >\n        <b>{key1}: </b > <span title={Value}>{Value}</span>\n    </div>\n}\nexport default Contact\n","import {getProfileType} from \"../../api/apiTypes\";\nimport React from \"react\";\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Contact from \"./Contact\";\n\ntype ShowProfileType = {\n    profile: getProfileType,\n    setEditMode: (editMode: boolean )=> void,\n    userId: number,\n    myId: number\n}\n\nconst ShowProfile: React.FC<ShowProfileType> = ({profile, setEditMode, userId, myId}) => {\n    // вынес отдельно отображение профиля\n\n\n    return (<div\n            className={`${commonClasses.textMaxWidthCommon} ${commonClasses.textMaxWidth18rem}`}>\n\n\n            <h3 title={profile.fullName}>{profile.fullName}</h3>\n            <div ><b>Обо мне</b>: <span title={profile.aboutMe}> {profile.aboutMe}</span></div>\n            <div><b>В поиске работы?</b> <span title={profile.lookingForAJob ? \"Да\" : \"Нет\"}>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</span></div>\n            <div ><b>Описание:</b> <span title={profile.lookingForAJobDescription}>{profile.lookingForAJobDescription}</span></div>\n            <div><b>userId:</b> <span title={profile.userId.toString()}>{profile.userId}</span> </div>\n\n            <ul>\n                {profile && Object.keys(profile.contacts).map((key1, ind) => { // ключи contacts\n                    const Value:string = Object.values(profile.contacts)[ind] // значения contacts\n                    return (<li key={key1}>\n                            <Contact key1={key1} Value={Value} /> {/*вывод ключ + значение*/}\n                        </li>\n                    )\n                })}\n            </ul>\n\n            {(userId === 0) && <Button onClick={() => {\n                setEditMode(true)\n            }}>Редактировать профиль </Button>}\n\n        </div>\n    )\n}\n\nexport default ShowProfile\n","import React, {useEffect, useState} from 'react';\nimport ButtonOverImage from '../../common/CommonClasses/ButtonOverImage.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusUseReducer from \"./ProfileStatus/ProfileStatusUseReducer\"; //ProfileStatusClass | ProfileStatusUseState\nimport userPhoto1 from \"../../../assets/images/no-image3.png\";\nimport EditProfileFormikBS from \"./EditProfile/EditProfileFormikBS\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Image from 'react-bootstrap/Image'\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport {getProfileType} from \"../../api/apiTypes\";\nimport {ProfileType} from \"../../../types/commonTypes\";\nimport ShowProfile from \"./ShowProfile\";\n\n\n\ntype ProfileInfoType2 = {\n    profile: getProfileType,\n    status: string,\n    myId: number,\n    userId: number,\n    putProfile: (putProfile2: ProfileType) =>void,\n    putStatusThunkCreator: (statusTmpInput:string, myId:number)=>void,\n    uploadImage: (profilePhoto: any)=>void,\n    editProfileStatus:Array<string>,\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoType2> = ({\n                         profile, myId, status, putStatusThunkCreator, uploadImage,\n                         userId, putProfile, editProfileStatus, setEditProfileStatus\n                     }) => {\n\n    const [profilePhoto, setprofilePhoto] = useState(userPhoto1) // useState для временного хранения фото пользователя\n    const [editMode, setEditMode] = useState<boolean>(false) // флаг режима редактирования профиля\n    const [showUploadImageButton, setshowUploadImageButton] = useState(false) // флаг показать ли кнопку загрузки изображения\n\n    const editedSuccessfully = editProfileStatus.length > 0 // если сообщение об ошибке/обновлении существует\n        && editProfileStatus[0] === \"Edited successfully!\" // и успешный статус обновления с сервера\n\n    useEffect(() => {\n        if (editedSuccessfully) { // если успешно обновлен профиль на сервере\n            setEditMode(false) // закрыть режим редактирования профиля\n            // желательно здесь сделать прокрутку до верха профиля\n            setTimeout(() => {\n                setEditProfileStatus([]) // убирание сообщения ответа от сервера по таймеру\n            }, 2000)\n        }\n    }, [editProfileStatus, editedSuccessfully, setEditProfileStatus]) // переключение режима редактирования зависит от ответа с сервера\n\n\n    if (!profile) { // если профиль еще не загружен\n        return <Preloader/> // отобразить предзагрузку\n    }\n    const onChangeProfilePhoto = (e:any) => {\n        setprofilePhoto(e.target.files[0]) // записать в useState выбранный файл фото профиля(временный стейт)\n    }\n    const displayClass = showUploadImageButton ? \"\" : ButtonOverImage.displayNone // класс скрытия/отображения кнопок загрузки поверх картинки профиля\n\n    const profileStatus = <ProfileStatusUseReducer // можно еще использовать ProfileStatusUseState и ProfileStatusClass\n        myId={myId} // мой id для модификации статуса\n        userId={profile.userId} // id отображаемого пользователя\n        status={status} // статус из BLL\n        putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n    />\n\n    const showProfile = !editMode &&\n        <ShowProfile profile={profile} setEditMode={setEditMode} userId={userId} myId={myId}/>\n\n    const editProfile = editMode &&\n        <div>\n            <EditProfileFormikBS\n                putProfile={putProfile} setEditMode={setEditMode} profile={profile}\n                editProfileStatus={editProfileStatus} setEditProfileStatus={setEditProfileStatus}/>\n        </div>\n    const editMyPhoto = (userId === 0) &&// если мы перешли на свой профиль (в браузере нет ID возле profile)\n        <div>\n            <form> {/*форма отправки фото профиля на сервер*/}\n                <span><button\n                    className={ButtonOverImage.btn1 + \" \" + displayClass} // двойной класс - сама кнопка загрузки + класс скрыть/показать при наведении\n                    onMouseOver={() => {\n                        setshowUploadImageButton(true)\n                    }} // при наведении сменить флаг  setshowUploadImageButton на true (показать кнопку)\n                    onMouseOut={() => {\n                        setshowUploadImageButton(false)\n                    }}// при убирании мышки сменить флаг  setshowUploadImageButton на false (скрыть кнопку)\n                    onClick={() => { //\n                        uploadImage(profilePhoto)\n                    }}>Загрузить</button></span> {/*По клику отправить файл на сервер*/}\n                <span>\n                    <input\n                        className={ButtonOverImage.btn2 + \" \" + displayClass} // двойной класс - сама кнопка загрузки + класс скрыть/показать при наведении\n                        onMouseOver={() => {\n                            setshowUploadImageButton(true)\n                        }} // при наведении сменить флаг  setshowUploadImageButton на true (показать кнопку)\n                        onMouseOut={() => {\n                            setshowUploadImageButton(false)\n                        }}// при убирании мышки сменить флаг  setshowUploadImageButton на false (скрыть кнопку)\n                        type=\"file\" onChange={onChangeProfilePhoto}/></span> {/*загрузить файл*/}\n            </form>\n        </div>\n\n    const showUserPhoto = <Image fluid={true}\n        alt={\"userPhoto\"}\n        onMouseOver={() => {\n            setshowUploadImageButton(true)\n        }} // при поя\n        onMouseOut={() => {\n            setshowUploadImageButton(false)\n        }}\n        className={`${ButtonOverImage.profilePhotoIMG} ${userId === 0 && showUploadImageButton ? ButtonOverImage.ImgHover : \"\"}`}\n        // если это мой профиль (userId === 0) и мышкой навели на картинку, добавить ImgHover класс (альтернатива псевдокласса :hover)\n        src={profile.photos.large ? profile.photos.large : userPhoto1}/>\n\n    return <div>\n        <Container fluid=\"sm\">\n            <h2 className={commonClasses.pageHeader}>Profile</h2> {/*Заголовок*/}\n\n            <Row >\n                <Col xs={12} md={5} className={ButtonOverImage.container}>\n                    {showUserPhoto} {/*показать фото пользователя*/}\n                    {editMyPhoto} {/* сменить фото, если это мой профиль*/}\n                </Col>\n                <Col xs={12} md={7}>\n                    {showProfile} {/*показать профиль*/}\n                    {editProfile} {/*редактировать профиль*/}\n\n                    {/*{editProfileStatus} {/*статус обновления профиля (успешно/ошибки)*/}\n                    {/*Если длина больше нуля, то выводим сообщение.\n                Если сообщение sucessully, то закрываем режим редактирования, выводим успех редактирования и по сеттаймауту зануляем стейт с ошибками\n                Если не саксесфулли, то выводим ошибки и не закрываем редактирование*/}\n                    <div>\n                        {editedSuccessfully // если успешно обновлен профиль на сервере\n                            && <div>\n                                {editProfileStatus[0]} {/* вывести сообщение успешного обновления*/}\n                            </div>\n                        }\n                    </div>\n                    <div>\n                        {profileStatus} {/*отображение моего статуса*/}\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    </div>\n}\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__v8PmM\",\"postsBlock\":\"MyPosts_postsBlock__Vokae\",\"newPostFormTextArea\":\"MyPosts_newPostFormTextArea__Ehj-D\",\"legendStyle\":\"MyPosts_legendStyle__kuSLI\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__U+szP\",\"item\":\"Post_item__yvb5C\",\"posts\":\"Post_posts__8VASs\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\ntype PostType = {\r\n    message:string, like: number\r\n}\r\nconst Post: React.FC<PostType> = ({message, like}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img alt={\"Мистер бин на прогулке\"}  src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\r\n            {message}\r\n            <div>\r\n                <span>Like {like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"MyPosts\":\"MyPosts_MyPosts__FZcZt\",\"legendStyle\":\"MyPosts_legendStyle__E67pa\",\"fieldSetStyle\":\"MyPosts_fieldSetStyle__0EG1i\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./MyPosts.module.css\"\n//import DisplayFormikState from \"../../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Stack from \"react-bootstrap/Stack\";\n\nlet myInitialValues = { // начальные зачения форм\n    newPost: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype MyPostsFormikType = {\n    addPost: (newPostData: string) => void\n\n}\ntype ValuesType = {\n    newPost: string\n}\nconst MyPostsFormik:React.FC<MyPostsFormikType> = ({addPost}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:ValuesType, {resetForm}:any) => { // действия по сабмиту\n        addPost(values.newPost) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form className={classes.MyPosts}>\n                        <div>\n                            <MyTextInput // сообщение в MyPostsBS\n                                label=\"Пост\"\n                                autoFocus={false}\n                                name='newPost'\n                                type='textarea'\n                                placeholder='Введите ваше сообщение'\n                                leftLabelLength={\"\"}\n                            />\n\n                            {/*кнопка сброса к значениям по умолчанию*/}\n                            <Stack direction=\"vertical\" gap={1} className={'mt-2'}>\n                                <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                                    Submit\n                                </Button>\n                                <Button\n                                    variant=\"warning\"\n                                    type='button'\n                                    onClick={handleReset}\n                                >Reset\n                                </Button>\n                            </Stack>\n\n                        </div>\n                        <div/>\n                        {/*  <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n\n                )}\n\n            </Formik>\n        </>\n    )\n}\n\nexport default MyPostsFormik\n","import React from 'react'; // импорт реакта\r\nimport classes from './MyPosts.module.css' // css обработка\r\nimport Post from \"./Post/Post\"; // подкомпонента отрисовки постов через map\r\nimport MyPostsFormik from \"./Post/MyPostsFormik/MyPostsFormikBS\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {postsType} from \"../../../types/commonTypes\"; // reduxForm для ввода новых постов\r\n\r\ntype MyPostsBSType = {\r\n    userId: number,\r\n    posts: Array<postsType>,\r\n    addPost: (newPostData:string)=>void\r\n}\r\nconst MyPostsBS:React.FC<MyPostsBSType> = ({userId, posts, addPost}) => { // основная компонента отрисовки постов\r\n\r\n    const postElements = posts.map((p) => // подкомпонента отрисовки всех постов через map\r\n        <Post key={p.id} message={p.message} like={p.like}/>);\r\n\r\n    return (\r\n        <div className={classes.postsBlock} /*стиль*/ >\r\n            <Container>\r\n                {(userId === 0) && // если мы перешли на свой профиль (в браузере нет ID возле profile)\r\n                <div>\r\n                    <fieldset>\r\n                        <legend>\r\n                            <div className={classes.legendStyle}>Мои посты</div>\r\n                        </legend>\r\n                        <MyPostsFormik\r\n                            addPost={addPost}/> {/*вызов формы постов с отсылкой на локальный обработчик сабмита*/}\r\n                        <div className={classes.posts}>\r\n                            {postElements} {/*отрисовка постов*/}\r\n                        </div>\r\n                    </fieldset>\r\n                </div>\r\n                }\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default MyPostsBS;\r\n","import MyPostsBS from \"./MyPostsBS\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {postsType} from \"../../../types/commonTypes\";\r\nimport {GlobalStateType} from \"../../../redux/store-redux\";\r\n\r\ntype MyPostsContainerType = {\r\n    userId: number,\r\n    posts: Array<postsType>,\r\n    addPostActionCreator: (newPostData: string) => void\r\n}\r\nconst MyPostsContainer: React.FC<MyPostsContainerType> = ({posts, addPostActionCreator, userId}) => {\r\n\r\n    type addPostType = (newPostData: string) => void\r\n    const addPost: addPostType = (newPostData: string) => {\r\n        addPostActionCreator( newPostData )\r\n    }\r\n    return <MyPostsBS userId={userId} posts={posts} addPost={addPost}/>\r\n}\r\n\r\nlet mapStateToProps = (state: GlobalStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPostActionCreator: (newPostData: string) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<postsType>\r\n}\r\n\r\nexport default connect<mapStateToPropsType, // тип mapStateToProps\r\n    mapDispatchToPropsType, // тип mapDispatchToProps\r\n    unknown, // тип входящих пропсов от родителя\r\n    GlobalStateType // глобальный стейт из стора\r\n    >( mapStateToProps, {addPostActionCreator} )( MyPostsContainer );\r\n\r\n\r\n\r\n","import React from 'react';\nimport classes from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfoBS\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {getProfileType} from \"../api/apiTypes\";\nimport {ProfileType} from \"../../types/commonTypes\";\n\ntype ProfileType2 = {\n    profile: getProfileType,\n    status: string,\n    myId: number,\n    userId: number,\n    putProfile: (putProfile2: ProfileType) =>void,\n    putStatusThunkCreator: (statusTmpInput:string, myId:number)=>void,\n    uploadImage: (profilePhoto: any)=>void,\n    editProfileStatus:Array<string>,\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\n}\n\nconst Profile: React.FC<ProfileType2> = ({\n                     profile, status, myId, putStatusThunkCreator, uploadImage,\n                     userId, putProfile, editProfileStatus, setEditProfileStatus\n                 }) => {\n\n    const ProfileRender = <div className={classes.ProfileRender}>\n        <ProfileInfo // Отображение данных выбранного пользователя\n            profile={profile} // профиль выбранного пользователя\n            status={status} // статус из BLL\n            myId={myId} // мой id для модификации статуса\n            putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n            uploadImage={uploadImage} // колбек загрузки фото профиля на сервер\n            userId={userId} // id выбранного пользователя, берется из URL\n            putProfile={putProfile}\n            editProfileStatus={editProfileStatus} // список ошибок правки формы профиля с сервера\n            setEditProfileStatus={setEditProfileStatus}\n        />\n\n    </div>\n    return <div>\n        {ProfileRender} {/*Отрисовка данных профиля с картинкой, и статусом*/}\n\n        <MyPostsContainer // контейнер отображения постов (пока заглушка из стейта BLL)\n            userId={userId} // id выбранного пользователя, берется из URL\n        />\n    </div>\n}\nexport default Profile;\n","import {getProfileType} from \"../api/apiTypes\";\r\nimport {ProfileType} from \"../../types/commonTypes\";\r\nimport {GlobalStateType} from \"../../redux/store-redux\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunkCreator, putMyProfileThunkCreator,\r\n    putStatusThunkCreator,\r\n    setEditProfileStatus,\r\n    setprofilePhotoThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport withRouter2 from \"../hoc/withRouter2\";\r\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\r\nimport React, {useEffect} from \"react\";\r\nimport Profile from \"./Profile\";\r\n\r\ntype ProfileContainerType = {\r\n    profile: getProfileType, // весь профиль пользователя\r\n    isAuth: boolean, // авторизация прошла?\r\n    myId: number, // мой ID\r\n    status: string, // статус\r\n    editProfileStatus: Array<string>  // список ошибок правки формы профиля с сервера\r\n    userId: number // id пользователя\r\n    setEditProfileStatus: (editProfileStatus: Array<string>) => void,// экшн креатор задания ошибки с сервера в стейт после правки профиля\r\n    getProfileThunkCreator: (userId: number, shouldUpdateDialogList: boolean, myId: number) => void,// санкреатор на получение профиля выбранного пользователя\r\n    putStatusThunkCreator: (statusTmpInput: string, myId: number) => void,// санкреатор обновления моего статуса\r\n    setprofilePhotoThunkCreator: (profilePhoto: any, myId: number) => void,// санкреатор установки фотографии моего профиля\r\n    putMyProfileThunkCreator: (MyProfile: ProfileType, myId: number) => void,\r\n}\r\n\r\nconst ProfileContainerFC:React.FC<ProfileContainerType> = (\r\n    {profile, myId, status, editProfileStatus, userId, setEditProfileStatus,\r\n    getProfileThunkCreator,   putStatusThunkCreator, setprofilePhotoThunkCreator,\r\n    putMyProfileThunkCreator}) => {\r\n\r\n    const uploadImage = (profilePhoto: any) => {\r\n        setprofilePhotoThunkCreator( profilePhoto, myId )\r\n    }\r\n    const putProfile = (putProfile2: ProfileType) => { // обновить данные профиля просле правки\r\n        // добавить в данные после изменения формы мой ID для чтения результата обновления с сервера\r\n        const MyProfile = Object.assign( {}, {userId: myId}, putProfile2 );\r\n        putMyProfileThunkCreator( MyProfile, myId )// обновить данные профиля просле правки\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getProfileThunkCreator(userId, false, 0 );// обновить профиль в зависомости от ID\r\n    },[])\r\n\r\n    return <Profile\r\n        profile={profile} // профиль\r\n        status={status} //статус\r\n        myId={myId}// мой ID\r\n        putStatusThunkCreator={putStatusThunkCreator}\r\n        uploadImage={uploadImage}// загрузка картинки\r\n        userId={userId}// id пользователя (может совпадать с myId если смотрим свой профиль)\r\n        putProfile={putProfile}// задание профиля на сервер после ввода данных\r\n        editProfileStatus={editProfileStatus}// список ошибок правки формы профиля с сервера\r\n        setEditProfileStatus={setEditProfileStatus}// экшн креатор задания ошибки с сервера в стейт после правки профиля\r\n    />\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: getProfileType,\r\n    myId: number, // мой\r\n    status: string, // статус\r\n    editProfileStatus: Array<string>  // список ошибок правки формы профиля с сервера\r\n}\r\n\r\nlet mapStateToProps = (state: GlobalStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile as getProfileType,\r\n        myId: state.auth.myId as number, // мой\r\n        status: state.profilePage.status as string, // статус\r\n        editProfileStatus: state.profilePage.editProfileStatus as Array<string>  // список ошибок правки формы профиля с сервера\r\n    }\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    setEditProfileStatus: (editProfileStatus: Array<string>) => void,// экшн креатор задания ошибки с сервера в стейт после правки профиля\r\n    getProfileThunkCreator: (userId: number, shouldUpdateDialogList: boolean, myId: number) => void,// санкреатор на получение профиля выбранного пользователя\r\n    putStatusThunkCreator: (statusTmpInput: string, myId: number) => void,// санкреатор обновления моего статуса\r\n    setprofilePhotoThunkCreator: (profilePhoto: any, myId: number) => void,// санкреатор установки фотографии моего профиля\r\n    putMyProfileThunkCreator: (MyProfile: ProfileType, myId: number) => void,\r\n}\r\n\r\nexport default compose<any>(\r\n    connect<mapStateToPropsType, // тип mapStateToProps\r\n        mapDispatchToPropsType, // тип mapDispatchToProps\r\n        unknown, // тип входящих пропсов от родителя\r\n        GlobalStateType // глобальный стейт из стора\r\n        >( mapStateToProps, {\r\n        setEditProfileStatus,// экшн креатор задания ошибки с сервера в стейт после правки профиля\r\n        getProfileThunkCreator,// санкреатор на получение профиля выбранного пользователя\r\n        putStatusThunkCreator,// санкреатор обновления моего статуса\r\n        setprofilePhotoThunkCreator,// санкреатор установки фотографии моего профиля\r\n        putMyProfileThunkCreator, // санкреатор установки моего профиля myProfile\r\n    } ),\r\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\r\n    NavigateToLoginHoc2// проверка, залогинен ли я\r\n)( ProfileContainerFC )\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nlet NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n","import PropTypes from 'prop-types';\nimport { DEFAULT_BREAKPOINTS, DEFAULT_MIN_BREAKPOINT } from './ThemeProvider';\nexport function responsivePropType(propType) {\n  return PropTypes.oneOfType([propType, PropTypes.shape({\n    xs: propType,\n    sm: propType,\n    md: propType,\n    lg: propType,\n    xl: propType,\n    xxl: propType\n  })]);\n}\nexport default function createUtilityClassName(utilityValues, breakpoints = DEFAULT_BREAKPOINTS, minBreakpoint = DEFAULT_MIN_BREAKPOINT) {\n  const classes = [];\n  Object.entries(utilityValues).forEach(([utilName, utilValue]) => {\n    if (utilValue != null) {\n      if (typeof utilValue === 'object') {\n        breakpoints.forEach(brkPoint => {\n          const bpValue = utilValue[brkPoint];\n          if (bpValue != null) {\n            const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n            classes.push(`${utilName}${infix}-${bpValue}`);\n          }\n        });\n      } else {\n        classes.push(`${utilName}-${utilValue}`);\n      }\n    }\n  });\n  return classes;\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport createUtilityClassName, { responsivePropType } from './createUtilityClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Stack = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  direction,\n  gap,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, direction === 'horizontal' ? 'hstack' : 'vstack');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ref: ref,\n    className: classNames(className, bsPrefix, ...createUtilityClassName({\n      gap\n    }, breakpoints, minBreakpoint))\n  });\n});\nStack.displayName = 'Stack';\nexport default Stack;"],"names":["_ref","status","userId","myId","putStatusThunkCreator","SET_MODIFY_STATUS_TRUE","SET_MODIFY_STATUS_FALSE","_useReducer","useReducer","localState","action","type","_objectSpread","modifyStatus2","statusTmpInput2","text","Error","_useReducer2","_slicedToArray","dispatch","setMyStatus","CommonInputGroup","_ref2","isDisabled","onClickMethod","value","_jsxs","InputGroup","className","onClick","children","_jsx","id","Form","title","onChange","e","event","target","onChangeStatus","onBlur","autoFocus","placeholder","onKeyPress","charCode","checkEnterPressed","disabled","myValidationSchema","Yup","putProfile","setEditMode","profile","editProfileStatus","setEditProfileStatus","myInitialValues","FullName","fullName","AboutMe","aboutMe","LookingForAJob","lookingForAJob","LookingForAJobDescription","lookingForAJobDescription","contacts","React","Formik","initialValues","validationSchema","onSubmit","values","resetForm","_ref3","handleReset","classes","MyTextInput","label","name","leftLabelLength","MyCheckbox","Object","keys","map","c","key","err","toLowerCase","includes","Button","variant","key1","Value","concat","commonClasses","toString","ind","Contact","uploadImage","_useState","useState","userPhoto1","_useState2","profilePhoto","setprofilePhoto","_useState3","_useState4","editMode","_useState5","_useState6","showUploadImageButton","setshowUploadImageButton","editedSuccessfully","length","useEffect","setTimeout","Preloader","displayClass","ButtonOverImage","profileStatus","ProfileStatusUseReducer","showProfile","ShowProfile","editProfile","EditProfileFormikBS","editMyPhoto","onMouseOver","onMouseOut","files","showUserPhoto","Image","fluid","alt","src","photos","large","Container","Row","Col","xs","md","message","like","newPost","addPost","_Fragment","Stack","direction","gap","posts","postElements","p","Post","MyPostsFormik","connect","state","profilePage","addPostActionCreator","MyPostsBS","newPostData","ProfileRender","ProfileInfo","MyPostsContainer","compose","auth","getProfileThunkCreator","setprofilePhotoThunkCreator","putMyProfileThunkCreator","withRouter2","NavigateToLoginHoc2","Profile","putProfile2","MyProfile","assign","CommonInputTextArea","props","_objectWithoutProperties","_excluded","_useField","useField","meta","touched","error","_excluded2","_useField3","_useField4","field","size","style","width","as","undefined","_excluded3","_useField5","_useField6","mapStateToProps","isAuth","Component","Navigate","to","Children","aaa","params","useParams","Number","createUtilityClassName","utilityValues","breakpoints","arguments","DEFAULT_BREAKPOINTS","minBreakpoint","DEFAULT_MIN_BREAKPOINT","entries","forEach","utilName","utilValue","brkPoint","bpValue","infix","push","ref","_ref$as","bsPrefix","useBootstrapPrefix","useBootstrapBreakpoints","useBootstrapMinBreakpoint","classNames","_toConsumableArray","displayName"],"sourceRoot":""}