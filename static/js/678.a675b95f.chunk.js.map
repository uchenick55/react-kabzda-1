{"version":3,"file":"static/js/678.a675b95f.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/LoginFormik.jsx","components/Login/LoginContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"LoginForm\":\"Login_LoginForm__s2klG\",\"legendStyle\":\"Login_legendStyle__SOIpE\",\"fieldSetStyle\":\"Login_fieldSetStyle__1oKJz\",\"errorText\":\"Login_errorText__kahI9\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./Login.module.css\"\nimport {MyTextInput, MyCheckbox} from \"../common/formikCommon/MyFields\"\nimport {PointerCursor} from \"../Dark_light_theme/globalStyles\";\n//import DisplayFormikState from \"../common/formikCommon/DisplayFormikState\"\n\nlet myInitialValues = { // начальные зачения форм\n    email: \"\",\n    password: \"\",\n    captcha: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    password: Yup.string()\n        .required('Required'),\n})\n\nconst LoginFormik = ({postLogin, captchaURL, updateCaptcha, loginError}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\n        postLogin(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form className={classes.LoginForm}>\n                        <fieldset>\n                            <legend>\n                                <div className={classes.legendStyle}>Войдите в аккаунт</div>\n                            </legend>\n                            <MyTextInput // email\n                                label=\"Email Address\"\n                                name='email'\n                                type='email'\n                                placeholder='email'\n                            />\n\n                            <MyTextInput // password\n                                label=\"Password\"\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder='password'\n                            />\n\n                            <MyCheckbox name='rememberme'>  {/*чекбокс */}\n                                запомнить меня\n                            </MyCheckbox>\n\n                            {captchaURL &&\n                            <div>\n                                <PointerCursor>\n                                    <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"/>\n                                </PointerCursor>\n                                {/*<label htmlFor=\"captcha\">Captcha</label> {/*альтернатива написания input с обработкой ошибок*/}\n\n                                <MyTextInput // email\n                                    label=\"\"\n                                    name='captcha'\n                                    type='text'\n                                    placeholder='captcha'\n                                />\n\n                            </div>\n                            }\n\n                            <button type=\"submit\" > {/*кнопка отправить форму*/}\n                                Submit\n                            </button>\n                            <button type='button' onClick={handleReset}>Reset</button>\n                            {/*кнопка сброса к значениям по умолчанию*/}\n                            <div className={classes.errorText}>{loginError && loginError}</div>\n                        </fieldset>\n                        <div/>\n\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n\n                    </Form>\n\n                )}\n\n            </Formik>\n        </>\n    )\n}\n\nexport default LoginFormik\n\n","import React from \"react\";\r\nimport Login from \"./LoginFormik\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    postLogin = ({email, password, rememberme, captcha}) => { // email, password, rememberme берем из формы login\r\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\r\n        this.props.postLoginThunkCreator(email, password, rememberme, captcha);\r\n    }\r\n\r\n    updateCaptcha = () => {\r\n        this.props.getCaptchaThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) { // условие что я авторизован\r\n            this.props.getFriendsThunkCreator( // получить список друзей\r\n                this.props.friendsCurrentPage,\r\n                this.props.friendsPageSize,\r\n                this.props.friendsTerm,\r\n                this.props.friend);\r\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Login postLogin={this.postLogin}\r\n                       captchaURL={this.props.captchaURL}\r\n                       updateCaptcha={this.updateCaptcha}\r\n                       dispatch = {this.props.dispatch}\r\n                       loginError = {this.props.loginError}\r\n                /> {/*Возврат целевой компоненты*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\r\n        friendsPageSize: state.sideBar.friendsPageSize,\r\n        friendsTerm: state.sideBar.friendsTerm,\r\n        friend: state.sideBar.friend,\r\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\r\n        loginError: state.auth.loginError // ошибка авторизации\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        postLoginThunkCreator: (email, password, rememberme, captchaURL) => { // отправить сообщение\r\n            dispatch(postLoginThunkCreator(email, password, rememberme, captchaURL))\r\n        },\r\n        getFriendsThunkCreator: (currentPage, pageSize, term, friend) => { // отправить сообщение\r\n            dispatch(getFriendsThunkCreator(currentPage, pageSize, term, friend))\r\n        },\r\n        getCaptchaThunkCreator: () => { // отправить сообщение\r\n            dispatch(getCaptchaThunkCreator())\r\n        },\r\n        dispatch: dispatch\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\r\n"],"names":["myInitialValues","email","password","captcha","myValidationSchema","Yup","required","postLogin","captchaURL","updateCaptcha","loginError","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","className","classes","label","name","type","placeholder","src","onClick","alt","LoginContainer","rememberme","props","postLoginThunkCreator","getCaptchaThunkCreator","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","to","dispatch","React","connect","state","auth","sideBar","currentPage","pageSize","term"],"sourceRoot":""}