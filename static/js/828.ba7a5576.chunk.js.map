{"version":3,"file":"static/js/828.ba7a5576.chunk.js","mappings":"uMAMMA,EAAqB,WACvBC,QAAQC,IAAI,0BACZ,IAAMC,GAAoCC,EAAAA,EAAAA,KAAa,SAACC,GAAsB,OAAKA,EAAMC,KAAKH,QAAQ,IAatG,IAAMI,EAXN,SAA0BC,GACtB,IAAMD,EAAME,EAAAA,OAA8B,MAO1C,OANAA,EAAAA,WAAiB,WACTF,EAAIG,UACJH,EAAIG,QAAQC,UAAYJ,EAAIG,QAAQE,aAE5C,GAAG,CAACJ,IAEGD,CACX,CAEYM,CAAeV,GAE3B,OAAOW,EAAAA,EAAAA,KAAA,OAAKP,IAAKA,EACLQ,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAQC,SAGnDf,EAASgB,KAAK,SAACC,EAA2BC,GACvC,OAAOP,EAAAA,EAAAA,KAACQ,EAAO,CAAaF,QAASA,GAAhBC,EACzB,KAER,EAEMC,EAAmD,SAAHC,GAAmB,IAAdH,EAAOG,EAAPH,QACvD,OAAON,EAAAA,EAAAA,KAAA,OAAAI,UACHM,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACIJ,EAAAA,EAAAA,KAAA,OAAKW,IAAKL,EAAQM,MAAOC,IAAI,SAASZ,MAAO,CAACC,OAAQ,UACrDI,EAAQQ,UACTd,EAAAA,EAAAA,KAAA,OAAAI,SAAME,EAAQA,WACdN,EAAAA,EAAAA,KAAA,aAGZ,EAEMe,EAAwB,WAC1B5B,QAAQC,IAAI,6BAEZ,IAAM4B,GAAmC1B,EAAAA,EAAAA,KAAa,SAACC,GAAsB,OAAKA,EAAMC,KAAKwB,aAAa,IAE1GC,GAA8BC,EAAAA,EAAAA,UAAkB,IAAIC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CX,EAAOa,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAAWC,EAAAA,EAAAA,MAEXC,EAAc,WAChBlB,GAAWgB,GAAUG,EAAAA,EAAAA,IAAiBnB,IACtCA,GAAWe,EAAY,GAC3B,EAQMK,EAA+B,UAAlBV,EACnB,OAAON,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACHJ,EAAAA,EAAAA,KAAA,SAAO2B,SAAUD,EAAYE,MAAOtB,EAASuB,SAAU,SAACC,GAAC,OAAKT,EAAYS,EAAEC,OAAOH,MAAO,EACnF3B,MAAO,CAAC+B,MAAO,SACfC,WAAY,SAACH,GAAC,OAVC,SAACA,GACJ,KAAfA,EAAEI,UACFV,GAER,CAM8BW,CAAmBL,EAAG,IAC9C,KACF9B,EAAAA,EAAAA,KAAA,UAAQoC,QAASZ,EAAaG,SAAUD,EAAWtB,SAAC,UAAc,MAE1E,EAiBA,EAfuB,WACnBjB,QAAQC,IAAI,cAEZ,IAAMkC,GAAWC,EAAAA,EAAAA,MAOjB,OANAc,EAAAA,EAAAA,YAAW,WAEP,OADAf,GAAUgB,EAAAA,EAAAA,OACH,WACHhB,GAAUiB,EAAAA,EAAAA,MACd,CACJ,GAAG,KACI7B,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACHJ,EAAAA,EAAAA,KAACd,EAAQ,IAAE,KACXc,EAAAA,EAAAA,KAACe,EAAW,IAAE,MAEtB,EC/EA,EAL+B,WAC3B,OAAOf,EAAAA,EAAAA,KAAA,OAAAI,UACFoC,EAAAA,EAAAA,UAAQ,kBAAIxC,EAAAA,EAAAA,KAACyC,EAAI,GAAE,GAAC,KAE7B,C","sources":["components/Chat/Chat.tsx","components/Chat/ChatContainer.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {GlobalStateType} from \"../../redux/store-redux\";\r\nimport {ChannelStatusType, ChatMessagesType} from \"../api/chat-api\";\r\nimport {sendMessageThCr, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\n\r\nconst Messages: React.FC = () => { // отрисовка всех сообщений\r\n    console.log(\">>>>>>>>>>>>>>Messages\")\r\n    const messages: Array<ChatMessagesType> = useSelector( (state: GlobalStateType) => state.chat.messages ) // получить сообщения из стейта\r\n\r\n    function useChatScroll<T>(dep: T): React.MutableRefObject<HTMLDivElement | null> {\r\n        const ref = React.useRef<HTMLDivElement>( null );\r\n        React.useEffect( () => {\r\n            if (ref.current) {\r\n                ref.current.scrollTop = ref.current.scrollHeight;\r\n            }\r\n        }, [dep] );\r\n\r\n        return ref;\r\n    }\r\n\r\n    const ref = useChatScroll( messages )\r\n\r\n    return <div ref={ref}\r\n                style={{height: \"30rem\", overflowY: \"auto\"}}\r\n    >\r\n\r\n        {messages.map( (message: ChatMessagesType, index: number) => { // пробегаем по списку сообщений из стейта\r\n            return <Message key={index} message={message}/> // отрисовываем сообщения поэлементно\r\n        } )}\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessagesType }> = ({message}) => { // отрисовка одного сообщения (фото, тела и имени пользователя)\r\n    return <div>\r\n        <div>\r\n            <img src={message.photo} alt=\"avatar\" style={{height: \"30px\"}}/>\r\n            {message.userName}\r\n            <div>{message.message}</div>\r\n            <hr/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst AddMessages: React.FC = () => {\r\n    console.log(\">>>>>>>>>>>>>>AddMessages\")\r\n\r\n    const channelStatus: ChannelStatusType = useSelector( (state: GlobalStateType) => state.chat.channelStatus ) // получить статус открытия канала\r\n\r\n    const [message, setMessage] = useState<string>( \"\" ) // константа временного хранилища значения поля ввода\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessage = () => { // колбек отправеки сообщений\r\n        message && dispatch( sendMessageThCr( message ) ) // отправить сообщение\r\n        message && setMessage( \"\" ) // занулить поле ввода\r\n    }\r\n\r\n    const checkEnterPressed = (e: React.KeyboardEvent) => { // проверка нажатия Enter\r\n        if (e.charCode === 13) {\r\n            sendMessage()\r\n        }\r\n    }\r\n\r\n    const isDisabled = channelStatus !== \"ready\"\r\n    return <div>\r\n        <input disabled={isDisabled} value={message} onChange={(e) => setMessage( e.target.value )}\r\n               style={{width: \"50rem\"}}\r\n               onKeyPress={(e) => checkEnterPressed( e )} // проверка нажатия Enter\r\n        /> {/*поле ввода*/}\r\n        <button onClick={sendMessage} disabled={isDisabled}>Send </button> {/*отправка сообщений */}\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    console.log(\">>>>>>Chat\")\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        dispatch( startMessagesListening() )// открытие канала WS, создание подписок и слушателей событий\r\n        return () => {\r\n            dispatch( stopMessagesListening() ) // закрытие канала WS, удаление подписок и слушателей событий\r\n        }\r\n    }, [] )\r\n    return <div>\r\n        <Messages/> {/*отрисовка сообщений*/}\r\n        <AddMessages/> {/*ввод сообщений и кнопка отправки*/}\r\n    </div>\r\n}\r\nexport default Chat\r\n","import React, {useMemo} from \"react\";\r\nimport Chat from \"./Chat\";\r\n\r\nconst ChatContainer:React.FC = () => {\r\n    return <div>\r\n        {useMemo(()=><Chat/>,[])}\r\n    </div>\r\n}\r\nexport default ChatContainer\r\n"],"names":["Messages","console","log","messages","useSelector","state","chat","ref","dep","React","current","scrollTop","scrollHeight","useChatScroll","_jsx","style","height","overflowY","children","map","message","index","Message","_ref","_jsxs","src","photo","alt","userName","AddMessages","channelStatus","_useState","useState","_useState2","_slicedToArray","setMessage","dispatch","useDispatch","sendMessage","sendMessageThCr","isDisabled","disabled","value","onChange","e","target","width","onKeyPress","charCode","checkEnterPressed","onClick","useEffect","startMessagesListening","stopMessagesListening","useMemo","Chat"],"sourceRoot":""}