{"version":3,"file":"static/js/277.f0b61406.chunk.js","mappings":"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","sources":["components/FeedBack/FeedBackFormik/FeedBackFormik.tsx","components/Info/FeedBackInfoShort.tsx","components/FeedBack/FeedBackBS.tsx","components/FeedBack/FeedBackContainer.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport {apiFeedBackDataType} from \"../../../types/commonTypes\";\n\nlet myInitialValues = { // начальные зачения форм\n    name: \"\",\n    email: \"\",\n    message: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address'),\n    message: Yup.string()\n        .required('Required'),\n})\n\ntype FeedBackFormikType = {\n    sendFeedBack: (data:apiFeedBackDataType) => void,\n}\nconst FeedBackFormik:React.FC<FeedBackFormikType> = ({sendFeedBack}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:apiFeedBackDataType, {resetForm}:any) => { // действия по сабмиту\n        sendFeedBack(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (<div>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div>\n                            <div>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"Ваше имя\"\n                                    autoFocus={false}\n                                    name='name'\n                                    type='text'\n                                    placeholder='имя'\n                                    leftLabelLength='7rem'\n\n                                />\n\n                                <MyTextInput // email\n                                    label=\"Email\"\n                                    autoFocus={false}\n                                    name='email'\n                                    type='email'\n                                    placeholder='email'\n                                    leftLabelLength='7rem'\n                                />\n\n                                <MyTextInput // сообщение\n                                    label=\"Сообщение * \"\n                                    autoFocus={false}\n                                    name='message'\n                                    type='textarea'\n                                    placeholder='сообщение'\n                                    leftLabelLength='7rem'\n                                />\n\n                                <Row className=\"mx-1\">\n\n                                    <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                                        Submit\n                                    </Button>\n                                </Row>\n                            </div>\n                        </div>\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </div>\n\n    )\n}\n\nexport default FeedBackFormik\n\n","import React from \"react\";\r\n\r\ntype FeedBackInfoShortType = {}\r\nconst FeedBackInfoShort:React.FC<FeedBackInfoShortType> = () => {\r\n    return (<div>\r\n        <p>Проверить отправку почты можно на тестовом почтовом ящике {\" \"}\r\n            <a href=\"https://passport.yandex.ru/auth/\">яндекс почты</a>: <br/>\r\n            testfeedback2023 <br/>\r\n            testfeedback2023_password <br/>\r\n        </p>\r\n    </div>)\r\n}\r\n\r\nexport default FeedBackInfoShort\r\n","import React, {useState} from \"react\";\nimport FeedBackFormik from \"./FeedBackFormik/FeedBackFormik\";\nimport commonClasses from \"../common/CommonClasses/common.module.css\";\nimport Container from \"react-bootstrap/Container\";\nimport ModalBS1 from \"../common/ModalBS/ModalBS1\";\nimport FeedBackInfoShort from \"../Info/FeedBackInfoShort\";\nimport {apiFeedBackDataType} from \"../../types/commonTypes\";\n\ntype FeedBackType = {\n    feedBackStatus: string\n    sendFeedBack: (data:apiFeedBackDataType) => void,\n    setFeedBackStatus:(feedBackStatus:string)=>void\n\n}\nconst FeedBack:React.FC<FeedBackType> = ({sendFeedBack, feedBackStatus, setFeedBackStatus}) => {\n\n    const [show, setShow] = useState(true); // хук задания флага показать ли модальное окно\n\n    if (feedBackStatus) { // если статус feedback из BLL не пустой\n        const modalHeader: JSX.Element = <div>Спасибо!</div>\n        const modalBody: JSX.Element = <div>{feedBackStatus}</div>\n        const buttonOnClick = () => {\n            setFeedBackStatus(\"\")\n        }\n\n        return <div>\n            <ModalBS1\n                show={show} // флаг показать ли модальное окно\n                setShow={setShow} // колбек смены флага показать модальное окно\n\n                modalHeader={modalHeader} // заголовок модального окна\n                modalBody={modalBody} // тело модального окна\n                buttonOnClick={buttonOnClick} // действие по кнопке модального окна\n                buttonName={\"Закрыть\"} // текст кнопки\n            />\n        </div>\n    }\n\n    return <div>\n        <h2 className={commonClasses.pageHeader}>FeedBack</h2>\n        <Container fluid>\n            <FeedBackFormik sendFeedBack={sendFeedBack}/>\n            <div className='my-3'><FeedBackInfoShort/></div>\n\n        </Container>\n    </div>\n\n};\n\nexport default FeedBack;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {postFeedBackThunkCreator2,FeedBackActions} from \"../../redux/feedback-reducer\";\nimport FeedBack from \"./FeedBackBS\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {apiFeedBackDataType} from \"../../types/commonTypes\";\n\nconst {setFeedBackStatus} = FeedBackActions\n\ntype FeedBackContainerPropsType = {\n    feedBackStatus: string\n    postFeedBackThunkCreator2: (data:apiFeedBackDataType) =>void\n    setFeedBackStatus:(feedBackStatus:string)=>void\n}\nclass FeedBackContainer extends React.Component<FeedBackContainerPropsType> {\n\n    sendFeedBack = (data:apiFeedBackDataType) => {\n        this.props.postFeedBackThunkCreator2(data)// отправка фидбека из api\n    }\n\n    render () {\n        return <div>\n            <FeedBack\n                sendFeedBack={this.sendFeedBack} // колбек отправки сообщения из контейнера\n                feedBackStatus={this.props.feedBackStatus} // фидбэк статус из BLL\n                setFeedBackStatus={this.props.setFeedBackStatus} // задать статус (обнулить для отправки нового сообщения)\n            />\n        </div>\n    }\n}\n\ntype mapStateToPropsType = {\n    feedBackStatus: string\n}\nconst mapStateToProps = (state:GlobalStateType) => {\n    return {\n        feedBackStatus: state.feedback.feedBackStatus // статус отправки сообщения на сервер\n    }\n}\ntype mapDispatchToPropsType = {\n    postFeedBackThunkCreator2: (data:apiFeedBackDataType) =>void\n    setFeedBackStatus:(feedBackStatus:string)=>void\n}\n\n\nexport default connect<\n    mapStateToPropsType,\n    mapDispatchToPropsType,\n    unknown,\n    GlobalStateType\n    >(mapStateToProps,\n    {postFeedBackThunkCreator2, setFeedBackStatus})(FeedBackContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["myInitialValues","name","email","message","myValidationSchema","Yup","required","_ref","sendFeedBack","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","_jsxs","MyTextInput","label","autoFocus","type","placeholder","leftLabelLength","Row","className","Button","href","feedBackStatus","setFeedBackStatus","_useState","useState","_useState2","_slicedToArray","show","setShow","modalHeader","modalBody","ModalBS1","buttonOnClick","buttonName","commonClasses","Container","fluid","FeedBackFormik","FeedBackInfoShort","FeedBackActions","FeedBackContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","data","props","postFeedBackThunkCreator2","_createClass","key","value","FeedBack","this","React","connect","state","feedback","CommonInputTextArea","_objectWithoutProperties","_excluded","_useField","useField","meta","_Fragment","touched","error","classes","_excluded2","_useField3","_useField4","field","InputGroup","size","id","style","width","_objectSpread","as","undefined","MyCheckbox","_excluded3","_useField5","_useField6","ref","bsPrefix","_ref$as","Component","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","forEach","brkPoint","cols","propValue","infix","push","classNames","displayName"],"sourceRoot":""}