{"version":3,"file":"static/js/799.1d887ec2.chunk.js","mappings":"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","sources":["assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/DialogList/Messages/UserListMessages.module.css?5e9f","webpack://my-app/./src/components/DialogList/Messages/Message/Message.module.css?536c","../node_modules/@restart/hooks/esm/useTimeout.js","../node_modules/react-bootstrap/esm/ToastFade.js","../node_modules/react-bootstrap/esm/ToastContext.js","../node_modules/react-bootstrap/esm/ToastHeader.js","../node_modules/react-bootstrap/esm/ToastBody.js","../node_modules/react-bootstrap/esm/Toast.js","components/DialogList/Messages/Message/MessageBS.tsx","components/DialogList/Messages/Message/MessagesElements.tsx","webpack://my-app/./src/components/DialogList/Messages/MessagesFormik/MessagesFormik.module.css?6c6f","components/DialogList/Messages/MessagesFormik/MessagesFormik.tsx","components/DialogList/Messages/MessagesRender.tsx","components/common/ScrollBottom.tsx","components/DialogList/Messages/MessagesContainer.tsx","components/DialogList/DialogList.tsx","components/DialogList/DialogListContainer.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx"],"sourcesContent":["var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.12d8e771d6d27bcd4485de69966afd04.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"usersListMessagesFixed\":\"UserListMessages_usersListMessagesFixed__n95Kp\",\"setDesktop\":\"UserListMessages_setDesktop__mYjrO\",\"setMobile\":\"UserListMessages_setMobile__RZGLB\",\"usersListCommonFixed\":\"UserListMessages_usersListCommonFixed__lwndY\",\"MessagesCommonFixed\":\"UserListMessages_MessagesCommonFixed__T4G57\",\"userPhoto\":\"UserListMessages_userPhoto__iRPSv\",\"messagesHeaderFixed\":\"UserListMessages_messagesHeaderFixed__v6Hxk\",\"messagesMiddleFixed\":\"UserListMessages_messagesMiddleFixed__MWdHU\",\"messagesFooterFixed\":\"UserListMessages_messagesFooterFixed__kCMoI\",\"myLink\":\"UserListMessages_myLink__-Xnne\"};","// extracted by mini-css-extract-plugin\nexport default {\"messagesCommon\":\"Message_messagesCommon__WS2pF\",\"messageMyId\":\"Message_messageMyId__+mbtn\",\"messageNotMyId\":\"Message_messageNotMyId__5+CvR\",\"insideToastMy\":\"Message_insideToastMy__P6sDI\",\"insideToastNotMy\":\"Message_insideToastNotMy__meNqg\",\"time\":\"Message_time__4GQ5r\",\"closeButton\":\"Message_closeButton__OGOB3\",\"placeholder\":\"Message_placeholder__SqINF\"};","import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\n\n\nexport default function useTimeout() {\n  var isMounted = useMounted(); // types are confused between node and web here IDK\n\n  var handleRef = useRef();\n  useWillUnmount(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return useMemo(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}","import * as React from 'react';\nimport { ENTERING, EXITING } from 'react-transition-group/Transition';\nimport Fade from './Fade';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst fadeStyles = {\n  [ENTERING]: 'showing',\n  [EXITING]: 'showing show'\n};\nconst ToastFade = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(Fade, {\n  ...props,\n  ref: ref,\n  transitionClasses: fadeStyles\n}));\nToastFade.displayName = 'ToastFade';\nexport default ToastFade;","import * as React from 'react';\nconst ToastContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onClose() {}\n});\nexport default ToastContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CloseButton from './CloseButton';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: true\n};\nconst ToastHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  closeLabel,\n  closeVariant,\n  closeButton,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-header');\n  const context = useContext(ToastContext);\n  const handleClick = useEventCallback(e => {\n    context == null ? void 0 : context.onClose == null ? void 0 : context.onClose(e);\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    className: classNames(bsPrefix, className),\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick,\n      \"data-dismiss\": \"toast\"\n    })]\n  });\n});\nToastHeader.displayName = 'ToastHeader';\nToastHeader.defaultProps = defaultProps;\nexport default ToastHeader;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('toast-body');","import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","import React from 'react';\nimport classes from './Message.module.css';\nimport Toast from 'react-bootstrap/Toast'\nimport CloseButton from \"react-bootstrap/CloseButton\";\nimport {DateType} from \"../../../../types/commonTypes\";\n\ntype MessageBSType = {\n    message: string\n    myId: number, // мой ID (авторизованного пользователя)\n    userId: number\n    Date: DateType,\n    MessageId: number,\n    deleteMessage: (messageID: number) => void,\n\n}\nconst MessageBS:React.FC<MessageBSType> = ({message, myId, userId, Date, MessageId, deleteMessage}) => {\n\n    return <div>\n        <div\n            className={`${classes.messagesCommon} ${myId === userId ? classes.messageMyId : classes.messageNotMyId}`}>\n            {/*в зависимости от того кто пишет, доп стили к тексту*/}\n\n            <Toast className={myId === userId ?classes.insideToastMy:classes.insideToastNotMy}>\n                <Toast.Body>\n                    <div className='d-flex d-inline-block'> {/*элементы внутри сообщений в ряд*/}\n                        <big>{message} {/*сообщение */}</big>\n                        <div className={classes.time}>\n                            {(\"0\" + Date.Hour).substr(-2)}{\":\"}{(\"0\" + Date.Minutes).substr(-2)}\n                            {/*по 2 символа на часы и минуты*/}\n                        </div>\n                       <div className={classes.placeholder}></div> {/* смещаем текст сообщений от часов*/}\n                            <CloseButton className={classes.closeButton}\n                                onClick={()=>{deleteMessage(MessageId)}}\n                            />\n                    </div>\n                </Toast.Body>\n            </Toast>\n        </div>\n    </div>\n}\n\nexport default MessageBS;\n\n","import Message from \"./MessageBS\";\r\nimport React from \"react\";\r\nimport {messages2Type, NulableType} from \"../../../../types/commonTypes\";\r\n\r\ntype MessagesElementsType = {\r\n    messages2: NulableType<Array<messages2Type>>, // массив сообщений текущего диалога\r\n    myId: number, // мой ID (авторизованного пользователя)\r\n    deleteMessage: (messageID: number) => void,\r\n\r\n}\r\nconst MessagesElements: React.FC<MessagesElementsType> = ({messages2, myId, deleteMessage}) => {\r\n\r\n    return <div>\r\n        {messages2 !== null && // если массив сообщений не пустой\r\n        messages2.map( (m) => // подкомпонента отрисовки всех сообщений через map\r\n            <Message key={m.id + m.message} message={m.message} myId={myId} userId={m.userId} Date={m.Date}\r\n                     MessageId={m.id} deleteMessage={deleteMessage}/> )}\r\n\r\n    </div>\r\n}\r\nexport default MessagesElements\r\n","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"MessagesFormik_legendStyle__qKeC7\",\"fieldSetStyle\":\"MessagesFormik_fieldSetStyle__8Vg2R\",\"sendSwg\":\"MessagesFormik_sendSwg__bjMJ-\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\nimport sendSwg from \"../../../../assets/images/swg/send-svg2.svg\"\nimport classes from \"./MessagesFormik.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype DialogFormikType = {\n    sendMessage: (NewMessage: string) =>void,\n    scrollBottom:() =>void\n\n}\ntype valuesType = {\n    newMessage:string\n}\nconst MessagesFormik:React.FC<DialogFormikType> = ({sendMessage, scrollBottom}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:valuesType, {resetForm}:any) => { // действия по сабмиту\n        sendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n                {({\n                      handleReset,// обнуление полей\n                    values,\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\n                            <div  className='col-9'>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"\"\n                                    autoFocus={true}\n                                    name='newMessage'\n                                    type='text'\n                                    placeholder='Введите ваше сообщение'\n                                    leftLabelLength={\"\"}\n                                   // autoFocus={true}\n                                />\n                            </div>\n                            <div>\n                                <Button variant={\"light\"} className={\"mx-2\"}\n                                        type=\"submit\" //кнопка отправить форму\n                                        onClick={scrollBottom} /*прокрутка вниз при добавлении нового сообщения*/\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\n                                >\n\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\n                                           title={'Отправить сообщение'}/>\n                                </Button>\n                            </div>\n                        </div>\n                        {/*   <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default MessagesFormik\n\n","import classes from \"./UserListMessages.module.css\";\r\nimport userPhoto from \"../../../assets/images/no-image3.png\";\r\nimport MessagesElements from \"./Message/MessagesElements\";\r\nimport MessagesFormik from \"./MessagesFormik/MessagesFormik\";\r\nimport React from \"react\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {messages2Type, NulableType} from \"../../../types/commonTypes\";\r\nimport {getProfileType} from \"../../api/apiTypes\";\r\nimport UsersContainer from \"../../users/UsersContainerFC\";\r\n\r\ntype MessagesRenderType = {\r\n    messages2: NulableType<Array<messages2Type>>, // массив сообщений текущего диалога\r\n    myId: number, // мой ID (авторизованного пользователя)\r\n    profile: NulableType<getProfileType>, // профиль просматриваемого пользователя по умолчанию\r\n    patch: string,\r\n    PageWidth: number,\r\n    deleteMessage: (messageID: number) => void,\r\n    sendMessage: (NewMessage: string) => void,\r\n    scrollBottom: () => void\r\n}\r\nconst MessagesRender: React.FC<MessagesRenderType> = (\r\n    {messages2, myId, deleteMessage, sendMessage, scrollBottom, profile, patch, PageWidth}) => {\r\n\r\n    const messagesProfileRender = <div>\r\n        {/*спозиционированная сверху иконка человека, с кем общаюсь*/}\r\n        {profile &&  // если профиль пользователя уже загружен\r\n        <NavLink to={`/profile/${profile.userId}`} className={classes.myLink}>\r\n            {/*при клике переход на профиль собеседника, ссылка без подчеркивания*/}\r\n            <Image // картинка аватар собеседника\r\n                src={profile.photos.small ? profile.photos.small : userPhoto}\r\n                className={classes.userPhoto}\r\n                title={\"Перейти в профиль\"}\r\n                alt={\"Перейти в профиль\"}\r\n            />\r\n            <span>{profile.fullName}</span>\r\n        </NavLink>\r\n        }\r\n    </div>\r\n    const isMobile: boolean = patch===\"dialogs\" && PageWidth <620 // страница dialogs и разрешение низкое\r\n    return <div className={`${classes.usersListMessagesFixed} ${isMobile?classes.setMobile:classes.setDesktop}`}>\r\n\r\n        { !isMobile &&\r\n            <div className={classes.usersListCommonFixed}><UsersContainer/></div>} {/*отрисовка колонки с пользователя слева от поля сообщений*/}\r\n\r\n        <div className={classes.MessagesCommonFixed}>\r\n            <div className={classes.messagesHeaderFixed}>{messagesProfileRender}</div>\r\n            {/*спозиционированная полоска сверку сообщений с иконкой собеседникой и ссылкой на его профиль*/}\r\n\r\n            <div className={classes.messagesMiddleFixed}>\r\n                <MessagesElements // отрисовка сообщений\r\n                    messages2={messages2} // сообщения\r\n                    myId={myId} // мой ID\r\n                    deleteMessage={deleteMessage} // функйцию удаления сообщений\r\n                />\r\n\r\n                <div\r\n                    className={classes.messagesFooterFixed}>{/*спозиционированный снизу инпут и кнопка ввода сообщений*/}\r\n                    <MessagesFormik\r\n                        sendMessage={sendMessage}\r\n                        scrollBottom={scrollBottom}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n}\r\nexport default MessagesRender\r\n","type ScrollBottomType = ()=>void\nconst ScrollBottom: ScrollBottomType  = () => {\n    const scrollHeight = Math.max(\n        document.body.scrollHeight, document.documentElement.scrollHeight,\n        document.body.offsetHeight, document.documentElement.offsetHeight,\n        document.body.clientHeight, document.documentElement.clientHeight\n    );\n    window.scrollTo(0, scrollHeight)\n}\nexport default ScrollBottom\n","import React from 'react';\nimport {\n    deleteMessageThunkCreator,\n    sendDialogsThunkCreator,\n    updateDialogListThunkCreator\n} from \"../../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport withRouter2 from \"../../hoc/withRouter2\";\nimport MessagesRender from \"./MessagesRender\";\nimport ScrollBottom from \"../../common/ScrollBottom\";\nimport {messages2Type, NulableType} from \"../../../types/commonTypes\";\nimport {getProfileType} from \"../../api/apiTypes\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\n\ntype MessagesContainerPropsType = {\n    myId: number, // мой ID (авторизованного пользователя)\n    myLogin: string\n    myProfile: NulableType<getProfileType>\n    dialogUserID: number, // ID пользователя, с кем сейчас идет диалог\n    messages2: NulableType<Array<messages2Type>>, // массив сообщений текущего диалога\n    profile: NulableType<getProfileType> , // профиль просматриваемого пользователя по умолчанию\n    userId:number,\n    patch: string,\n    PageWidth: number\n    sendDialogsThunkCreator: (formDataNewMessage:string, myId:number, MyName:string, MyPhoto:string, userId:number)=>void,\n    deleteMessageThunkCreator: (messageID:number, myId:number, userId:number) => void,\n    updateDialogListThunkCreator:(userId1:number, userId2:number, Name2:string, Photo2:string)=>void\n}\nclass MessagesContainer extends React.Component<MessagesContainerPropsType> {\n\n    sendMessage = (NewMessage: string) => { // отправка сообщения\n        if (!this.props.userId) { // при клике просто по вкладке DialogList\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\n            return\n        }\n        if (!NewMessage) { // при клике просто по вкладке DialogList\n            return // не реагировать на пустые сообщения\n        }\n\n        const userName:string = this.props.profile ? this.props.profile.fullName: \"\"; // получить имя пользователя\n        const userPhoto:string = this.props.profile ? this.props.profile.photos.small: \"\"; // и его фото из стейта\n        const myPhoto: string = this.props.myProfile? this.props.myProfile.photos.small:\"\" // мое фото\n\n        this.props.sendDialogsThunkCreator( // отправить сообщение\n            NewMessage,\n            this.props.myId, // мой ID для формирования DialogList собеседника\n            this.props.myLogin, // мой логин  для формирования DialogList собеседника\n            myPhoto, // мое фото  для формирования DialogList собеседника\n            this.props.userId, // ID собеседника для формирования моего DialogList\n        ); // отправить сообщение\n\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\n            this.props.myId, // мой ID\n            this.props.userId, // ID с кем веду диалог\n            userName, // его имя\n            userPhoto // и фото\n        )\n    }\n\n    deleteMessage = (messageID:number) => { // удалить сообщение по его ID в списке\n        this.props.deleteMessageThunkCreator(messageID, this.props.myId, this.props.userId);\n    }\n\n    scrollBottom = () => {\n        ScrollBottom()\n    }\n\n    render() {\n        return <div>\n            <MessagesRender\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\n                myId={this.props.myId} // мой ID\n                deleteMessage = {this.deleteMessage} // удалить сообщение\n                sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\n                scrollBottom={this.scrollBottom}\n                profile={this.props.profile}\n                patch = {this.props.patch}\n                PageWidth = {this.props.PageWidth}\n        />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state:GlobalStateType) => {\n    return {\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\n        myLogin: state.auth.myLogin,\n        myProfile: state.auth.myProfile,\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n        profile: state.profilePage.profile, // профиль пользователя для создания dialogList\n        profilePage: state.profilePage, // страница профиля пользователя для создания dialogList\n        patch: state.app.patch,\n        PageWidth: state.app.PageWidth\n    }\n}\ntype mapStateToPropsType = {\n    myId: number, // мой ID (авторизованного пользователя)\n    myLogin: string\n    dialogUserID: number, // ID пользователя, с кем сейчас идет диалог\n    messages2: NulableType<Array<messages2Type>>, // массив сообщений текущего диалога\n    profile: NulableType<getProfileType>, // профиль просматриваемого пользователя по умолчанию\n    myProfile: NulableType<getProfileType>,\n    patch: string,\n    PageWidth: number\n}\ntype mapDispatchToPropsType = {\n    sendDialogsThunkCreator: (formDataNewMessage:string, myId:number, MyName:string, MyPhoto:string, userId:number)=>void,\n    deleteMessageThunkCreator: (messageID:number, myId:number, userId:number) => void\n    updateDialogListThunkCreator:(userId1:number, userId2:number, Name2:string, Photo2:string)=>void\n}\nexport default compose<React.ComponentType>(\n    connect<\n        mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType\n        >(mapStateToProps,\n        {\n            sendDialogsThunkCreator,//санкреатор отправки нового сообщения в диалог\n            deleteMessageThunkCreator,//санкреатор удаления сообщения из далога\n            updateDialogListThunkCreator,//санкреатор обновления диалогЛиста (моего когда я пишу кому то сообщение) - запись в localStorage.\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n)\n(MessagesContainer);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, {useEffect} from 'react'; // импорт реакта\nimport MessagesContainer from \"./Messages/MessagesContainer\";\n\ntype DialogListType = {\n    getDialogList: () => void,\n    getDialogLastUpdateTime: () => void\n}\nconst DialogList: React.FC<DialogListType> = ({getDialogList, getDialogLastUpdateTime}) => { // основная компонента отрисовки диалогов\n\n    useEffect( () => { // при очередном ререндере\n        const id = setInterval( () => { // задать цикл с интервалом в 1 сек\n            getDialogLastUpdateTime() // получить время обновления текущего диалога\n            getDialogList()// получить диалогЛист (мне кто то написал, или я начал диалог)\n        }, 1000 )\n        return (() => {\n            clearInterval( id )\n        }) // для сброса цикла при очередном рендере\n    }, [getDialogLastUpdateTime, getDialogList] ) // useEffect без зависимостей\n\n    return <MessagesContainer/>\n    //отрисовка сообщений\n\n}\nexport default DialogList;\n\n","import React from 'react';\nimport DialogList from \"./DialogList\";\nimport {\n    deleteDialogThunkCreator,\n    getDialogLastUpdateTimeTnkCrt,\n    getDialogsThunkCreator, getMyDialogListThunkCreator,//getFollowThunkCreator,\n    DialogsActions,\n} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getProfileThunkCreator} from \"../../redux/profile-reducer\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport withRouter2 from \"../hoc/withRouter2\";\nimport {messages2Type, NulableType} from \"../../types/commonTypes\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\n\nconst {setdialogUserID, setMessages} = DialogsActions\n\ntype DialogListContainerPropsType = {\n    myId: number, // мой ID (авторизованного пользователя)\n    dialogUserID: number, // ID пользователя, с кем сейчас идет диалог\n    messages2: NulableType<Array<messages2Type>>, // массив сообщений текущего диалога\n    dialogLastUpdateTime: string,// время последнего времени обновления текущего диалога\n    userId: number,\n    getDialogsThunkCreator: (myId: number, userId: number) => void,\n    setMessages: (updatedMessages: Array<messages2Type>) => void,\n    setdialogUserID: (dialogUserID: number) => void,\n    getProfileThunkCreator: (userId: number, shouldUpdateDialogList: boolean, myId: number) => void,\n    getDialogLastUpdateTimeTnkCrt: (myId: number, userId: number) => void,\n    getMyDialogListThunkCreator: (myId: number) => void,\n    deleteDialogThunkCreator: (dialogId: number, userId1: number, userId2: number) => void\n}\n\nclass DialogListContainer extends React.Component<DialogListContainerPropsType> {\n    commonPartMountUpdate = () => {// общая часть для componentDidMount и componentDidUpdate\n        if (!this.props.userId) { // если перешли на вкладку DialogList с нулевым userId\n            if (this.props.messages2 && this.props.messages2.length > 0) { // если массив сообщений непустой\n                this.props.setMessages( [] ); // занулить массив сообщений (очистить список сообщений)\n                this.props.setdialogUserID( 0 ) // занулить userId (убрать выделение диалога)\n            }\n            return\n        }\n        if (this.props.dialogUserID !== this.props.userId) { // если считаный из URL userId не равен тому, что в BLL\n            this.props.setdialogUserID( this.props.userId ) // задать в BLL считаный из URL ID\n            //здесь запросить профиль выбранного userId через getProfileThunkCreator\n            this.props.getProfileThunkCreator( this.props.userId, true, this.props.myId )// при переходе в диалог любого пользователя считать его данные профиля с сервера\n        }\n\n    }\n\n    componentDidMount() {\n        this.getDialogList()\n        this.commonPartMountUpdate();// общая часть для componentDidMount и componentDidUpdate\n    }\n\n    componentDidUpdate(prevProps: DialogListContainerPropsType) {\n        //       console.log(\"DialogListContainer -> componentDidUpdate\")\n        this.commonPartMountUpdate(); // общая часть для componentDidMount и componentDidUpdate\n        if (this.props.dialogLastUpdateTime !== prevProps.dialogLastUpdateTime) { // если время обновления диалога изменилось\n            this.getDialogs()// запросить новые сообщения по диалогу\n        }\n    }\n\n    getDialogs = () => {\n        if (this.props.userId === 0) {\n            return\n        }// при клике просто по вкладке DialogList\n        this.props.getDialogsThunkCreator( this.props.myId, this.props.userId );// получить диалоги\n    }\n\n    getDialogLastUpdateTime = () => {\n        if (this.props.userId === 0) {\n            return\n        }// при клике просто по вкладке DialogList\n        this.props.getDialogLastUpdateTimeTnkCrt( this.props.myId, this.props.userId ); // получить время последенего обновления диалога\n    }\n\n    getDialogList = () => {\n        this.props.getMyDialogListThunkCreator( this.props.myId )\n    }\n\n    deleteDialog = (dialogId: number, userId2: number) => {\n        this.props.deleteDialogThunkCreator( dialogId, this.props.myId, userId2 )\n    }\n\n    render() {\n        return <div>\n            <DialogList\n                getDialogLastUpdateTime={this.getDialogLastUpdateTime} // проброс метода - получить время обновления текущего диалога\n                getDialogList={this.getDialogList} // периодическая проверка написал ли кто мне, или я с кем диалог начал\n            />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state: GlobalStateType) => {\n    return {\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n        dialogLastUpdateTime: state.dialogsPage.dialogLastUpdateTime,// время последнего времени обновления текущего диалога\n    }\n}\n\ntype mapStateToPropsType = {\n    myId: number, // мой ID (авторизованного пользователя)\n    dialogUserID: number, // ID пользователя, с кем сейчас идет диалог\n    messages2: NulableType<Array<messages2Type>>, // массив сообщений текущего диалога\n    dialogLastUpdateTime: string,// время последнего времени обновления текущего диалога\n}\n\ntype mapDispatchToPropsType = {\n    getDialogsThunkCreator: (myId: number, userId: number) => void\n    setMessages: (updatedMessages: Array<messages2Type>) => void,\n    setdialogUserID: (dialogUserID: number) => void,\n    getProfileThunkCreator: (userId: number, shouldUpdateDialogList: boolean, myId: number) => void,\n    getDialogLastUpdateTimeTnkCrt: (myId: number, userId: number) => void,\n    getMyDialogListThunkCreator: (myId: number) => void,\n    deleteDialogThunkCreator: (dialogId: number, userId1: number, userId2: number) => void\n}\nexport default compose<React.ComponentType>(\n    connect<\n        mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType\n        >( mapStateToProps,\n        {\n            getDialogsThunkCreator,//санкреатор получения диалогов с данными\n            setdialogUserID, // экшнкреатор задания списка сообщений в стейт messages2\n            setMessages,// экшнкреатор задания списка сообщений в стейт messages2\n            getDialogLastUpdateTimeTnkCrt,//санкреатор получения диалогов с данными\n            getProfileThunkCreator,// санкреатор на получение профиля выбранного пользователя\n            getMyDialogListThunkCreator,//санкреатор получения моего диалогЛиста\n            deleteDialogThunkCreator, //санкреатор удаления диалога из диалогЛиста\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2 // проверка, залогинен ли я\n)\n( DialogListContainer );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nlet NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n"],"names":["MAX_DELAY_MS","Math","pow","setChainedTimeout","handleRef","fn","timeoutAtMs","delayMs","Date","now","current","setTimeout","useTimeout","isMounted","useMounted","useRef","useWillUnmount","clearTimeout","useMemo","clear","set","fadeStyles","_fadeStyles","_defineProperty","ENTERING","EXITING","ToastFade","React","props","ref","_jsx","Fade","_objectSpread","transitionClasses","displayName","onClose","ToastHeader","_ref","bsPrefix","closeLabel","closeVariant","closeButton","className","children","_objectWithoutProperties","_excluded","useBootstrapPrefix","context","useContext","ToastContext","handleClick","useEventCallback","e","_jsxs","classNames","CloseButton","variant","onClick","defaultProps","createWithBsPrefix","Toast","_ref$transition","transition","Transition","_ref$show","show","_ref$animation","animation","_ref$delay","delay","_ref$autohide","autohide","bg","delayRef","onCloseRef","useEffect","autohideTimeout","autohideToast","autohideFunc","useCallback","toastContext","hasAnimation","toast","concat","role","value","in","unmountOnExit","Object","assign","Body","ToastBody","Header","message","myId","userId","MessageId","deleteMessage","classes","Hour","substr","Minutes","messages2","map","m","Message","id","myInitialValues","newMessage","myValidationSchema","Yup","sendMessage","scrollBottom","_Fragment","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","Button","disabled","Image","src","sendSwg","alt","title","profile","patch","PageWidth","messagesProfileRender","NavLink","to","photos","small","userPhoto","fullName","isMobile","UsersContainer","MessagesElements","MessagesFormik","scrollHeight","max","document","body","documentElement","offsetHeight","clientHeight","window","scrollTo","MessagesContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","NewMessage","userName","myPhoto","myProfile","sendDialogsThunkCreator","myLogin","updateDialogListThunkCreator","alert","messageID","deleteMessageThunkCreator","ScrollBottom","_createClass","key","MessagesRender","this","compose","connect","state","auth","dialogUserID","dialogsPage","profilePage","app","withRouter2","getDialogList","getDialogLastUpdateTime","setInterval","clearInterval","setdialogUserID","DialogsActions","setMessages","DialogListContainer","commonPartMountUpdate","getProfileThunkCreator","getDialogs","getDialogsThunkCreator","getDialogLastUpdateTimeTnkCrt","getMyDialogListThunkCreator","deleteDialog","dialogId","userId2","deleteDialogThunkCreator","prevProps","dialogLastUpdateTime","DialogList","NavigateToLoginHoc2","CommonInputTextArea","_useField","useField","meta","_slicedToArray","touched","error","_excluded2","_useField3","_useField4","field","InputGroup","size","style","width","as","undefined","MyCheckbox","_excluded3","_useField5","_useField6","mapStateToProps","isAuth","Component","Navigate","Children","aaa","params","useParams","Number"],"sourceRoot":""}