{"version":3,"file":"static/js/842.e2d54085.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","components/Login/LoginContainer.jsx","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginCommon\":\"Login_loginCommon__6FyBi\",\"loginForm\":\"Login_loginForm__36Xmy\"};","import React from \"react\"; // импорт реакта\r\nimport {Field, reduxForm, reset} from \"redux-form\";// reduxForm для ввода новых постов\r\nimport classes from './Login.module.css'\r\nimport styles from './../common/Validation/customFields.module.css'\r\nimport {Input} from \"../common/Validation/customFields\";\r\nimport {email, Required} from \"../common/Validation/validationField\";\r\nimport {PointerCursor} from \"../Dark_light_theme/globalStyles\";\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaURL, updateCaptcha}) => { // компонента формы\r\n    return (\r\n        <form onSubmit={handleSubmit}/*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\r\n            <div>\r\n                <div>\r\n                    <Field\r\n                        name=\"email\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}// компонент - ввод\r\n                        placeholder=\"email\" // текст подсказка при пустом поле\r\n                        validate={[Required, email]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        name=\"password\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}// компонент - ввод\r\n                        placeholder=\"password\"// текст подсказка при пустом поле\r\n                        validate={[Required]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        name=\"rememberme\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component=\"input\"// компонент - ввод\r\n                        type=\"checkbox\"// тип - чекбокс\r\n                    />\r\n                    <label> запомнить меня</label>\r\n                </div>\r\n                {captchaURL\r\n                    ? <div>\r\n                        <PointerCursor>\r\n                            <img src={captchaURL} onClick={updateCaptcha}></img>\r\n                        </PointerCursor>\r\n                        <Field\r\n                            name=\"captcha\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                            component={Input}// компонент - ввод\r\n                            placeholder=\"captcha\" // текст подсказка при пустом поле\r\n                            validate={[Required]}\r\n                        />\r\n                    </div>\r\n                    : null\r\n                }\r\n                <div>\r\n                    <button type=\"submit\">Submit</button>\r\n                    {/*кнопка*/}\r\n                </div>\r\n                <div className={styles.commonError}>\r\n                    {/*стилизация красным сообщение об общей ошибке с сервера при неверном логине или пароле*/}\r\n                    {error} {/*вывод сообщения ошибки после диспатча stopSubmit из auth-reducer.jsx */}\r\n                </div>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// оберточная компонента формы, задает имя подстейта \"LoginForm\"\r\nlet LoginReduxForm = reduxForm({form: 'loginForm'})(LoginForm)\r\n\r\nlet Login = ({postLogin, captchaURL, updateCaptcha, dispatch}) => {\r\n\r\n    let resetFormFields = () => { // альтернативный вариант сброса формы, можно подключить к сабмиту\r\n        dispatch(reset('loginForm')) // сброс полей формы после ввода\r\n\r\n    }\r\n    let onSubmit = (formData) => { // функция реакции на сабмит формы с данными от формы formData\r\n        const rememberme = !formData.rememberme ? false : formData.rememberme // если галочка rememberme не стоит, то false\r\n        postLogin(formData.email, formData.password, rememberme, formData.captcha)//вызов postLoginThunkCreator выше из LoginContainer\r\n        resetFormFields() // сбросить поля формы после отправки данных полей\r\n    }\r\n    return (\r\n        <div className={classes.loginCommon}/*стиль*/ >\r\n            <h3>Войдите в аккаунт</h3>{/*h3 заголовок*/}\r\n            <div className={classes.loginForm}>\r\n                <div><LoginReduxForm\r\n                    onSubmit={onSubmit}\r\n                    captchaURL={captchaURL} // отображение каптчи, если она не пустая\r\n                    updateCaptcha={updateCaptcha}\r\n                />{/*вызов формы логина с отсылкой на локальный обработчик сабмита*/}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    postLogin = (email, password, rememberme, captcha) => { // email, password, rememberme берем из формы login\r\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\r\n        this.props.postLoginThunkCreator(email, password, rememberme, captcha);\r\n    }\r\n\r\n    updateCaptcha = () => {\r\n        this.props.getCaptchaThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) { // условие что я авторизован\r\n            this.props.getFriendsThunkCreator( // получить список друзей\r\n                this.props.friendsCurrentPage,\r\n                this.props.friendsPageSize,\r\n                this.props.friendsTerm,\r\n                this.props.friend);\r\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Login postLogin={this.postLogin}\r\n                       captchaURL={this.props.captchaURL}\r\n                       updateCaptcha={this.updateCaptcha}\r\n                       dispatch = {this.props.dispatch}\r\n                /> {/*Возврат целевой компоненты*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\r\n        friendsPageSize: state.sideBar.friendsPageSize,\r\n        friendsTerm: state.sideBar.friendsTerm,\r\n        friend: state.sideBar.friend,\r\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        postLoginThunkCreator: (email, password, rememberme, captchaURL) => { // отправить сообщение\r\n            dispatch(postLoginThunkCreator(email, password, rememberme, captchaURL))\r\n        },\r\n        getFriendsThunkCreator: (currentPage, pageSize, term, friend) => { // отправить сообщение\r\n            dispatch(getFriendsThunkCreator(currentPage, pageSize, term, friend))\r\n        },\r\n        getCaptchaThunkCreator: () => { // отправить сообщение\r\n            dispatch(getCaptchaThunkCreator())\r\n        },\r\n        dispatch: dispatch\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\r\n","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CreateField = (name, component, placeholder, validate ) => {\r\n    return (<div>\r\n        <Field\r\n            name={name}// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n            component={component}// компонент - кастомная строка с валидацией\r\n            placeholder={placeholder}// текст подсказка при пустом поле\r\n            validate={validate}\r\n        />\r\n    </div>)\r\n\r\n}\r\n/*\r\n                        name=\"FullName\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}// компонент - кастомная строка с валидацией\r\n                        placeholder=\"Полное имя\"// текст подсказка при пустом поле\r\n                        validate={[]}\r\n\r\n\r\n*/\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaURL","updateCaptcha","onSubmit","Field","name","component","Input","placeholder","validate","Required","email","type","src","onClick","className","styles","postLogin","dispatch","classes","formData","rememberme","password","captcha","reset","LoginContainer","props","postLoginThunkCreator","getCaptchaThunkCreator","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","to","React","connect","state","auth","sideBar","currentPage","pageSize","term","Textarea","input","meta","restProps","isError","touched","CreateField","value","maxLengthCreator","maxLength","length","test","undefined"],"sourceRoot":""}