{"version":3,"file":"static/js/616.81ea489b.chunk.js","mappings":"iNACA,EAA0B,yBAA1B,EAAgE,4BAAhE,EAA+G,kCAA/G,EAAkK,gCAAlK,EAA2M,wBAA3M,EAAqP,iCAArP,EAA+R,wBAA/R,EAAuU,+BAAvU,EAAkX,2BAAlX,EAAyZ,2BAAzZ,EAAkc,6BAAlc,EAAkf,kCAAlf,EAAsiB,iCAAtiB,EAA2kB,mB,6ECwC3kB,EAlCmB,SAAH,GAA6E,IAAxEA,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAItE,OAAO,gBAAKC,UAAWF,IAAWC,EAAeE,EAAwBA,EAAe,UACpF,iBAAKD,UAAWC,EAAwB,UAAC,MACrC,0BACI,UAAC,KAAO,CAACC,GAAI,YAAcJ,EAAO,UAAC,KAC/B,gBAAKE,UAAWC,EAAe,UAC3B,iBAAKD,UAAWC,EAAmB,WAC/B,4BACI,gBAAKE,IAAKP,EAAWQ,IAAK,YAAaJ,UAAWC,IAAoB,QAE1E,4BACI,yBAAMJ,IAAe,kBAMzC,0BACI,SAAC,IAAa,WACV,gBAAKM,IAAKE,EAAGD,IAAK,kKAAiCJ,UAAWC,EACzDK,YAtBG,WAExB,EAoBqDC,QAAS,WAC1Cb,EAAaC,EAAUG,EAC3B,EAAGU,MAAO,4KAO9B,ECtCA,EAA2E,2BAA3E,EAA0G,mBAA1G,EAA+I,iCAA/I,EAA8L,6BAA9L,EAA4O,gCCkB5O,EAdgB,SAAH,GAAiE,IAA5DC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAAMZ,EAAM,EAANA,OAAQa,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAa,EAAbA,cAKtD,OAAO,iBAAKb,UAAWC,EAAwB,UAAC,KAC5C,iBAAKD,UAAWU,IAASZ,EAASG,EAAsBA,EAAuB,UAAC,KAC5E,0BAAOQ,KACP,gBAAKN,IAAKE,EAAGL,UAAWC,EAAWK,YANnB,WAExB,EAI2EC,QAAS,WAAKM,EAAcD,EAAU,EAAGR,IAAK,oIAA4BI,MAAS,uIACtJ,kBAAMR,UAAWC,EAAkB,UAAEU,EAAKG,KAAM,IAAKH,EAAKI,gBAGtE,E,qECeMC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,kBAAjBD,EArBL,SAAH,GAAwB,IAAnBE,EAAY,EAAZA,aACrB,OACI,iBAAMC,SAAUD,EAAc,UAC1B,iBAAKnB,UAAWC,EAAyB,WACrC,gBAAKD,UAAWC,EAAkB,UAC9B,SAACoB,EAAA,EAAK,CACFC,KAAM,iBACNC,UAAWC,EAAAA,GACXC,SAAU,EAACC,EAAAA,EAAAA,IAAiB,MAC5BC,YAAa,kBAGrB,gBAAK3B,UAAWC,EAAoB,UAChC,mBAAQ2B,KAAK,SAAQ,SAAC,iBAK1C,IAmEA,EA9DgB,SAAH,GAA+I,IAA1IlC,EAAY,EAAZA,aAAcK,EAAY,EAAZA,aAAc8B,EAAa,EAAbA,cAAeC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAAaC,EAAuB,EAAvBA,wBAAyBxB,EAAI,EAAJA,KAAMG,EAAa,EAAbA,cAEhIsB,EAAiBL,EAASM,KAAI,SAACC,GAE3B,IAAIzC,EAAYyC,EAAEzC,UAAYyC,EAAEzC,UAAY0C,EAC5C,OAAO,SAAC,EAAU,CAAgBzC,SAAUwC,EAAExC,SAAUC,OAAQuC,EAAEvC,OAC/CF,UAAWA,EAAWG,aAAcA,EACpCL,aAAcA,EAAcC,SAAU0C,EAAE1C,UAFnC0C,EAAEvC,OAI9B,IAGAyC,EAAmBR,EAAUK,KAAI,SAACI,GAAC,OACnC,SAAC,EAAO,CAAsB/B,QAAS+B,EAAE/B,QAASC,KAAMA,EAAMZ,OAAQ0C,EAAE1C,OAAQa,KAAM6B,EAAE7B,KAAMC,UAAW4B,EAAEC,GAClG5B,cAAeA,GADV2B,EAAEC,GAAGD,EAAE/B,QACqB,IAiB9C,OAVAiC,EAAAA,EAAAA,YAAU,WACN,IAAMD,EAAKE,aAAY,WACnBT,IACAL,GACJ,GAAG,KACH,OAAQ,WACJe,cAAcH,EAClB,CACJ,GAAG,CAACP,EAAyBL,KAGzB,iBAAK7B,UAAWC,EAAiB,WAC7B,4BACI,eAAID,UAAWC,EAAyB,SAAC,gBACzC,iBAAKD,UAAWC,EAAwB,WACpC,SAAC4C,EAAA,EAAgB,CACbC,MAAOX,EACPY,OAAQC,OAAOC,OAAOC,YAAc,IACpCC,qBAAsB,YACtBC,sBAAuB,cACvBC,iBAAkB,wBACpB,WAGV,4BACI,eAAIrD,UAAWC,EAAuB,SAAC,cAEvC,SAAC4C,EAAA,EAAgB,CACbC,MAAOP,EACPQ,OAAQC,OAAOC,OAAOC,YAAc,IACpCC,qBAAsB,aACtBC,sBAAuB,eACvBC,iBAAkB,sBACpB,KACF,4BAAK,SAACrC,EAAmB,CACrBI,SAxCS,SAACkC,GACtBtB,GAASuB,EAAAA,EAAAA,IAAM,mBACftB,EAAYqB,EAAmBE,eACnC,IAqC+C,YAKnD,E,4DC9EMC,EAAgB,qJAwFjB,OAxFiB,oCAClBC,sBAAwB,WACf,EAAKC,MAAM7D,OAOX,EAAK6D,MAAM5D,eAAe,EAAK4D,MAAM7D,SACtC,EAAK6D,MAAMC,gBAAgB,EAAKD,MAAM7D,QAEtC,EAAK6D,MAAME,uBAAuB,EAAKF,MAAM7D,QAAQ,EAAM,EAAK6D,MAAMjD,OATlE,EAAKiD,MAAM5B,UAAU+B,OAAO,IAC5B,EAAKH,MAAMI,YAAY,IACvB,EAAKJ,MAAMC,gBAAgB,MAUvC,EAAC,EAeDI,WAAa,WACiB,KAAtB,EAAKL,MAAM7D,QACf,EAAK6D,MAAMM,uBAAuB,EAAKN,MAAMjD,KAAM,EAAKiD,MAAM7D,OAClE,EAAC,EAEDoC,wBAA0B,WACI,KAAtB,EAAKyB,MAAM7D,QACf,EAAK6D,MAAMO,8BAA8B,EAAKP,MAAMjD,KAAM,EAAKiD,MAAM7D,OACzE,EAAC,EAED+B,cAAgB,WACZ,EAAK8B,MAAMQ,4BAA4B,EAAKR,MAAMjD,KACtD,EAAC,EAEDuB,YAAc,SAACmC,GACX,IACIvE,EAAW,EACXD,EAAY,EACE,OAHA,EAAK+D,MAAMU,cAIzBxE,EAAW,EAAK8D,MAAMU,YAAYC,QAAQC,SAC1C3E,EAAY,EAAK+D,MAAMU,YAAYC,QAAQE,OAAOC,OAGjD,EAAKd,MAAM7D,QAKhB,EAAK6D,MAAMe,wBACPN,EACA,EAAKT,MAAMgB,KAAKjE,KAChB,EAAKiD,MAAMgB,KAAKC,QAChB,EAAKjB,MAAMgB,KAAKE,UAAUL,OAAOC,MACjC,EAAKd,MAAM7D,QAGf,EAAK6D,MAAMmB,6BACP,EAAKnB,MAAMgB,KAAKjE,KAChB,EAAKiD,MAAM7D,OACXD,EACAD,IAhBAmF,MAAM,wFAmBd,EAAC,EAEDlE,cAAgB,SAACmE,GACb,EAAKrB,MAAMsB,0BAA0BD,EAAW,EAAKrB,MAAMjD,KAAM,EAAKiD,MAAM7D,OAChF,EAAC,EAEDJ,aAAe,SAACC,EAAUuF,GACtB,EAAKvB,MAAMwB,yBAAyBxF,EAAU,EAAKgE,MAAMjD,KAAMwE,EAQnE,EAAC,EAoBA,OApBA,yCAxED,WACIE,KAAKvD,gBAELuD,KAAK1B,uBACT,GAAC,gCAED,SAAmB2B,EAAWC,EAAWC,GAErCH,KAAK1B,wBACA0B,KAAKzB,MAAM6B,uBAAuBH,EAAUG,sBAC7CJ,KAAKpB,YAEb,GAAC,oBA+DD,WACI,OAAO,0BACH,SAAC,GAAO,gBACJjC,UAAYqD,KAAKzB,MAAM5B,UACvB0D,QAAUL,KAAKzB,MAAM8B,QACrB3D,SAAWsD,KAAKzB,MAAM7B,UAClBsD,KAAKzB,OAAK,IACd1B,YAAamD,KAAKnD,YAClB+B,WAAYoB,KAAKpB,WACjB9B,wBAAyBkD,KAAKlD,wBAC9BxB,KAAM0E,KAAKzB,MAAMjD,KACjBG,cAAiBuE,KAAKvE,cACtBgB,cAAeuD,KAAKvD,cACpB9B,aAAgBqF,KAAKzB,MAAM5D,aAC3BL,aAAgB0F,KAAK1F,iBAGjC,KAAC,EA5GiB,CAASgG,EAAAA,WAsK/B,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBkB,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAMlB,KAAKmB,OACnBpF,KAAMmF,EAAMlB,KAAKjE,KACjBX,aAAc8F,EAAME,YAAYhG,aAChCgC,UAAW8D,EAAME,YAAYhE,UAC7B0D,QAASI,EAAME,YAAYN,QAC3BD,qBAAsBK,EAAME,YAAYP,qBACxC1D,SAAU+D,EAAME,YAAYjE,SAE5BuC,YAAYwB,EAAMxB,YAClBM,KAAMkB,EAAMlB,KAEpB,IArD0B,SAAC3C,GACvB,MAAO,CAEH0C,wBAAyB,SAACpB,EAAoB5C,EAAMsF,EAAQC,EAASnG,GACjEkC,GAAS0C,EAAAA,EAAAA,IAAwBpB,EAAoB5C,EAAMsF,EAAQC,EAASnG,GAChF,EACAmE,uBAAwB,SAACvD,EAAMZ,GAC3BkC,GAASiC,EAAAA,EAAAA,IAAuBvD,EAAMZ,GAC1C,EACA8D,gBAAiB,SAAC7D,GACdiC,GAAS4B,EAAAA,EAAAA,IAAgB7D,GAC7B,EACAgE,YAAa,SAACmC,GACVlE,GAAS+B,EAAAA,EAAAA,GAAYmC,GACzB,EACAhC,8BAA+B,SAACxD,EAAMZ,GAClCkC,GAASkC,EAAAA,EAAAA,IAA8BxD,EAAMZ,GACjD,EACAmF,0BAA2B,SAACD,EAAWtE,EAAMZ,GACzCkC,GAASiD,EAAAA,EAAAA,IAA0BD,EAAWtE,EAAMZ,GACxD,EACA+D,uBAAwB,SAAC9D,EAAcoG,EAAwBzF,GAC3DsB,GAAS6B,EAAAA,EAAAA,IAAuB9D,EAAcoG,EAAwBzF,GAC1E,EACA0F,sBAAuB,SAACrG,GACpBiC,GAASoE,EAAAA,EAAAA,IAAsBrG,GACnC,EACAoE,4BAA6B,SAACzD,GAC1BsB,GAASmC,EAAAA,EAAAA,GAA4BzD,GACzC,EACAoE,6BAA8B,SAACuB,EAASnB,EAASoB,EAAOC,GACpDvE,GAAS8C,EAAAA,EAAAA,IAA6BuB,EAASnB,EAASoB,EAAOC,GACnE,EACApB,yBAA0B,SAACxF,EAAU0G,EAASnB,GAC1ClD,GAASmD,EAAAA,EAAAA,IAAyBxF,EAAU0G,EAASnB,GACzD,EACAlD,SAAUA,EAElB,IAmBIwE,EAAAA,EACAC,EAAAA,EAHJ,CAKChD,E,wGC3LD,G,QAAgC,qCAAhC,EAA+E,+BAA/E,EAA0H,gCAA1H,EAAkN,4BAAlN,EAA2P,iC,+CCG9OiD,EAAW,SAAH,GAAqC,IAAhCC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAASC,GAAS,YACzCC,EAAUF,EAAKG,SAAWH,EAAKI,MACrC,OACI,4BACI,0BACI,uCAAcL,GAAK,IACThF,YAAakF,EAAUlF,YACvB3B,UAAW8G,EAAQ7G,EAAsBA,QAIvD,yBACK6G,IAAW,iBAAM9G,UAAWC,EAAkB,SAAE2G,EAAKI,YAKtE,EACaxF,EAAQ,SAAH,GAAqC,IAAhCmF,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAASC,GAAS,YACtCC,EAAUF,EAAKG,SAAWH,EAAKI,MACrC,OACI,6BACI,2BACI,oCAAWL,GAAK,IACNhF,YAAakF,EAAUlF,YACvB3B,UAAW8G,EAAQ7G,EAAmBA,QAIpD,yBACK6G,IAAW,iBAAM9G,UAAWC,EAAkB,SAAE2G,EAAKI,YAKtE,C,wGCvCO,IAAMC,EAAW,SAACC,GACrB,OAAIA,OACA,EAEO,mBAEf,EAEaxF,EAAmB,SAACyF,GAAS,OAAK,SAACD,GAE5C,OAAIA,GAASA,EAAMpD,OAAOqD,EAChB,gBAAN,OAAuBA,QAEvB,CAER,CAAC,EAEYC,EAAQ,SAAAF,GAAK,OACtBA,IAAU,4CAA4CG,KAAKH,GACvD,6BAA0BI,CAAS,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dM24o\",\"dialogList\":\"Dialogs_dialogList__DRCp9\",\"dialogListHeader\":\"Dialogs_dialogListHeader__LoidE\",\"messagesHeader\":\"Dialogs_messagesHeader__0aYgL\",\"knopka\":\"Dialogs_knopka__xT3Jx\",\"dialogItemGreed\":\"Dialogs_dialogItemGreed__AaCdb\",\"dialog\":\"Dialogs_dialog__YZmRT\",\"dialogCurrent\":\"Dialogs_dialogCurrent__ICI5E\",\"dialogImg\":\"Dialogs_dialogImg__H5UvS\",\"FieldLeft\":\"Dialogs_FieldLeft__5h4r2\",\"buttonRight\":\"Dialogs_buttonRight__XYfP1\",\"FieldButtonGreed\":\"Dialogs_FieldButtonGreed__pgs7l\",\"dialogContainer\":\"Dialogs_dialogContainer__4-aI+\",\"x\":\"Dialogs_x__6nHnv\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport x from \"../../../assets/images/x.png\";\r\nimport {PointerCursor} from \"../../Dark_light_theme/globalStyles\";\r\n\r\n\r\nconst DialogItem = ({deleteDialog, dialogId, userPhoto, userName, userId, dialogUserID}) => {\r\n    let onMouseOverAction = () => {\r\n\r\n    }\r\n    return <div className={userId === dialogUserID ? classes.dialogCurrent : classes.dialog} >\r\n        <div className={classes.dialogItemGreed}>  {/*разделение фото имени с кнопкой закрытия диалога в диалогЛисте*/}\r\n            <div >\r\n                <NavLink to={'/dialogs/' + userId}> {/*навигация на диалог*/}\r\n                    <div className={classes.knopka}>\r\n                        <div className={classes.dialogList}>{/* Разделение фото и имени*/}\r\n                            <div>\r\n                                <img src={userPhoto} alt={\"userPhoto\"} className={classes.dialogImg}/> {/*Фото диалога*/}\r\n                            </div>\r\n                            <div>\r\n                                <div>{userName}</div> {/*имя*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <PointerCursor>\r\n                    <img src={x} alt={\"Удалить из своего диалогЛиста\"} className={classes.x}\r\n                         onMouseOver={onMouseOverAction} onClick={() => {\r\n                        deleteDialog(dialogId, userId)\r\n                    }} title={\"Удалить из своего диалогЛиста\"}/>\r\n                </PointerCursor>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageCommon\":\"Message_messageCommon__JBI1k\",\"timeStyle\":\"Message_timeStyle__nW8fG\",\"x\":\"Message_x__9QsEg\",\"messageswrapper\":\"Message_messageswrapper__KRV1p\",\"messageMyId\":\"Message_messageMyId__w6TOo\",\"messageNotMyId\":\"Message_messageNotMyId__wjpf9\"};","import React from 'react';\nimport classes from './Message.module.css';\nimport x from \"../../../assets/images/x.png\";\n\n\nconst Message = ({message, myID, userId, Date, MessageId, deleteMessage}) => {\n\n    let onMouseOverAction = () => {\n\n    }\n    return <div className={classes.messageswrapper}> {/*разделить сообщения на мои и собеседника поровну (право-лево)*/}\n        <div className={myID === userId ? classes.messageMyId : classes.messageNotMyId}> {/*в зависимости от того кто пишет, доп стили к тексту*/}\n            <span>{message}</span>\n            <img src={x} className={classes.x} onMouseOver={onMouseOverAction} onClick={()=>{deleteMessage(MessageId)}} alt={\"Удалить сообщение у всех\"} title = {\"Удалить сообщение у всех\"}/>\n            <span className={classes.timeStyle}>{Date.Hour}{\":\"}{Date.Minutes}</span>\n        </div>\n    </div>\n}\n\nexport default Message;\n\n","import React, {useEffect} from 'react'; // импорт реакта\r\nimport classes from './Dialogs.module.css';// css обработка\r\nimport DialogItem from \"./DialogItem/DialogItem\";// подкомпонента отрисовки диалогов через map\r\nimport Message from \"./Message/Message\";// подкомпонента отрисовки сообщений через map\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Input} from \"../common/Validation/customFields\";\r\nimport {maxLengthCreator} from \"../common/Validation/validationField\";\r\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\";\r\nimport userPhotoAva from \"../../assets/images/no-image3.png\";\r\n\r\n\r\nconst newMessageForm = ({handleSubmit}) => {// компонента формы\r\n    return (\r\n        <form onSubmit={handleSubmit} /*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\r\n            <div className={classes.FieldButtonGreed}>\r\n                <div className={classes.FieldLeft}>\r\n                    <Field\r\n                        name={\"newMessageData\"}// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}//настраиваемый компонент текстовое поле для вывода ошибок ввода\r\n                        validate={[maxLengthCreator(100)]}//Required убрал\r\n                        placeholder={\"newMessage\"}// текст подсказка при пустом поле\r\n                    />\r\n                </div>\r\n                <div className={classes.buttonRight}>\r\n                    <button type=\"submit\">Submit</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// оберточная компонента формы, задает имя подстейта \"newMessageForm\"\r\nconst NewMessageReduxForm = reduxForm({form: \"newMessageForm\"})(newMessageForm)\r\n\r\nconst Dialogs = ({deleteDialog, dialogUserID, getDialogList, dialogs2, messages2, dispatch, sendMessage, getDialogLastUpdateTime, myID, deleteMessage}) => { // основная компонента отрисовки диалогов\r\n\r\n    let dialogElements = dialogs2.map((d) => // подкомпонента отрисовки всех диалогов через map\r\n        {\r\n            let userPhoto = d.userPhoto ? d.userPhoto : userPhotoAva; // если аватарки с сервера нет, подставить заглушку\r\n            return <DialogItem key={d.userId} userName={d.userName} userId={d.userId}\r\n                               userPhoto={userPhoto} dialogUserID={dialogUserID}\r\n                               deleteDialog={deleteDialog} dialogId={d.dialogId}\r\n            />\r\n        }\r\n    );\r\n\r\n    let messagesElements = messages2.map((m) => // подкомпонента отрисовки всех сообщений через map\r\n        <Message key={m.id+m.message} message={m.message} myID={myID} userId={m.userId} Date={m.Date} MessageId={m.id}\r\n                 deleteMessage={deleteMessage}/>);\r\n\r\n    let onSendMessageClick = (formDataNewMessage) => {// функция отправления данных формы нового сообщения в стейт\r\n        dispatch(reset('newMessageForm'))\r\n        sendMessage(formDataNewMessage.newMessageData);\r\n    };\r\n\r\n    useEffect(() => { // при очередном ререндере\r\n        const id = setInterval(() => { // задать цикл с интервалом в 1 сек\r\n            getDialogLastUpdateTime() // получить время обновления текущего диалога\r\n            getDialogList()// получить диалогЛист (мне кто то написал, или я начал диалог)\r\n        }, 1000)\r\n        return (() => {\r\n            clearInterval(id)\r\n        }) // для сброса цикла при очередном рендере\r\n    }, [getDialogLastUpdateTime, getDialogList]) // useEffect без зависимостей\r\n\r\n    return (\r\n        <div className={classes.dialogs} /*стиль всех диалогов*/>\r\n            <div>\r\n                <h3 className={classes.dialogListHeader}>dialogList</h3>\r\n                <div className={classes.dialogContainer}>\r\n                    <ScrollContainer // обернуть сообщения скролом\r\n                        child={dialogElements}\r\n                        height={window.screen.availHeight - 277} // высота поля скрола\r\n                        firstInsideContainer={\"DialogsUp\"}\r\n                        secondInsideContainer={\"DialogsDown\"}\r\n                        containerElement={\"DialogsContainer123\"}\r\n                    /> {/*отрисовка диалогов в скрол контейнере*/}</div>\r\n\r\n            </div>\r\n            <div>\r\n                <h3 className={classes.messagesHeader}>Messages</h3>\r\n\r\n                <ScrollContainer // обернуть сообщения скролом\r\n                    child={messagesElements}\r\n                    height={window.screen.availHeight - 300} // высота поля скрола\r\n                    firstInsideContainer={\"MessagesUp\"}\r\n                    secondInsideContainer={\"MessagesDown\"}\r\n                    containerElement={\"MessagesContainer\"}\r\n                /> {/*отрисовка сообщений в скрол контейнере*/}\r\n                <div><NewMessageReduxForm\r\n                    onSubmit={onSendMessageClick}/> {/*вызов формы сообщений с отсылкой на локальный обработчик сабмита*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\nimport Dialogs from \"./Dialogs\";\nimport {\n    deleteDialogThunkCreator,\n    deleteMessageThunkCreator,\n    getDialogLastUpdateTimeTnkCrt,\n    getDialogsThunkCreator, getFollowThunkCreator, getMyDialogListThunkCreator,\n    sendDialogsThunkCreator,\n    setdialogUserID,\n    setMessages, updateDialogListThunkCreator\n} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getProfileThunkCreator} from \"../../redux/profile-reducer\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport withRouter2 from \"../hoc/withRouter2\";\n\nclass DialogsContainer extends React.Component {\n    commonPartMountUpdate = () => {// общая часть для componentDidMount и componentDidUpdate\n        if (!this.props.userId) { // если перешли на вкладку Dialogs с нулевым userId\n            if (this.props.messages2.length>0) { // если массив сообщений непустой\n                this.props.setMessages([]); // занулить массив сообщений (очистить список сообщений)\n                this.props.setdialogUserID(null) // занулить userId (убрать выделение диалога)\n            }\n            return\n        }\n        if ( this.props.dialogUserID!==this.props.userId) { // если считаный из URL userId не равен тому, что в BLL\n            this.props.setdialogUserID(this.props.userId) // задать в BLL считаный из URL ID\n            //здесь запросить профиль выбранного userId через getProfileThunkCreator\n            this.props.getProfileThunkCreator(this.props.userId, true, this.props.myID)// при переходе в диалог любого пользователя считать его данные профиля с сервера\n        }\n\n    }\n    componentDidMount() {\n        this.getDialogList()\n        //      console.log(\"DialogsContainer -> componentDidMount\")\n        this.commonPartMountUpdate();// общая часть для componentDidMount и componentDidUpdate\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //       console.log(\"DialogsContainer -> componentDidUpdate\")\n        this.commonPartMountUpdate(); // общая часть для componentDidMount и componentDidUpdate\n        if  (this.props.dialogLastUpdateTime!==prevProps.dialogLastUpdateTime) { // если время обновления диалога изменилось\n            this.getDialogs()// запросить новые сообщения по диалогу\n        }\n    }\n\n    getDialogs = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке Dialogs\n        this.props.getDialogsThunkCreator(this.props.myID, this.props.userId);// получить диалоги\n    }\n\n    getDialogLastUpdateTime = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке Dialogs\n        this.props.getDialogLastUpdateTimeTnkCrt(this.props.myID, this.props.userId); // получить время последенего обновления диалога\n    }\n\n    getDialogList = () => {\n        this.props.getMyDialogListThunkCreator(this.props.myID)\n    }\n\n    sendMessage = (NewMessage) => { // отправка сообщения\n        let profilePage = this.props.profilePage // локальный стейт страницы пользователя\n        let userName = 0 // задаем переменную имени пользователя\n        let userPhoto = 0 // и его фото для отображения в диалоглисте\n        if (profilePage!==null) { // если профиль пользователя уже загружен\n            userName = this.props.profilePage.profile.fullName; // переопределить имя пользователя\n            userPhoto = this.props.profilePage.profile.photos.small; // и его фото и стейта\n        }\n\n        if (!this.props.userId) { // при клике просто по вкладке Dialogs\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\n            return\n        }\n\n        this.props.sendDialogsThunkCreator( // отправить сообщение\n            NewMessage,\n            this.props.auth.myID, // мой ID для формирования DialogList собеседника\n            this.props.auth.myLogin, // мой логин  для формирования DialogList собеседника\n            this.props.auth.myProfile.photos.small, // мое фото  для формирования DialogList собеседника\n            this.props.userId, // ID собеседника для формирования моего DialogList\n        ); // отправить сообщение\n\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\n            this.props.auth.myID, // мой ID\n            this.props.userId, // ID с кем веду диалог\n            userName, // его имя\n            userPhoto // и фото\n        )\n        //userId1, userId2, Name2, Photo2\n    }\n\n    deleteMessage = (messageID) => { // удалить сообщение по его ID в списке\n        this.props.deleteMessageThunkCreator(messageID, this.props.myID, this.props.userId);\n    }\n\n    deleteDialog = (dialogId, userId2) => {\n        this.props.deleteDialogThunkCreator(dialogId, this.props.myID, userId2)\n        // здесь сменить URL без ID\n\n\n\n\n\n\n    }\n\n\n    render () {\n        return <div>\n            <Dialogs\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\n                dialogs ={this.props.dialogs} // список диалогов\n                dialogs2 ={this.props.dialogs2} // список диалогов с LocalStorage\n                {...this.props} // все входящие пропсы пробросили дальше\n                sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\n                getDialogs={this.getDialogs}  // проброс местного метода получить диалоги\n                getDialogLastUpdateTime={this.getDialogLastUpdateTime} // проброс метода - получить время обновления текущего диалога\n                myID={this.props.myID} // мой ID\n                deleteMessage = {this.deleteMessage} // удалить сообщение\n                getDialogList={this.getDialogList} // периодическая проверка написал ли кто мне, или я с кем диалог начал\n                dialogUserID = {this.props.dialogUserID}\n                deleteDialog = {this.deleteDialog}\n            />\n        </div>\n    }\n}\n\nlet mapDispatchToProps  = (dispatch) => {\n    return {\n\n        sendDialogsThunkCreator: (formDataNewMessage, myID, MyName, MyPhoto, userId) => { // отправить сообщение\n            dispatch(sendDialogsThunkCreator(formDataNewMessage, myID, MyName, MyPhoto, userId))\n        },\n        getDialogsThunkCreator: (myID, userId) => { // получить данные по текущему диалогу\n            dispatch(getDialogsThunkCreator(myID, userId))\n        },\n        setdialogUserID: (dialogUserID) => { // задать ID собеседника в BLL\n            dispatch(setdialogUserID(dialogUserID))\n        },\n        setMessages: (updatedMessages) => { // задать сообщения напрямую (для зануления)\n            dispatch(setMessages(updatedMessages))\n        },\n        getDialogLastUpdateTimeTnkCrt: (myID, userId) => { // получить время последнего обновления текущего диалога\n            dispatch(getDialogLastUpdateTimeTnkCrt(myID, userId))\n        },\n        deleteMessageThunkCreator: (messageID, myID, userId) => { // удалить сообщение из диалога\n            dispatch(deleteMessageThunkCreator(messageID, myID, userId))\n        },\n        getProfileThunkCreator: (dialogUserID, shouldUpdateDialogList, myID) => { // удалить сообщение из диалога\n            dispatch(getProfileThunkCreator(dialogUserID, shouldUpdateDialogList, myID))\n        },\n        getFollowThunkCreator: (dialogUserID) => { // удалить сообщение из диалога\n            dispatch(getFollowThunkCreator(dialogUserID))\n        },\n        getMyDialogListThunkCreator: (myID) => { // удалить сообщение из диалога\n            dispatch(getMyDialogListThunkCreator(myID))\n        },\n        updateDialogListThunkCreator: (userId1, userId2, Name2, Photo2) => { // удалить сообщение из диалога\n            dispatch(updateDialogListThunkCreator(userId1, userId2, Name2, Photo2))\n        },\n        deleteDialogThunkCreator: (dialogId, userId1, userId2) => { // удалить сообщение из диалога\n            dispatch(deleteDialogThunkCreator(dialogId, userId1, userId2))\n        },\n        dispatch: dispatch // для зануления redux-form\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // флаг, авторизован ли я сейчас,\n        myID: state.auth.myID, // мой ID (авторизованного пользователя)\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n        dialogs: state.dialogsPage.dialogs, // список диалогов\n        dialogLastUpdateTime: state.dialogsPage.dialogLastUpdateTime,// время последнего времени обновления текущего диалога\n        dialogs2: state.dialogsPage.dialogs2, // список диалогов с LocalStorage\n\n        profilePage:state.profilePage, // страница профиля пользователя для создания dialogList\n        auth: state.auth,// страница моего профиля для создания dialogList\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2 // проверка, залогинен ли я\n)\n(DialogsContainer);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError && <span className={classes.textError}>{meta.error}</span>}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError && <span className={classes.textError}>{meta.error}</span>}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CreateField = (name, component, placeholder, validate ) => {\r\n    return (<div>\r\n        <Field\r\n            name={name}// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n            component={component}// компонент - кастомная строка с валидацией\r\n            placeholder={placeholder}// текст подсказка при пустом поле\r\n            validate={validate}\r\n        />\r\n    </div>)\r\n\r\n}\r\n\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["deleteDialog","dialogId","userPhoto","userName","userId","dialogUserID","className","classes","to","src","alt","x","onMouseOver","onClick","title","message","myID","Date","MessageId","deleteMessage","Hour","Minutes","NewMessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","name","component","Input","validate","maxLengthCreator","placeholder","type","getDialogList","dialogs2","messages2","dispatch","sendMessage","getDialogLastUpdateTime","dialogElements","map","d","userPhotoAva","messagesElements","m","id","useEffect","setInterval","clearInterval","ScrollContainer","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","formDataNewMessage","reset","newMessageData","DialogsContainer","commonPartMountUpdate","props","setdialogUserID","getProfileThunkCreator","length","setMessages","getDialogs","getDialogsThunkCreator","getDialogLastUpdateTimeTnkCrt","getMyDialogListThunkCreator","NewMessage","profilePage","profile","fullName","photos","small","sendDialogsThunkCreator","auth","myLogin","myProfile","updateDialogListThunkCreator","alert","messageID","deleteMessageThunkCreator","userId2","deleteDialogThunkCreator","this","prevProps","prevState","snapshot","dialogLastUpdateTime","dialogs","React","compose","connect","state","isAuth","dialogsPage","MyName","MyPhoto","updatedMessages","shouldUpdateDialogList","getFollowThunkCreator","userId1","Name2","Photo2","withRouter2","NavigateToLoginHoc2","Textarea","input","meta","restProps","isError","touched","error","Required","value","maxLength","email","test","undefined"],"sourceRoot":""}