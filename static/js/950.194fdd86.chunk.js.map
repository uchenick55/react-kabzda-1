{"version":3,"file":"static/js/950.194fdd86.chunk.js","mappings":"+LAmIA,WAAeA,EAAAA,EAAAA,KAvBS,SAACC,GACrB,MAAO,CACHC,OAAOC,EAAAA,EAAAA,GAAkBF,GACzBG,SAAUC,EAAAA,EAAAA,YAAkCJ,GAC5CK,gBAAiBD,EAAAA,EAAAA,mBAAyCJ,GAC1DM,YAAaF,EAAAA,EAAAA,eAAqCJ,GAClDO,WAAYH,EAAAA,EAAAA,cAAoCJ,GAChDQ,oBAAqBJ,EAAAA,EAAAA,uBAA6CJ,GAClES,OAAQL,EAAAA,EAAAA,UAAgCJ,GACxCU,KAAMV,EAAMW,UAAUD,KACtBE,YAAaR,EAAAA,EAAAA,eAAqCJ,GAClDa,MAAOb,EAAMc,IAAID,MACjBE,UAAWf,EAAMc,IAAIC,UAE7B,GAaI,CACIC,eAAAA,EAAAA,GAAgBC,qBAAAA,EAAAA,GAAsBC,mBAAAA,EAAAA,GACtCC,qBAAAA,EAAAA,GAAsBC,QAAAA,EAAAA,GAASC,eAAAA,EAAAA,IANvC,EAlG8C,SAAHC,GAMrC,IAJErB,EAAKqB,EAALrB,MAAOE,EAAQmB,EAARnB,SAAUE,EAAeiB,EAAfjB,gBAAiBC,EAAWgB,EAAXhB,YAAaC,EAAUe,EAAVf,WAAYC,EAAmBc,EAAnBd,oBAC3DC,EAAMa,EAANb,OAAQC,EAAIY,EAAJZ,KAAME,EAAWU,EAAXV,YAAaC,EAAKS,EAALT,MAAOE,EAASO,EAATP,UAAWC,EAAcM,EAAdN,eAC7CC,EAAoBK,EAApBL,qBAAsBC,EAAkBI,EAAlBJ,mBAAoBC,EAAoBG,EAApBH,qBAAsBC,EAAOE,EAAPF,QAASC,EAAcC,EAAdD,eAG7EE,GAAwCC,EAAAA,EAAAA,UAAkBd,GAAMe,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAkDL,EAAAA,EAAAA,UAAkB,GAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhEE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GA8B9C,OAVAG,EAAAA,EAAAA,YAAW,WACPhB,EAAsBX,EAAaH,EAAUO,EAAME,EAAa,EACpE,GAAG,CAACN,EAAaW,EAAsBL,EAAaT,EAAUO,KAE9DuB,EAAAA,EAAAA,YAAW,WACPjB,EAAgB,GAChBgB,EAAsB,GACtBf,EAAsB,EAAGd,EAAUO,EAAME,EAAa,EAC1D,GAAG,CAACF,EAAME,EAAaK,EAAsBd,EAAUa,KAEhDkB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAE,IACJ7B,IAAc8B,EAAAA,EAAAA,KAACC,EAAAA,EAAS,KACzBD,EAAAA,EAAAA,KAACE,EAAAA,EAAO,CAACC,cA/BS,SAACC,GACnBzB,EAAgByB,GAChBxB,EAAsBwB,EAAStC,EAAUO,EAAME,EAAa,EAChE,EA6BaP,gBAAiBA,EACjBF,SAAUA,EACVG,YAAaA,EACbL,MAAOA,EACPyC,YA7BO,SAACC,GACjBxB,EAAsBwB,EAAIrC,EAAaH,EAAUO,EAAME,EAC3D,EA4BagC,UAjCK,SAACD,GACfzB,EAAoByB,EAAIrC,EAAaH,EAAUO,EAAME,EACzD,EAgCaJ,oBAAqBA,EACrBC,OAAQA,EACRoC,gBA9BW,WACpBzB,EAASO,EACb,EA6BaA,aAAcA,EACdmB,qBA7BgB,SAACC,GAC1BnB,EAAiBmB,EAAMC,cAAcC,MACzC,EA4BalB,kBAAmBA,EACnBmB,mBA5Bc,SAACC,GACxBnB,EAAsBD,EAAoBoB,EAC9C,EA2Ba9B,eAAgBA,EAChBT,YAAaA,EACbC,MAAOA,EACPE,UAAWA,MAG5B,G","sources":["components/users/UsersContainerFC.tsx"],"sourcesContent":["import {usersType} from \"../api/apiTypes\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {getUsersReselect, usersSelectorsSimple} from \"./users-selectors\";\nimport {connect} from \"react-redux\";\nimport {\n    followThunkCreator,\n    getUsersThunkCreator,\n    setCurrentPage, setOnlyFriends, setTerm,\n    unfollowThunkCreator\n} from \"../../redux/users-reducer\";\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport UsersBS from \"./UsersBS1\";\n\ntype MainProps = {\n    users: Array<usersType>, // Реселектор users- список пользователей в пачке от сервера\n    pageSize: number,// селектор pageSize - количество пользователей на странице\n    totalUsersCount: number, // селектор totalUsersCount - общее число пользователей с сервера\n    currentPage: number,// селектор currentPage - текущая страница пачки пользователей с сервера\n    isFetching: boolean, // селектор isFetching - показать крутилку при загрузке страницы\n    followingInProgress: Array<number>, // селектор followingInProgress - массив на кого мы подписались, кнопка неактивна\n    isAuth: boolean, // селектор isAuth - флаг авторизации\n    term: string,\n    onlyFriends: boolean, // селектор получить только моих рузей\n    patch: string, // страница из адресной строки\n    PageWidth: number // ширина страницы\n    setCurrentPage: (currentPage: number) => void,\n    getUsersThunkCreator: (currentPage: number, pageSize: number, term: string, friend: boolean, userId: number) => void,\n    followThunkCreator: (userId: number, currentPage: number, pageSize: number, term: string, friend: boolean) => void,\n    unfollowThunkCreator: (userId: number, currentPage: number, pageSize: number, term: string, friend: boolean) => void,\n    setTerm: (term: string) => void,\n    setOnlyFriends: (onlyFriends: boolean) => void\n}\nconst UsersContainerFC: React.FC<MainProps> = (\n    {\n        users, pageSize, totalUsersCount, currentPage, isFetching, followingInProgress,\n        isAuth, term, onlyFriends, patch, PageWidth, setCurrentPage,\n        getUsersThunkCreator, followThunkCreator, unfollowThunkCreator, setTerm, setOnlyFriends\n    }\n) => {\n    const [onChangeTerm, setOnChangeTerm] = useState<string>( term ) // локальный стейт значения поля ввода input Users\n    const [currentRangeLocal, setCurrentRangeLocal] = useState<number>( 1 ) // диапазон страниц пагинации\n    const onPageChanged = (setPage: number) => {\n        setCurrentPage( setPage );\n        getUsersThunkCreator( setPage, pageSize, term, onlyFriends, 0 );\n    }\n    const followAPI = (id: number) => {\n        followThunkCreator( id, currentPage, pageSize, term, onlyFriends )\n    }\n    const unfollowAPI = (id: number) => {\n        unfollowThunkCreator( id, currentPage, pageSize, term, onlyFriends )\n    }\n    const SetTermFunction = () => {\n        setTerm( onChangeTerm ) // задание в стейт поискового запроса\n    }\n    const onChangeTermFunction = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setOnChangeTerm( event.currentTarget.value ) // задание значения поиска при изменении поля\n    }\n    const onChangeRangeLocal = (rangeShift: number) => { // rangeShift - смещение диапазона страниц пагинации2\n        setCurrentRangeLocal( currentRangeLocal + rangeShift )\n    }\n    useEffect( () => {\n        getUsersThunkCreator( currentPage, pageSize, term, onlyFriends, 0 );\n    }, [currentPage, getUsersThunkCreator, onlyFriends, pageSize, term] )\n\n    useEffect( () => {\n        setCurrentPage( 1 )// задание в стейт текущей страницы\n        setCurrentRangeLocal( 1 ) // перевод диапазона пагинации2 на 1 (сброс)\n        getUsersThunkCreator( 1, pageSize, term, onlyFriends, 0 );// получение списка пользователей с поисковым запросом (переключение на 1 страницу)\n    }, [term, onlyFriends, getUsersThunkCreator, pageSize, setCurrentPage] )\n\n    return <> {/*использование фрагмента вместо div/span*/}\n        {isFetching && <Preloader/>}\n        <UsersBS onPageChanged={onPageChanged}\n                 totalUsersCount={totalUsersCount}\n                 pageSize={pageSize}\n                 currentPage={currentPage}\n                 users={users}\n                 unfollowAPI={unfollowAPI}\n                 followAPI={followAPI}\n                 followingInProgress={followingInProgress}\n                 isAuth={isAuth}\n                 SetTermFunction={SetTermFunction}\n                 onChangeTerm={onChangeTerm}\n                 onChangeTermFunction={onChangeTermFunction}\n                 currentRangeLocal={currentRangeLocal}\n                 onChangeRangeLocal={onChangeRangeLocal}\n                 setOnlyFriends={setOnlyFriends}\n                 onlyFriends={onlyFriends}\n                 patch={patch}\n                 PageWidth={PageWidth}\n        />\n    </>\n}\n\ntype mapStateToPropsType = {\n    users: Array<usersType>, // Реселектор users- список пользователей в пачке от сервера\n    pageSize: number,// селектор pageSize - количество пользователей на странице\n    totalUsersCount: number, // селектор totalUsersCount - общее число пользователей с сервера\n    currentPage: number,// селектор currentPage - текущая страница пачки пользователей с сервера\n    isFetching: boolean, // селектор isFetching - показать крутилку при загрузке страницы\n    followingInProgress: Array<number>, // селектор followingInProgress - массив на кого мы подписались, кнопка неактивна\n    isAuth: boolean, // селектор isAuth - флаг авторизации\n    term: string,\n    onlyFriends: boolean, // селектор получить только моих рузей\n    patch: string,\n    PageWidth: number\n}\nconst mapStateToProps = (state: GlobalStateType) => {\n    return {\n        users: getUsersReselect( state ), // Реселектор users- список пользователей в пачке от сервера\n        pageSize: usersSelectorsSimple.getPageSize( state ),// селектор pageSize - количество пользователей на странице\n        totalUsersCount: usersSelectorsSimple.getTotalUsersCount( state ), // селектор totalUsersCount - общее число пользователей с сервера\n        currentPage: usersSelectorsSimple.getCurrentPage( state ),// селектор currentPage - текущая страница пачки пользователей с сервера\n        isFetching: usersSelectorsSimple.getIsFetching( state ), // селектор isFetching - показать крутилку при загрузке страницы\n        followingInProgress: usersSelectorsSimple.getFollowingInProgress( state ), // селектор followingInProgress - массив на кого мы подписались, кнопка неактивна\n        isAuth: usersSelectorsSimple.getIsAuth( state ), // селектор isAuth - флаг авторизации\n        term: state.usersPage.term,\n        onlyFriends: usersSelectorsSimple.getOnlyFriends( state ), // селектор получить только моих рузей\n        patch: state.app.patch, // страница из URL\n        PageWidth: state.app.PageWidth, // ширина страницы\n    }\n}\ntype mapDispatchToPropsType = {\n    setCurrentPage: (currentPage: number) => void,\n    getUsersThunkCreator: (currentPage: number, pageSize: number, term: string, friend: boolean, userId: number) => void,\n    followThunkCreator: (userId: number, currentPage: number, pageSize: number, term: string, friend: boolean) => void,\n    unfollowThunkCreator: (userId: number, currentPage: number, pageSize: number, term: string, friend: boolean) => void,\n    setTerm: (term: string) => void,\n    setOnlyFriends: (onlyFriends: boolean) => void\n}\nexport default connect<mapStateToPropsType,\n    mapDispatchToPropsType,\n    unknown,\n    GlobalStateType>( mapStateToProps,\n    {\n        setCurrentPage, getUsersThunkCreator, followThunkCreator,\n        unfollowThunkCreator, setTerm, setOnlyFriends\n    } )( UsersContainerFC );\n"],"names":["connect","state","users","getUsersReselect","pageSize","usersSelectorsSimple","totalUsersCount","currentPage","isFetching","followingInProgress","isAuth","term","usersPage","onlyFriends","patch","app","PageWidth","setCurrentPage","getUsersThunkCreator","followThunkCreator","unfollowThunkCreator","setTerm","setOnlyFriends","_ref","_useState","useState","_useState2","_slicedToArray","onChangeTerm","setOnChangeTerm","_useState3","_useState4","currentRangeLocal","setCurrentRangeLocal","useEffect","_jsxs","_Fragment","children","_jsx","Preloader","UsersBS","onPageChanged","setPage","unfollowAPI","id","followAPI","SetTermFunction","onChangeTermFunction","event","currentTarget","value","onChangeRangeLocal","rangeShift"],"sourceRoot":""}