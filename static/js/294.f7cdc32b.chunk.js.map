{"version":3,"file":"static/js/294.f7cdc32b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusUseReducer.jsx","components/Info/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileInfo/ProfileContainer.js","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx","components/hoc/NavigateToLoginHoc.js","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__2H7Cx\",\"posts\":\"Profile_posts__Zsb5o\",\"ProfileRender\":\"Profile_ProfileRender__e0enY\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__wm1cP\",\"content\":\"ProfileInfo_content__pLfkD\",\"ProfilePhoto\":\"ProfileInfo_ProfilePhoto__5mvid\"};","import React, {useReducer} from \"react\";\r\nimport {bedug_mode} from \"../../../../redux/store-redux\";\r\n\r\nlet ProfileStatusUseReducer = ({status, userId, myId, putStatusThunkCreator}) => {\r\n    const initialState = {\r\n        modifyStatus2: false,// локальная переменная-флаг модификации статуса\r\n        statusTmpInput2: null // локальный статус до отправки на сервер (поле input)\r\n    }\r\n\r\n    const SET_MODIFY_STATUS_TRUE = \"SET_MODIFY_STATUS_TRUE\"; // константа чтобы не ошибиться при диспатче (modify true)\r\n    const SET_MODIFY_STATUS_FALSE = \"SET_MODIFY_STATUS_FALSE\";// константа чтобы не ошибиться при диспатче (modify false)\r\n    const SET_STATUS_TMP_INPUT = \"SET_STATUS_TMP_INPUT\";// константа чтобы не ошибиться при диспатче (временный статус input)\r\n\r\n    const localReducer = (localState, action) => {\r\n        let stateCopy; // копия стейта для дебага\r\n        switch (action.type) {\r\n            case SET_MODIFY_STATUS_TRUE: // если мы открываем поле input (модификацию стьатуса)\r\n                stateCopy = {\r\n                    ...localState,\r\n                    modifyStatus2: true, // флаг модификации в true\r\n                    statusTmpInput2: status// локальный статус для input берем из стейта\r\n                };\r\n                return stateCopy; // проверяем что все вернулось как нужно\r\n            case SET_MODIFY_STATUS_FALSE: // если мы закрываем модификацию стьатуса\r\n                stateCopy = {\r\n                    ...localState,\r\n                    modifyStatus2: false // флаг модификации в false\r\n                };\r\n                return stateCopy; // проверяем что все вернулось как нужно\r\n            case 'SET_STATUS_TMP_INPUT':\r\n                stateCopy = {\r\n                    ...localState,\r\n                    statusTmpInput2: action.text // задаем локальный статус из value input\r\n                };\r\n                return stateCopy; // проверяем что все вернулось как нужно\r\n            default:\r\n                throw new Error(); // заглушка обработчика ошибок\r\n        }\r\n    }\r\n\r\n    const [localState, dispatch] = useReducer(localReducer, initialState)// меняем отдельные useState на useReducer\r\n\r\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\r\n        if (userId === myId) { // если ID открытого пользователя равен моему\r\n            dispatch({type: SET_MODIFY_STATUS_TRUE})// смена текстового отображения статуса на поле input\r\n        }\r\n    }\r\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\r\n        dispatch({type: SET_MODIFY_STATUS_FALSE})// смена текстового отображения статуса на поле input\r\n\r\n        if (bedug_mode) {console.log(\"ProfileStatusUseReducer.jsx, setMyStatus putStatusThunkCreator() ->SET_USER_PROFILE\" )} // дебаг\r\n\r\n        /////////  ProfileInfo.jsx\r\n\r\n        putStatusThunkCreator(localState.statusTmpInput2, myId)// санкреатор на обновление статуса на сервере\r\n    }\r\n    const onChangeStatus = (event) => {\r\n        const text = event.currentTarget.value;// вынимаем значение введенное в поле ввода input\r\n        dispatch({type: SET_STATUS_TMP_INPUT, text: text})// присваиваем переменной временного статуса из локального стейта введенное значение в поле\r\n    }\r\n    const checkEnterPressed = (event) => { // проверка нажатия Enter\r\n        if (event.charCode === 13) {\r\n            setMyStatus()//задание статуса при нажатии Enter\r\n        }\r\n    }\r\n\r\n    return (<div>\r\n        {!localState.modifyStatus2\r\n            ? <div>\r\n                <span\r\n                    onDoubleClick={checkIfICanModifyStatus}> {/*при двойном клике на статусе проверка могу ли я ввобще менять статус*/}\r\n                    Статус: {!status // если статуса из стейта нет или он нулевой\r\n                        ? \"нет статуса\" // отображение \"нет статуса\"\r\n                        : status // если статус есть из BLL, он отображается\r\n                    }\r\n                </span>\r\n            </div>\r\n            : <div>\r\n                <span onDoubleClick={setMyStatus}>\r\n                    <input\r\n                        value={localState.statusTmpInput2} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\r\n                        onChange={onChangeStatus} // задание временного локального статуса\r\n                        onBlur={setMyStatus}// задание стейта при потере фокуса input\r\n                        autoFocus={true} // фокусировка на поле ввода текста\r\n                        placeholder={\"задайте статус\"}// текст при пустом поле ввода\r\n                        onKeyPress={checkEnterPressed} // проверка нажатия Enter\r\n                    />\r\n                </span>\r\n            </div>\r\n        }\r\n    </div>)\r\n}\r\nexport default ProfileStatusUseReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from '../Profile/ProfileInfo/ProfileInfo.module.css'\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport ProfileStatusUseReducer from \"../Profile/ProfileInfo/ProfileStatus/ProfileStatusUseReducer\";\r\nimport {bedug_mode} from \"../../redux/store-redux\";\r\nimport userPhoto from \"../../assets/images/no-image3.png\";\r\n\r\n\r\nconst ProfileInfo = ({profile, myId, status, putStatusThunkCreator}) => {\r\n    if (bedug_mode) {console.log(\"ProfileInfo.jsx\")} // дебаг\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return <div className={classes.content}>\r\n\r\n        <div className={classes.ProfilePhoto} >\r\n            <img alt={\"userPhoto\"} src={profile.photos.small?profile.photos.small:userPhoto}/>\r\n        </div>\r\n        <div className={classes.descriptionBlock}>\r\n            <div>Обо мне: {profile.aboutMe}</div>\r\n            <div>Контакты:</div>\r\n            <div> facebook: {profile.contacts.facebook}</div>\r\n            <div>vk: {profile.contacts.vk}</div>\r\n            <div>twitter: {profile.contacts.twitter}</div>\r\n            <div>instagram: {profile.contacts.instagram}</div>\r\n            <div>github: {profile.contacts.github}</div>\r\n            <div>В поиске работы? {profile.lookingForAJob ? \"Да\" : \"Нет\"}</div>\r\n            <div>Описание: {profile.lookingForAJobDescription}</div>\r\n            <div>Полное имя: {profile.fullName}</div>\r\n            <div>userId: {profile.userId}</div>\r\n\r\n            <ProfileStatusUseReducer // можно еще использовать ProfileStatusUseState и ProfileStatusClass\r\n                myId={myId} // мой id для модификации статуса\r\n                userId={profile.userId} // id отображаемого пользователя\r\n                status={status} // статус из BLL\r\n                putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\r\n            />\r\n\r\n        </div>\r\n\r\n    </div>\r\n}\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__g8RkF\",\"postsBlock\":\"MyPosts_postsBlock__JTP3R\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__+6X+V\",\"item\":\"Post_item__kFO1d\",\"posts\":\"Post_posts__VMct2\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = ({message, like}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img alt={\"Мистер бин на прогулке\"}  src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\r\n            {message}\r\n            <div>\r\n                <span>Like {like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Post;\r\n","import React from 'react'; // импорт реакта\r\nimport classes from './MyPosts.module.css' // css обработка\r\nimport Post from \"./Post/Post\"; // подкомпонента отрисовки постов через map\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {maxLengthCreator, Required} from \"../../common/Validation/validationField\";\r\nimport {Textarea} from \"../../common/Validation/customFields\";\r\nimport {bedug_mode} from \"../../../redux/store-redux\"; // reduxForm для ввода новых постов\r\n\r\nconst newPostForm = ({handleSubmit}) => { // компонента формы\r\n    return (\r\n        <form onSubmit={handleSubmit} /*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\r\n            <div>\r\n                <div>\r\n                    <Field\r\n                        name={\"newPostData\"} // имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Textarea} //настраиваемый компонент текстовое поле для вывода ошибок ввода\r\n                        placeholder={\"newPost\"} // текст подсказка при пустом поле\r\n                        validate = {[Required, maxLengthCreator(60)]} //  валидация требуемого поля и максимальной длины\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button>Submit</button> {/*кнопка*/}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// оберточная компонента формы, задает имя подстейта \"newPostForm\"\r\nconst NewPostReduxForm = reduxForm({form: \"newPostForm\"})(newPostForm)\r\n\r\nconst MyPosts = ({state, addPost, dispatch}) => { // основная компонента отрисовки постов\r\n    if (bedug_mode) {console.log(\"MyPosts.jsx\")} // дебаг\r\n\r\n    let postElements = state.posts.map((p) => // подкомпонента отрисовки всех постов через map\r\n            <Post message={p.message} like={p.like} id={p.id}/>);\r\n\r\n    let AddPost = (formData) => { // функция отправления данных формы нового поста в стейт\r\n// здесь зарезетить форму\r\n        dispatch(reset('newPostForm'))\r\n        addPost(formData.newPostData);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.postsBlock} /*стиль*/ >\r\n            <h3>My posts</h3> {/*h3 заголовок*/}\r\n            <NewPostReduxForm onSubmit={AddPost} /> {/*вызов формы постов с отсылкой на локальный обработчик сабмита*/}\r\n            <div className={classes.posts}>\r\n                {postElements} {/*отрисовка постов*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;\r\n","import MyPosts from \"./MyPosts\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostData) => {\r\n            dispatch(addPostActionCreator(newPostData))\r\n        },\r\n        dispatch: dispatch\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\nimport classes from './Profile.module.css'\r\nimport ProfileInfo from \"../Info/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {bedug_mode} from \"../../redux/store-redux\";\r\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\";\r\n\r\nconst Profile = ({profile, status, myId, putStatusThunkCreator}) => {\r\n    if (bedug_mode) {\r\n        console.log(\"Profile.jsx\")\r\n    } // дебаг\r\n\r\n    let ProfileRender = <div className={classes.ProfileRender}>\r\n        <ProfileInfo // Отображение данных выбранного пользователя\r\n            profile={profile} // профиль выбранного пользователя\r\n            status={status} // статус из BLL\r\n            myId={myId} // мой id для модификации статуса\r\n            putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\r\n        />\r\n        <MyPostsContainer // контейнер отображения постов (пока заглушка из стейта BLL)\r\n        />\r\n    </div>\r\n    return <div>\r\n        <ScrollContainer\r\n            child={ProfileRender}\r\n            height={window.screen.availHeight-280}\r\n            firstInsideContainer={\"ProfileUp\"}\r\n            secondInsideContainer={\"ProfileDown\"}\r\n            containerElement={\"ProfileContainer\"}\r\n        /> {/*отрисовка FriendList в скрол контейнере*/}\r\n\r\n\r\n    </div>\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileThunkCreator, putStatusThunkCreator} from \"../../../redux/profile-reducer\";\r\nimport {useParams} from \"react-router-dom\"\r\nimport {NavigateToLoginHoc} from \"../../hoc/NavigateToLoginHoc\";\r\nimport {compose} from \"redux\";\r\nimport {bedug_mode} from \"../../../redux/store-redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        if (bedug_mode) {console.log(\"ProfileContainer.js componentDidMount()\")} // дебаг\r\n        this.props.getProfileThunkCreator(this.props.userId);// обновить профиль в зависомости от ID\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n      let userId = this.props.userId; // получить локальный userId из URL браузера\r\n      if (userId === 0) {userId=this.props.myId}// если кликнули на мой профиль (без ID в URL браузера) то смотрим мой профиль\r\n      if (userId!==this.props.profile.userId) { // если считаный из URL ID не равен записаному в стейт (смена пользователя)\r\n        this.props.getProfileThunkCreator(userId); // обновить профиль в зависомости от ID\r\n      }\r\n    }\r\n\r\n  render () {\r\n        return <>\r\n            <Profile {...this.props}/>\r\n        </>\r\n}}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        myId: state.auth.myID,\r\n        status: state.profilePage.status,\r\n    }\r\n}\r\n\r\nfunction withRouter (Children) {\r\n    return (props) => {\r\n       let match = {params: useParams()}\r\n       let userId = Number(match.params[\"*\"]); // получить локальный userId из URL браузера\r\n       return <Children {...props} match = {match} userId={userId}/>\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfileThunkCreator, putStatusThunkCreator}),\r\n    withRouter,\r\n    NavigateToLoginHoc\r\n)\r\n(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport let NavigateToLoginHoc = (Component) => { // оберточная компонента проверки на Login, оборачивающая целевую компоненту\r\n    class NavigateToLoginHocWithAuth extends React.Component { // внутренняя компонента уже с данными isAuth\r\n        render () {\r\n            if (!this.props.isAuth) { // условие что я не авторизован\r\n                return <Navigate to='../login'/>; // редирект на страницу Login\r\n            }\r\n            return <Component {...this.props}/> /// возврат целевой компоненты, если редиректа не было на Login\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(NavigateToLoginHocWithAuth)// добавляем в стейт флаги isAuth - \"я авторизован?\"\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};"],"names":["status","userId","myId","putStatusThunkCreator","SET_MODIFY_STATUS_TRUE","SET_MODIFY_STATUS_FALSE","useReducer","localState","action","type","modifyStatus2","statusTmpInput2","text","Error","dispatch","setMyStatus","bedug_mode","console","log","onDoubleClick","value","onChange","event","currentTarget","onBlur","autoFocus","placeholder","onKeyPress","charCode","profile","className","classes","alt","src","photos","small","userPhoto","aboutMe","contacts","facebook","vk","twitter","instagram","github","lookingForAJob","lookingForAJobDescription","fullName","Preloader","message","like","NewPostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","name","component","Textarea","validate","Required","maxLengthCreator","state","addPost","postElements","posts","map","p","id","formData","reset","newPostData","connect","profilePage","addPostActionCreator","MyPosts","ProfileRender","ScrollContainer","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","ProfileContainer","this","props","getProfileThunkCreator","prevProps","prevState","snapshot","React","compose","isAuth","auth","myID","Children","match","params","useParams","Number","NavigateToLoginHoc","input","meta","restProps","isError","touched","error","Input","maxLength","length","email","test","undefined","mapStateToProps","Component","NavigateToLoginHocWithAuth","to"],"sourceRoot":""}