{"version":3,"file":"static/js/114.0e7a6158.chunk.js","mappings":"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","sources":["components/Rest/Krestiki-Noliki/krestiki-noliki.jsx"],"sourcesContent":["import React from \"react\";\nimport \"./krestiki-noliki.css\";\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\n\nconst Square = (props) => {\n    // отрисовка квадрата (отдельной клетки)\n    return (\n        <button\n            className=\"square\" // класс кнопки/клетки\n            onClick={() => {\n                // по клику\n                props.handleSquare(props.i); // выполнить функцию из пропсов сверху\n            }}\n        >\n            {props.value} {/* значение внутри клетки X, O или пустота (null)*/}\n        </button>\n    );\n};\n\nclass Board extends React.Component {\n    // все игровое поле из 9 клеток\n    renderSquare(i) {\n        // обращение к отрисовке отдельной клетки Square\n        return (\n            <Square // отрисовать Square отдельную клетку\n                value={this.props.squares[i]} // значение X, O или пусто (null)\n                handleSquare={this.props.handleSquare} // обработчик кликов по кнопке, пришел сверху из пропсов\n                i={i} // номер текущей клетки\n            />\n        );\n    }\n\n    render() {\n        let status; // существует переменная status\n        const Winner = calculateWinner(this.props.squares); // проверка, появился ли победитель\n        if (this.props.history.length < 10) {\n            status = this.props.xIsNext ? \"Сейчас ходит: X \" : \"Сейчас ходит: O \";\n            // задать статусу кто ходит следующим X или O\n        }\n        if (Winner) {// определен победитель\n            status = \"Победитель: \" + Winner; // вывести победителя\n        }\n        if (this.props.history.length >= 10 && !Winner) {\n            status = \"Ничья\"; // заполнены все клетки и нет победителя\n        }\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {/*вывести статус в отрисовке*/}\n                <div className=\"board-row\">\n                    {this.renderSquare(0)} {/*задание 3 клеток с порядковым номером i*/}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {/*перенос строки, задание еще 3 клеток*/}\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {/*перенос строки, задание еще 3 клеток*/}\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    // функция определения победителя (squares - весь текущий массив клеток)\n    const lines = [\n        [0, 1, 2], // задание комбинаций a, b, c при которых определяется победитель\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let n = 0; n < lines.length; n = n + 1) {\n        // перебор элементов squares\n        const [a, b, c] = lines[n]; // переменным a, b, с присваивают поочередно\n        // комбинации возможной победы\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            // если комбинации победы совпадают с текущим расположением на поле\n            return squares[a]; // выводится текущий игрок (X или O) как победитель\n        }\n    }\n    return null; // если комбинации победы не совпадают, победитель не определен\n}\n\nclass KrestikiNoliki extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xIsNext: true, // что вводим X или O (true/false)\n            history: [{squaresNew: Array(9).fill(null)}] // массив объектов - истории ходов\n        };\n    }\n\n    handleSquare = (i) => {\n        // обработчик кликов\n        let currentStep = this.state.history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\n        let squaresNew = this.state.history[currentStep].squaresNew.slice(); // делаем копию текущего массива\n\n        const Winner = calculateWinner(squaresNew); // попытка определения победитея\n\n        if (squaresNew[i] || Winner) {\n            //если текущая кнопка ранее была заполнена, или победитель уже определен\n            return; // ничего не делаем\n        }\n        squaresNew[i] = this.state.xIsNext ? \"X\" : \"O\";\n        // заносим в массив текущего хода X или O в зависимости от xIsNext\n        this.setState({xIsNext: !this.state.xIsNext});\n        // передаем ход следующему игроку\n\n        const historyNew2 = this.state.history.concat({squaresNew});\n        // добавить в локальный массив historyNew2 данные из основного массива history и новый массив squaresNew\n\n        this.setState({history: historyNew2}); // внести в history обновленный  historyNew2\n    };\n\n    newGame = () => {\n        this.setState({\n            xIsNext: true,\n            history: [{squaresNew: Array(9).fill(null)}]\n        });\n\n    }\n\n    render() {\n        let currentStep = this.state.history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\n        let squaresNew = this.state.history[currentStep].squaresNew.slice(); // делаем копию текущего массива\n        return (\n            <div>\n                <h2 className={commonClasses.pageHeader}>Крестики нолики</h2>\n                <div>\n                    <Board\n                        squares={squaresNew} // пропсами передаем вглубь текущий массив клеток\n                        xIsNext={this.state.xIsNext} // статус кто ходит\n                        handleSquare={this.handleSquare} // обработчик кликов\n                        history={this.state.history}\n                    />\n                </div>\n                <div>\n                    <button className=\"new-game-button\" onClick={this.newGame}>Начать заново</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default KrestikiNoliki;\n\n\n"],"names":["Square","props","className","onClick","handleSquare","i","value","Board","this","squares","status","Winner","calculateWinner","history","length","xIsNext","renderSquare","React","lines","n","a","b","c","currentStep","state","squaresNew","slice","setState","historyNew2","concat","newGame","Array","fill","commonClasses"],"sourceRoot":""}