{"version":3,"file":"static/js/812.46972f73.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/DialogList/DialogList.module.css?a68d","webpack://my-app/./src/components/DialogList/Messages/Message/Message.module.css?536c","../node_modules/@restart/hooks/esm/useTimeout.js","../node_modules/react-bootstrap/esm/ToastFade.js","../node_modules/react-bootstrap/esm/ToastContext.js","../node_modules/react-bootstrap/esm/ToastHeader.js","../node_modules/react-bootstrap/esm/ToastBody.js","../node_modules/react-bootstrap/esm/Toast.js","components/DialogList/Messages/Message/MessageBS.jsx","components/DialogList/Messages/Message/MessagesElements.jsx","assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/DialogList/Messages/MessagesFormik/Dialog.module.css?4d1e","components/DialogList/Messages/MessagesFormik/DialogFormik.jsx","components/DialogList/Messages/MessagesRender.jsx","components/DialogList/Messages/MessagesContainer.jsx","components/DialogList/DialogList.jsx","components/DialogList/DialogListContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogList\":\"DialogList_dialogList__OAyfE\",\"dialogListHeader\":\"DialogList_dialogListHeader__r-d2s\",\"messagesHeader\":\"DialogList_messagesHeader__pDFpd\",\"knopka\":\"DialogList_knopka__uJ-qW\",\"dialogItemGreed\":\"DialogList_dialogItemGreed__D2-cZ\",\"dialog\":\"DialogList_dialog__T3CKZ\",\"dialogCurrent\":\"DialogList_dialogCurrent__ZenxF\",\"dialogImg\":\"DialogList_dialogImg__0wTiE\",\"FieldLeft\":\"DialogList_FieldLeft__q14p-\",\"buttonRight\":\"DialogList_buttonRight__BKC4M\",\"FieldButtonGreed\":\"DialogList_FieldButtonGreed__qaiyu\",\"dialogContainer\":\"DialogList_dialogContainer__6BqIM\",\"x\":\"DialogList_x__PwR4a\",\"BgStyle\":\"DialogList_BgStyle__2iEaj\",\"inputFixed\":\"DialogList_inputFixed__xsJy-\",\"photoFixed\":\"DialogList_photoFixed__KaeYd\",\"userPhoto\":\"DialogList_userPhoto__0CLsE\",\"linkNoDecoration\":\"DialogList_linkNoDecoration__hNHxk\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageCommon\":\"Message_messageCommon__qMUdJ\",\"timeStyle\":\"Message_timeStyle__X9YMc\",\"x\":\"Message_x__YcLwm\",\"messageswrapper\":\"Message_messageswrapper__Px3CS\",\"messagesCommon\":\"Message_messagesCommon__y3ALJ\",\"messageMyId\":\"Message_messageMyId__2lyA3\",\"messageNotMyId\":\"Message_messageNotMyId__wlQ5a\",\"insideToastMy\":\"Message_insideToastMy__uNjRB\",\"insideToastNotMy\":\"Message_insideToastNotMy__Z0gRy\",\"time\":\"Message_time__A+UPN\",\"closeButton\":\"Message_closeButton__YmmdJ\"};","import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\n\n\nexport default function useTimeout() {\n  var isMounted = useMounted(); // types are confused between node and web here IDK\n\n  var handleRef = useRef();\n  useWillUnmount(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return useMemo(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}","import * as React from 'react';\nimport { ENTERING, EXITING } from 'react-transition-group/Transition';\nimport Fade from './Fade';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst fadeStyles = {\n  [ENTERING]: 'showing',\n  [EXITING]: 'showing show'\n};\nconst ToastFade = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(Fade, {\n  ...props,\n  ref: ref,\n  transitionClasses: fadeStyles\n}));\nToastFade.displayName = 'ToastFade';\nexport default ToastFade;","import * as React from 'react';\nconst ToastContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onClose() {}\n});\nexport default ToastContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CloseButton from './CloseButton';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: true\n};\nconst ToastHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  closeLabel,\n  closeVariant,\n  closeButton,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-header');\n  const context = useContext(ToastContext);\n  const handleClick = useEventCallback(e => {\n    context == null ? void 0 : context.onClose == null ? void 0 : context.onClose(e);\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    className: classNames(bsPrefix, className),\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick,\n      \"data-dismiss\": \"toast\"\n    })]\n  });\n});\nToastHeader.displayName = 'ToastHeader';\nToastHeader.defaultProps = defaultProps;\nexport default ToastHeader;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('toast-body');","import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","import React from 'react';\nimport classes from './Message.module.css';\nimport Toast from 'react-bootstrap/Toast'\nimport CloseButton from \"react-bootstrap/CloseButton\";\n\nconst Message = ({message, myId, userId, Date, MessageId, deleteMessage}) => {\n\n    return <div> {/*className={classes.messageswrapper}разделить сообщения на мои и собеседника поровну (право-лево)*/}\n        <div\n            className={`${classes.messagesCommon} ${myId === userId ? classes.messageMyId : classes.messageNotMyId}`}>\n            {/*в зависимости от того кто пишет, доп стили к тексту*/}\n\n            <Toast className={myId === userId ?classes.insideToastMy:classes.insideToastNotMy}>\n                <Toast.Body>\n                    <div className='d-flex d-inline-block'>\n                        <big>{message} {/*сообщение */}</big>\n                        <div className={classes.time}>\n                            {Date.Hour}{\":\"}{Date.Minutes}\n                        </div>\n                            <CloseButton className={classes.closeButton}\n                                onClick={()=>{deleteMessage(MessageId)}}\n                            />\n                    </div>\n                </Toast.Body>\n            </Toast>\n\n        </div>\n    </div>\n}\n\nexport default Message;\n\n","import Message from \"./MessageBS\";\nimport React from \"react\";\n\nlet MessagesElements = ({messages2, myId, deleteMessage}) => messages2.map((m) => // подкомпонента отрисовки всех сообщений через map\n    <Message key={m.id+m.message} message={m.message} myId={myId} userId={m.userId} Date={m.Date} MessageId={m.id}\n             deleteMessage={deleteMessage}/>);\n\nexport default MessagesElements\n","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.bf250e69b5830be8d34d1dd3f2cbf9ac.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"Dialog_legendStyle__fzS7X\",\"fieldSetStyle\":\"Dialog_fieldSetStyle__IEFn0\",\"sendSwg\":\"Dialog_sendSwg__vWWca\"};","import React from \"react\";\r\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\r\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\r\nimport {MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport sendSwg from \"../../../../assets/images/swg/send-svg2.svg\"\r\nimport classes from \"./Dialog.module.css\"\r\n\r\nlet myInitialValues = { // начальные зачения форм\r\n    newMessage: \"\",\r\n}\r\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\r\n})\r\n\r\nconst DialogFormik = ({sendMessage, scrollBottom}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\r\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\r\n        sendMessage(values.newMessage) // колбек, который принмает результат ввода формы\r\n        resetForm()// сбросить значение формы после ввода\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={myInitialValues}\r\n                validationSchema={myValidationSchema}\r\n                onSubmit={myOnSubmit}\r\n            >\r\n                {({\r\n                      handleReset,// обнуление полей\r\n                    values,\r\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\r\n                    <Form>\r\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\r\n                            <div  className='col-9'>\r\n                                <MyTextInput // сообщение в MyPostsBS\r\n                                    label=\"\"\r\n                                    name='newMessage'\r\n                                    type='text'\r\n                                    placeholder='Введите ваше сообщение'\r\n                                    autoFocus={true}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <Button variant={\"light\"} className={\"mx-2\"}\r\n                                        type=\"submit\" //кнопка отправить форму\r\n                                        onClick={scrollBottom} /*прокрутка вниз при добавлении нового сообщения*/\r\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\r\n                                >\r\n\r\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\r\n                                           title={'Отправить сообщение'}/>\r\n                                </Button>\r\n                            </div>\r\n{/*\r\n                            <div><Button onClick={()=>{history.back()}}>Prev</Button></div>\r\n*/}\r\n                        </div>\r\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogFormik\r\n\r\n","import classes from \"../DialogList.module.css\";\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport MessagesElements from \"./Message/MessagesElements\";\nimport DialogFormik from \"./MessagesFormik/DialogFormik\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport {NavLink} from \"react-router-dom\";\n\nconst MessagesRender = ({messages2, myId, deleteMessage, sendMessage, scrollBottom, profilePage}) => {\n\n    const messagesProfileRender = <div className={classes.photoFixed}>\n        {/*спозиционированный сверху иконку человека, с кем общаюсь*/}\n        {profilePage.profile &&  // если профиль пользователя уже загружен\n        <NavLink to={`/profile/${profilePage.profile.userId}`}> {/*при клике переход на профиль собеседника*/}\n            <Image // картинка аватар собеседника\n                src={profilePage.profile.photos.small?profilePage.profile.photos.small:userPhoto}\n                className={classes.userPhoto}\n                title={\"Перейти в профиль\"}\n                alt={\"Перейти в профиль\"}\n            />\n            <span className={classes.linkNoDecoration}>{profilePage.profile.fullName}</span>\n        </NavLink>\n        }\n    </div>\n\n    return <div className={classes.BgStyle}>\n        <Row>\n            <MessagesElements // отрисовка сообщений\n                messages2={messages2} // сообщения\n                myId={myId} // мой ID\n                deleteMessage={deleteMessage} // функйцию удаления сообщений\n            />\n        </Row>\n\n        {messagesProfileRender}\n        {/*спозиционированная полоска сверку сообщений с иконкой собеседникой и ссылкой на его профиль*/}\n\n        <div className={classes.inputFixed}> {/*спозиционированный снизу инпут и кнопка ввода сообщений*/}\n            <div>\n                <DialogFormik\n                    sendMessage={sendMessage}\n                    scrollBottom={scrollBottom}\n                /> {/*вызов формы сообщений*/}\n            </div>\n        </div>\n\n    </div>\n}\nexport default MessagesRender\n","import React from 'react';\r\nimport {\r\n    deleteMessageThunkCreator,\r\n    sendDialogsThunkCreator,\r\n    updateDialogListThunkCreator\r\n} from \"../../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport withRouter2 from \"../../hoc/withRouter2\";\r\nimport MessagesRender from \"./MessagesRender\";\r\n\r\nclass MessagesContainer extends React.Component {\r\n\r\n    sendMessage = (NewMessage) => { // отправка сообщения\r\n        if (!this.props.userId) { // при клике просто по вкладке DialogList\r\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\r\n            return\r\n        }\r\n        if (!NewMessage) { // при клике просто по вкладке DialogList\r\n            return // не реагировать на пустые сообщения\r\n        }\r\n\r\n        let profilePage = this.props.profilePage // локальный стейт страницы пользователя\r\n        let userName = 0 // задаем переменную имени пользователя\r\n        let userPhoto = 0 // и его фото для отображения в диалоглисте\r\n        if (profilePage !== null) { // если профиль пользователя уже загружен\r\n            userName = this.props.profilePage.profile.fullName; // переопределить имя пользователя\r\n            userPhoto = this.props.profilePage.profile.photos.small; // и его фото и стейта\r\n        }\r\n\r\n        this.props.sendDialogsThunkCreator( // отправить сообщение\r\n            NewMessage,\r\n            this.props.auth.myId, // мой ID для формирования DialogList собеседника\r\n            this.props.auth.myLogin, // мой логин  для формирования DialogList собеседника\r\n            this.props.auth.myProfile.photos.small, // мое фото  для формирования DialogList собеседника\r\n            this.props.userId, // ID собеседника для формирования моего DialogList\r\n        ); // отправить сообщение\r\n\r\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\r\n            this.props.auth.myId, // мой ID\r\n            this.props.userId, // ID с кем веду диалог\r\n            userName, // его имя\r\n            userPhoto // и фото\r\n        )\r\n    }\r\n\r\n    deleteMessage = (messageID) => { // удалить сообщение по его ID в списке\r\n        this.props.deleteMessageThunkCreator(messageID, this.props.myId, this.props.userId);\r\n    }\r\n\r\n    scrollBottom = () => {\r\n        const scrollHeight = Math.max(\r\n            document.body.scrollHeight, document.documentElement.scrollHeight,\r\n            document.body.offsetHeight, document.documentElement.offsetHeight,\r\n            document.body.clientHeight, document.documentElement.clientHeight\r\n        );\r\n        window.scrollTo(0, scrollHeight)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <MessagesRender\r\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\r\n                myId={this.props.myId} // мой ID\r\n                deleteMessage = {this.deleteMessage} // удалить сообщение\r\n                sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\r\n                scrollBottom={this.scrollBottom}\r\n                profilePage={this.props.profilePage}\r\n        />\r\n        </div>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\r\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\r\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\r\n        profilePage: state.profilePage, // страница профиля пользователя для создания dialogList\r\n        auth: state.auth,// страница моего профиля для создания dialogList\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,\r\n        {\r\n            sendDialogsThunkCreator,//санкреатор отправки нового сообщения в диалог\r\n            deleteMessageThunkCreator,//санкреатор удаления сообщения из далога\r\n            updateDialogListThunkCreator,//санкреатор обновления диалогЛиста (моего когда я пишу кому то сообщение) - запись в localStorage.\r\n        }\r\n    ),\r\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\r\n)\r\n(MessagesContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react'; // импорт реакта\nimport classes from './DialogList.module.css';// css обработка\nimport DialogItem from \"./DialogItem\";// подкомпонента отрисовки диалогов через map\nimport userPhotoAva from \"../../assets/images/no-image3.png\";\nimport MessagesContainer from \"./Messages/MessagesContainer\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst DialogList = ({deleteDialog, dialogUserID, getDialogList, dialogs2,\n                     getDialogLastUpdateTime}) => { // основная компонента отрисовки диалогов\n\n/*    let dialogElements = dialogs2.map((d) => // подкомпонента отрисовки всех диалогов через map\n        {\n            let userPhoto = d.userPhoto ? d.userPhoto : userPhotoAva; // если аватарки с сервера нет, подставить заглушку\n            return <DialogItem key={d.userId} userName={d.userName} userId={d.userId}\n                               userPhoto={userPhoto} dialogUserID={dialogUserID}\n                               deleteDialog={deleteDialog} dialogId={d.dialogId}\n            />\n        }\n    );\n        const DialogListRender = () => {\n            return <div>\n                <div className={classes.dialogContainer}>\n                    {dialogElements} {/!*отрисовка диалогов*!/}\n                </div>\n            </div>\n        }*/\n\n    useEffect(() => { // при очередном ререндере\n        const id = setInterval(() => { // задать цикл с интервалом в 1 сек\n            getDialogLastUpdateTime() // получить время обновления текущего диалога\n            getDialogList()// получить диалогЛист (мне кто то написал, или я начал диалог)\n        }, 1000)\n        return (() => {\n            clearInterval(id)\n        }) // для сброса цикла при очередном рендере\n    }, [getDialogLastUpdateTime, getDialogList]) // useEffect без зависимостей\n\n\n    return (\n        <Row>\n            {/* <Col><DialogListRender/></Col> {/*отрисовка диалоглиста*/}\n\n            <Col>\n                <MessagesContainer/> {/*отрисовка сообщений*/}\n            </Col>\n        </Row>\n    )\n}\nexport default DialogList;\n\n","import React from 'react';\nimport DialogList from \"./DialogList\";\nimport {\n    deleteDialogThunkCreator,\n    getDialogLastUpdateTimeTnkCrt,\n    getDialogsThunkCreator, getFollowThunkCreator, getMyDialogListThunkCreator,\n    setdialogUserID,\n    setMessages\n} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getProfileThunkCreator} from \"../../redux/profile-reducer\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport withRouter2 from \"../hoc/withRouter2\";\n\nclass DialogListContainer extends React.Component {\n    commonPartMountUpdate = () => {// общая часть для componentDidMount и componentDidUpdate\n        if (!this.props.userId) { // если перешли на вкладку DialogList с нулевым userId\n            if (this.props.messages2.length>0) { // если массив сообщений непустой\n                this.props.setMessages([]); // занулить массив сообщений (очистить список сообщений)\n                this.props.setdialogUserID(null) // занулить userId (убрать выделение диалога)\n            }\n            return\n        }\n        if ( this.props.dialogUserID!==this.props.userId) { // если считаный из URL userId не равен тому, что в BLL\n            this.props.setdialogUserID(this.props.userId) // задать в BLL считаный из URL ID\n            //здесь запросить профиль выбранного userId через getProfileThunkCreator\n            this.props.getProfileThunkCreator(this.props.userId, true, this.props.myId)// при переходе в диалог любого пользователя считать его данные профиля с сервера\n        }\n\n    }\n    componentDidMount() {\n        this.getDialogList()\n        //      console.log(\"DialogListContainer -> componentDidMount\")\n        this.commonPartMountUpdate();// общая часть для componentDidMount и componentDidUpdate\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //       console.log(\"DialogListContainer -> componentDidUpdate\")\n        this.commonPartMountUpdate(); // общая часть для componentDidMount и componentDidUpdate\n        if  (this.props.dialogLastUpdateTime!==prevProps.dialogLastUpdateTime) { // если время обновления диалога изменилось\n            this.getDialogs()// запросить новые сообщения по диалогу\n        }\n    }\n\n    getDialogs = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке DialogList\n        this.props.getDialogsThunkCreator(this.props.myId, this.props.userId);// получить диалоги\n    }\n\n    getDialogLastUpdateTime = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке DialogList\n        this.props.getDialogLastUpdateTimeTnkCrt(this.props.myId, this.props.userId); // получить время последенего обновления диалога\n    }\n\n    getDialogList = () => {\n        this.props.getMyDialogListThunkCreator(this.props.myId)\n    }\n\n/*\n    sendMessage = (NewMessage) => { // отправка сообщения\n        if (!this.props.userId) { // при клике просто по вкладке DialogList\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\n            return\n        }\n        if (!NewMessage) { // при клике просто по вкладке DialogList\n            return // не реагировать на пустые сообщения\n        }\n\n        let profilePage = this.props.profilePage // локальный стейт страницы пользователя\n        let userName = 0 // задаем переменную имени пользователя\n        let userPhoto = 0 // и его фото для отображения в диалоглисте\n        if (profilePage!==null) { // если профиль пользователя уже загружен\n            userName = this.props.profilePage.profile.fullName; // переопределить имя пользователя\n            userPhoto = this.props.profilePage.profile.photos.small; // и его фото и стейта\n        }\n\n        this.props.sendDialogsThunkCreator( // отправить сообщение\n            NewMessage,\n            this.props.auth.myId, // мой ID для формирования DialogList собеседника\n            this.props.auth.myLogin, // мой логин  для формирования DialogList собеседника\n            this.props.auth.myProfile.photos.small, // мое фото  для формирования DialogList собеседника\n            this.props.userId, // ID собеседника для формирования моего DialogList\n        ); // отправить сообщение\n\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\n            this.props.auth.myId, // мой ID\n            this.props.userId, // ID с кем веду диалог\n            userName, // его имя\n            userPhoto // и фото\n        )\n        //userId1, userId2, Name2, Photo2\n    }\n*/\n\n/*    deleteMessage = (messageID) => { // удалить сообщение по его ID в списке\n        this.props.deleteMessageThunkCreator(messageID, this.props.myId, this.props.userId);\n    }*/\n\n    deleteDialog = (dialogId, userId2) => {\n        this.props.deleteDialogThunkCreator(dialogId, this.props.myId, userId2)\n        // здесь сменить URL без ID\n    }\n\n    render () {\n        return <div>\n            <DialogList\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\n                dialogs ={this.props.dialogs} // список диалогов\n                dialogs2 ={this.props.dialogs2} // список диалогов с LocalStorage\n                {...this.props} // все входящие пропсы пробросили дальше\n             //   sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\n                getDialogs={this.getDialogs}  // проброс местного метода получить диалоги\n                getDialogLastUpdateTime={this.getDialogLastUpdateTime} // проброс метода - получить время обновления текущего диалога\n                myId={this.props.myId} // мой ID\n             //   deleteMessage = {this.deleteMessage} // удалить сообщение\n                getDialogList={this.getDialogList} // периодическая проверка написал ли кто мне, или я с кем диалог начал\n                dialogUserID = {this.props.dialogUserID}\n                deleteDialog = {this.deleteDialog}\n            />\n        </div>\n    }\n}\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // флаг, авторизован ли я сейчас,\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n  //      dialogs: state.dialogsPage.dialogs, // список диалогов\n        dialogLastUpdateTime: state.dialogsPage.dialogLastUpdateTime,// время последнего времени обновления текущего диалога\n        dialogs2: state.dialogsPage.dialogs2, // список диалогов с LocalStorage\n        profilePage:state.profilePage, // страница профиля пользователя для создания dialogList\n        auth: state.auth,// страница моего профиля для создания dialogList\n     //   editProfileStatus: state.auth.editProfileStatus // ошибка правки формы профиля\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps,\n        {\n        //    sendDialogsThunkCreator,//санкреатор отправки нового сообщения в диалог\n            getDialogsThunkCreator,//санкреатор получения диалогов с данными\n            setdialogUserID, // экшнкреатор задания списка сообщений в стейт messages2\n            setMessages,// экшнкреатор задания списка сообщений в стейт messages2\n            getDialogLastUpdateTimeTnkCrt,//санкреатор получения диалогов с данными\n         //   deleteMessageThunkCreator,//санкреатор удаления сообщения из далога\n            getProfileThunkCreator,// санкреатор на получение профиля выбранного пользователя\n            getFollowThunkCreator,//санкреатор проверки follow/unfollow выбранного юзера для составления списка диалогов\n            getMyDialogListThunkCreator,//санкреатор получения моего диалогЛиста\n          //  updateDialogListThunkCreator,//санкреатор обновления диалогЛиста (моего когда я пишу кому то сообщение) - запись в localStorage.\n            deleteDialogThunkCreator, //санкреатор удаления диалога из диалогЛиста\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2 // проверка, залогинен ли я\n)\n(DialogListContainer);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["MAX_DELAY_MS","Math","pow","setChainedTimeout","handleRef","fn","timeoutAtMs","delayMs","Date","now","current","setTimeout","useTimeout","isMounted","useMounted","useRef","useWillUnmount","clearTimeout","useMemo","clear","set","fadeStyles","ENTERING","EXITING","ToastFade","React","props","ref","_jsx","Fade","transitionClasses","displayName","onClose","ToastHeader","bsPrefix","closeLabel","closeVariant","closeButton","className","children","useBootstrapPrefix","context","useContext","ToastContext","handleClick","useEventCallback","e","_jsxs","classNames","CloseButton","variant","onClick","defaultProps","createWithBsPrefix","Toast","transition","Transition","show","animation","delay","autohide","bg","delayRef","onCloseRef","useEffect","autohideTimeout","autohideToast","autohideFunc","useCallback","toastContext","hasAnimation","toast","role","value","in","unmountOnExit","Object","assign","Body","ToastBody","Header","message","myId","userId","MessageId","deleteMessage","classes","Hour","Minutes","messages2","map","m","id","myInitialValues","newMessage","myValidationSchema","Yup","sendMessage","scrollBottom","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","label","name","type","placeholder","autoFocus","Button","disabled","Image","src","sendSwg","alt","title","profilePage","messagesProfileRender","profile","to","photos","small","userPhoto","fullName","Row","MessagesContainer","NewMessage","userName","sendDialogsThunkCreator","auth","myLogin","myProfile","updateDialogListThunkCreator","alert","messageID","deleteMessageThunkCreator","scrollHeight","max","document","body","documentElement","offsetHeight","clientHeight","window","scrollTo","this","compose","connect","state","dialogUserID","dialogsPage","withRouter2","deleteDialog","getDialogList","getDialogLastUpdateTime","dialogs2","setInterval","clearInterval","Col","DialogListContainer","commonPartMountUpdate","setdialogUserID","getProfileThunkCreator","length","setMessages","getDialogs","getDialogsThunkCreator","getDialogLastUpdateTimeTnkCrt","getMyDialogListThunkCreator","dialogId","userId2","deleteDialogThunkCreator","prevProps","prevState","snapshot","dialogLastUpdateTime","dialogs","isAuth","getFollowThunkCreator","NavigateToLoginHoc2"],"sourceRoot":""}