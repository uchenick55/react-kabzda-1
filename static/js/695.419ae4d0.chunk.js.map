{"version":3,"file":"static/js/695.419ae4d0.chunk.js","mappings":"yPAQMA,EAAkB,CACpBC,WAAY,IAEVC,EAAqBC,EAAAA,GAAW,CAAE,GA0DxC,EA/CsD,SAAHC,GAAmC,IAA9BC,EAAWD,EAAXC,YAAuBD,EAAVE,WAMjE,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACHC,cAAeX,EACfY,iBAAkBV,EAClBW,SAVO,SAACC,EAAiBC,GAA0D,IAAvDC,EAASD,EAATC,UACpCX,EAAYS,EAAOb,YACnBe,GACJ,EAOiCP,SAGpB,kBACGQ,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAT,SAAA,EACDQ,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACIF,EAAAA,EAAAA,KAACY,EAAAA,GAAY,CACTC,MAAM,wFACNC,WAAW,EACXC,KAAK,aACLC,KAAK,OACLC,YAAY,6HACZC,gBAAiB,GACjBnB,YAAc,KAKlBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACC,UAAU,WAAWC,IAAK,EAAGC,UAAW,OAAOpB,UAClDQ,EAAAA,EAAAA,MAACa,EAAAA,EAAM,CAACP,KAAK,SAAQd,SAAA,CAAC,IAA6B,kBAM3DF,EAAAA,EAAAA,KAAA,YAEG,KAO3B,EC5DMwB,EAAqB,WAEvB,IAAMC,GAAoCC,EAAAA,EAAAA,KAAa,SAACC,GAAsB,OAAKA,EAAMC,KAAKH,QAAQ,IAYhGI,GAAYC,EAAAA,EAAAA,QAAuB,MAMzC,OAJAC,EAAAA,EAAAA,YAAU,YAZS,WACf,IAKoDC,EALpDnC,EAIIgC,EAAUI,QAHVC,EAAYrC,EAAZqC,aACAC,EAAYtC,EAAZsC,aAGAD,GAFSrC,EAATuC,UAE4BD,EAAe,MAC1B,QAAjBH,EAAAH,EAAUI,eAAO,IAAAD,GAAjBA,EAAmBK,SAAS,EAAGH,GAEvC,CAIII,EACJ,GAAG,CAACb,KAEGzB,EAAAA,EAAAA,KAAA,OACHuC,IAAKV,EAEGW,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAQxC,SAGnDuB,EAASkB,KAAK,SAACC,EAA2BC,GACvC,OAAO7C,EAAAA,EAAAA,KAAC8C,EAAO,CAAaF,QAASA,GAAhBC,EACzB,KAER,EAEMC,EAAmD,SAAHtC,GAAmB,IAAdoC,EAAOpC,EAAPoC,QACvD,OAAO5C,EAAAA,EAAAA,KAAA,OAAAE,UACHQ,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAK+C,IAAKH,EAAQI,MAAOC,IAAI,SAAST,MAAO,CAACC,OAAQ,WACtDzC,EAAAA,EAAAA,KAAA,KAAAE,SAAI0C,EAAQM,WAAc,IAAKN,EAAQA,SACvC5C,EAAAA,EAAAA,KAAA,aAGZ,EAEMmD,EAAwB,WAG1B,IAAMC,GAAmC1B,EAAAA,EAAAA,KAAa,SAACC,GAAsB,OAAKA,EAAMC,KAAKwB,aAAa,IAE1GC,GAA8BC,EAAAA,EAAAA,UAAkB,IAAIC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,GAAFF,EAAA,GAAYA,EAAA,IACpBG,GAAWC,EAAAA,EAAAA,MAEX7D,EAAc,SAAC8C,GACjBA,GAAWc,GAAUE,EAAAA,EAAAA,IAAiBhB,IACtCA,GAAWa,EAAY,GAC3B,EAQM1D,EAA+B,UAAlBqD,EACnB,OAAOpD,EAAAA,EAAAA,KAAA,OAAAE,UACHF,EAAAA,EAAAA,KAAC6D,EAAiB,CAAC/D,YAAaA,EAAaC,WAAYA,KASjE,EAkBA,EAhBuB,WAGnB,IAAM2D,GAAWC,EAAAA,EAAAA,MAQjB,OAPA5B,EAAAA,EAAAA,YAAW,WAEP,OADA2B,GAAUI,EAAAA,EAAAA,OACH,WACHJ,GAAUK,EAAAA,EAAAA,OACVL,EAASM,EAAAA,GAAAA,sBACb,CACJ,GAAG,KACItD,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACHF,EAAAA,EAAAA,KAACwB,EAAQ,IAAE,KACXxB,EAAAA,EAAAA,KAACmD,EAAW,IAAE,MAEtB,E,oBCtFA,GAAec,EAAAA,EAAAA,IACXC,EAAAA,EADJ,EAL+B,WAC3B,OAAOlE,EAAAA,EAAAA,KAAA,OAAAE,UACFiE,EAAAA,EAAAA,UAAQ,kBAAInE,EAAAA,EAAAA,KAACoE,EAAI,GAAE,GAAC,KAE7B,G,4ECJMC,EAAkB,SAAC1C,GACrB,MAAO,CACH2C,OAAQ3C,EAAM4C,KAAKD,OAE3B,EAaA,IAX4B,SAACE,GAQzB,OAAOC,EAAAA,EAAAA,IAAQJ,EAAiB,KAAzBI,EAP6B,SAACC,GACjC,OAAKA,EAAMJ,QAGJtE,EAAAA,EAAAA,KAACwE,GAASG,EAAAA,EAAAA,GAAA,GAAKD,KAFX1E,EAAAA,EAAAA,KAAC4E,EAAAA,GAAQ,CAACC,GAAG,YAG5B,GAGJ,C,yICRe,SAASC,EAAuBC,GAA0F,IAA3EC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,EAAAA,GAAqBC,EAAaJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGK,EAAAA,GACzGC,EAAU,GAgBhB,OAfAC,OAAOC,QAAQV,GAAeW,SAAQ,SAAA7F,GAA2B,IAAAW,GAAAgD,EAAAA,EAAAA,GAAA3D,EAAA,GAAzB8F,EAAQnF,EAAA,GAAEoF,EAASpF,EAAA,GACxC,MAAboF,IACuB,kBAAdA,EACTZ,EAAYU,SAAQ,SAAAG,GAClB,IAAMC,EAAUF,EAAUC,GAC1B,GAAe,MAAXC,EAAiB,CACnB,IAAMC,EAAQF,IAAaR,EAAgB,IAAHW,OAAOH,GAAa,GAC5DN,EAAQU,KAAK,GAADD,OAAIL,GAAQK,OAAGD,EAAK,KAAAC,OAAIF,GACtC,CACF,IAEAP,EAAQU,KAAK,GAADD,OAAIL,EAAQ,KAAAK,OAAIJ,IAGlC,IACOL,CACT,C,+DCzBMpE,EAAqB+E,EAAAA,YAAiB,SAAArG,EAOzC0C,GAAQ,IAAA4D,EAAAtG,EANTuG,GAAI5B,OAAS,IAAA2B,EAAG,MAAKA,EACrBE,EAAQxG,EAARwG,SACA/E,EAASzB,EAATyB,UACAF,EAASvB,EAATuB,UACAC,EAAGxB,EAAHwB,IACGqD,GAAK4B,EAAAA,EAAAA,GAAAzG,EAAA0G,GAERF,GAAWG,EAAAA,EAAAA,IAAmBH,EAAwB,eAAdjF,EAA6B,SAAW,UAChF,IAAM4D,GAAcyB,EAAAA,EAAAA,MACdpB,GAAgBqB,EAAAA,EAAAA,MACtB,OAAoB1G,EAAAA,EAAAA,KAAKwE,GAASG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7BD,GAAK,IACRnC,IAAKA,EACLjB,UAAWqF,IAAAA,WAAW,EAAD,CAACrF,EAAW+E,GAAQL,QAAAY,EAAAA,EAAAA,GAAK9B,EAAuB,CACnEzD,IAAAA,GACC2D,EAAaK,QAEpB,IACAlE,EAAM0F,YAAc,QACpB,O","sources":["components/Chat/AddMessages/AddMessagesFormikBS.tsx","components/Chat/Chat.tsx","components/Chat/ChatContainer.tsx","components/hoc/NavigateToLoginHoc2.jsx","../node_modules/react-bootstrap/esm/createUtilityClasses.js","../node_modules/react-bootstrap/esm/Stack.js"],"sourcesContent":["import React from \"react\";\nimport {Formik, Form, FormikHelpers} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Stack from \"react-bootstrap/Stack\";\n\nconst myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype MyPostsFormikType = {\n    sendMessage: (newMessage:string) => void,\n    isDisabled: boolean\n\n}\ntype ValuesType = {\n    newMessage: string\n}\nconst AddMessagesFormik:React.FC<MyPostsFormikType> = ({sendMessage, isDisabled}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:ValuesType, {resetForm}:FormikHelpers<{ newMessage: string; }>) => { // действия по сабмиту\n        sendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {() => (\n                    <Form>\n                        <div>\n                            <MyTextInput // сообщение в MyPostsBS\n                                label=\"Новое сообщение\"\n                                autoFocus={false}\n                                name='newMessage'\n                                type='text'\n                                placeholder='Введите ваше сообщение'\n                                leftLabelLength={\"\"}\n                                isDisabled = {false}\n                            />\n\n\n                            {/*кнопка сброса к значениям по умолчанию*/}\n                            <Stack direction=\"vertical\" gap={1} className={'mt-2'}>\n                                <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                                    Submit\n                                </Button>\n                            </Stack>\n\n                        </div>\n                        <div/>\n                        {/*  <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n\n                )}\n\n            </Formik>\n        </>\n    )\n}\n\nexport default AddMessagesFormik\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {ChannelStatusType, ChatMessagesType} from \"../api/chat-api\";\nimport {chatActions, sendMessageThCr, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\nimport AddMessagesFormik from \"./AddMessages/AddMessagesFormikBS\";\n\nconst Messages: React.FC = () => { // отрисовка всех сообщений\n   // console.log(\">>>>>>>>>>>>>>Messages\")\n    const messages: Array<ChatMessagesType> = useSelector( (state: GlobalStateType) => state.chat.messages ) // получить сообщения из стейта\n\n    const autoScroll = () => {\n        const {\n            scrollHeight, // высота всего контента с учетом прокрутки\n            offsetHeight,// высота видимого содержимого без прокрутки\n            scrollTop } = // высота, насколько прокручен контент\n            container.current as HTMLDivElement\n        if (scrollHeight <= scrollTop + offsetHeight + 100) {\n            container.current?.scrollTo(0, scrollHeight)\n        }\n    }\n    const container = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        autoScroll()\n    }, [messages])\n\n    return <div\n        ref={container}\n       // ref={ref}\n                style={{height: \"20rem\", overflowY: \"auto\"}}\n    >\n\n        {messages.map( (message: ChatMessagesType, index: number) => { // пробегаем по списку сообщений из стейта\n            return <Message key={index} message={message}/> // отрисовываем сообщения поэлементно\n        } )}\n    </div>\n}\n\nconst Message: React.FC<{ message: ChatMessagesType }> = ({message}) => { // отрисовка одного сообщения (фото, тела и имени пользователя)\n    return <div>\n        <div>\n            <img src={message.photo} alt=\"avatar\" style={{height: \"30px\"}}/>\n            <b>{message.userName}</b>{\" \"}{message.message}\n            <hr/>\n        </div>\n    </div>\n}\n\nconst AddMessages: React.FC = () => {\n  //  console.log(\">>>>>>>>>>>>>>AddMessages\")\n\n    const channelStatus: ChannelStatusType = useSelector( (state: GlobalStateType) => state.chat.channelStatus ) // получить статус открытия канала\n\n    const [message, setMessage] = useState<string>( \"\" ) // константа временного хранилища значения поля ввода\n    const dispatch = useDispatch()\n\n    const sendMessage = (message:string) => { // колбек отправеки сообщений\n        message && dispatch( sendMessageThCr( message ) ) // отправить сообщение\n        message && setMessage( \"\" ) // занулить поле ввода\n    }\n\n    const checkEnterPressed = (e: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (e.charCode === 13) {\n            sendMessage(message)\n        }\n    }\n\n    const isDisabled = channelStatus !== \"ready\"\n    return <div>\n        <AddMessagesFormik sendMessage={sendMessage} isDisabled={isDisabled}/>\n{/*\n        <input disabled={isDisabled} value={message} onChange={(e) => setMessage( e.target.value )}\n               style={{width: \"50rem\"}}\n               onKeyPress={(e) => checkEnterPressed( e )} // проверка нажатия Enter\n        />\n        <button onClick={()=>sendMessage(message)} disabled={isDisabled}>Send </button> отправка сообщений\n*/}\n    </div>\n}\n\nconst Chat: React.FC = () => {\n  //  console.log(\">>>>>>Chat\")\n\n    const dispatch = useDispatch()\n    useEffect( () => {\n        dispatch( startMessagesListening() )// открытие канала WS, создание подписок и слушателей событий\n        return () => {\n            dispatch( stopMessagesListening() ) // закрытие канала WS, удаление подписок и слушателей событий\n            dispatch(chatActions.setChatInitialState()) // зануление стейта чата при размонтировании компоненты\n        }\n    }, [] )\n    return <div>\n        <Messages/> {/*отрисовка сообщений*/}\n        <AddMessages/> {/*ввод сообщений и кнопка отправки*/}\n    </div>\n}\nexport default Chat\n","import React, {useMemo} from \"react\";\nimport Chat from \"./Chat\";\nimport {compose} from \"redux\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\n\nconst ChatContainer:React.FC = () => {\n    return <div>\n        {useMemo(()=><Chat/>,[])}\n    </div>\n}\nexport default compose<React.ComponentType>(\n    NavigateToLoginHoc2// проверка, залогинен ли я\n)( ChatContainer )\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nconst NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import PropTypes from 'prop-types';\nimport { DEFAULT_BREAKPOINTS, DEFAULT_MIN_BREAKPOINT } from './ThemeProvider';\nexport function responsivePropType(propType) {\n  return PropTypes.oneOfType([propType, PropTypes.shape({\n    xs: propType,\n    sm: propType,\n    md: propType,\n    lg: propType,\n    xl: propType,\n    xxl: propType\n  })]);\n}\nexport default function createUtilityClassName(utilityValues, breakpoints = DEFAULT_BREAKPOINTS, minBreakpoint = DEFAULT_MIN_BREAKPOINT) {\n  const classes = [];\n  Object.entries(utilityValues).forEach(([utilName, utilValue]) => {\n    if (utilValue != null) {\n      if (typeof utilValue === 'object') {\n        breakpoints.forEach(brkPoint => {\n          const bpValue = utilValue[brkPoint];\n          if (bpValue != null) {\n            const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n            classes.push(`${utilName}${infix}-${bpValue}`);\n          }\n        });\n      } else {\n        classes.push(`${utilName}-${utilValue}`);\n      }\n    }\n  });\n  return classes;\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport createUtilityClassName, { responsivePropType } from './createUtilityClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Stack = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  direction,\n  gap,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, direction === 'horizontal' ? 'hstack' : 'vstack');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ref: ref,\n    className: classNames(className, bsPrefix, ...createUtilityClassName({\n      gap\n    }, breakpoints, minBreakpoint))\n  });\n});\nStack.displayName = 'Stack';\nexport default Stack;"],"names":["myInitialValues","newMessage","myValidationSchema","Yup","_ref","sendMessage","isDisabled","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_jsxs","Form","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","Stack","direction","gap","className","Button","Messages","messages","useSelector","state","chat","container","useRef","useEffect","_container$current","current","scrollHeight","offsetHeight","scrollTop","scrollTo","autoScroll","ref","style","height","overflowY","map","message","index","Message","src","photo","alt","userName","AddMessages","channelStatus","_useState","useState","_useState2","_slicedToArray","setMessage","dispatch","useDispatch","sendMessageThCr","AddMessagesFormik","startMessagesListening","stopMessagesListening","chatActions","compose","NavigateToLoginHoc2","useMemo","Chat","mapStateToProps","isAuth","auth","Component","connect","props","_objectSpread","Navigate","to","createUtilityClassName","utilityValues","breakpoints","arguments","length","undefined","DEFAULT_BREAKPOINTS","minBreakpoint","DEFAULT_MIN_BREAKPOINT","classes","Object","entries","forEach","utilName","utilValue","brkPoint","bpValue","infix","concat","push","React","_ref$as","as","bsPrefix","_objectWithoutProperties","_excluded","useBootstrapPrefix","useBootstrapBreakpoints","useBootstrapMinBreakpoint","classNames","_toConsumableArray","displayName"],"sourceRoot":""}