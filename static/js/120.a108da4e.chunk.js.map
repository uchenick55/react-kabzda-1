{"version":3,"file":"static/js/120.a108da4e.chunk.js","mappings":"2NAKMA,EAAI,qJAsBJ,OAtBI,oCACNC,MAAQ,CAEJC,KAAM,CAAEC,KAAM,IACdC,MAAO,QACPC,cAAe,SACjB,EAEFC,cAAgB,SAACC,GAEb,EAAKC,SAAS,CAAEH,cAAeE,EAAME,cAAcC,OAEvD,EAAE,EAEFC,cAAgB,WACZ,EAAKH,SAAS,CAAEJ,MAAO,EAAKH,MAAMI,eAEtC,EAAE,EAEFO,QAAU,SAACC,GAEP,MAAM,8CAAN,OAAqDA,EACzD,EAAC,EA8EA,OA9EA,uEAED,WAAaA,GAAK,4FAEOC,IAAMC,KAAKH,QAAQC,IAAQ,KAAD,EAAzCG,EAAM,OACZD,KAAKP,SAAS,CAAEN,KAAMc,EAAOd,OAAS,gDACzC,mDANA,IAMA,+BAED,WACIa,KAAKE,OAAOF,KAAKd,MAAMG,MAE3B,GAAC,gCAED,SAAmBc,EAAWC,GAEtBJ,KAAKd,MAAMG,QAAUe,EAAUf,OAE/BW,KAAKE,OAAOF,KAAKd,MAAMG,MAE/B,GAAC,oBAED,WAAU,IAAD,OACDgB,GAAK,4BACL,wBAAI,0BACJ,6BAEI,kBACIV,MAAOK,KAAKd,MAAMI,cAClBgB,SAAU,SAACd,GAEP,EAAKD,cAAcC,EACvB,KAEJ,mBACIe,QAAS,SAACC,GAENA,EAAEC,iBACF,EAAKb,eAET,EAAE,SACL,eAKL,wBACKI,KAAKd,MAAMC,KAAKC,OACb,yBACKY,KAAKd,MAAMC,KAAKC,KAAKsB,KAAI,SAEtBC,GAAC,OAED,0BACK,KAED,eAAGC,KAAMD,EAAEE,IAAI,UACVF,EAAEG,MACFH,EAAEI,iBALFJ,EAAEK,SAQN,WAMzB,OAAY,4BACJ,SAAC,IAAe,CACZC,MAAOZ,EACPa,OAAQC,OAAOC,OAAOC,YAAY,IAClCC,qBAAsB,UACtBC,sBAAuB,YACvBC,iBAAkB,kBACpB,MAKd,KAAC,EApGK,CAASC,EAAAA,WAsGnB,W","sources":["components/News/News.jsx"],"sourcesContent":["//Реализация async и await на классовых кмпонентах\r\nimport axios from \"axios\"; // библиотека асинхронных запросов\r\nimport React from \"react\";\r\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\"; // пишем в любой компоненте с JSX\r\n\r\nclass News extends React.Component {\r\n    state = {\r\n        // локальный стейт\r\n        data: { hits: [] }, // пока пустой массив, сюда придут данные с сервера\r\n        query: \"react\", // поисковый запрос\r\n        onChangeQuery: \"react\" // временное значение поиска, обновляется через onChange\r\n    };\r\n\r\n    inputOnChange = (event) => {\r\n        //\r\n        this.setState({ onChangeQuery: event.currentTarget.value });\r\n        // задаем временное значение стейта по onChange input\r\n    };\r\n\r\n    buttonOnClick = () => {\r\n        this.setState({ query: this.state.onChangeQuery }); // реакция на кнопку\r\n        //задание в поле поиска query значение из временного onChangeQuery\r\n    };\r\n\r\n    callURL = (props) => {\r\n        // вынесли в отдельнюю функцию получение URL запроса\r\n        return `https://hn.algolia.com/api/v1/search?query=${props}`;\r\n    };\r\n\r\n    async AsyncF(props) {\r\n        // асинхронный запрос\r\n        const result = await axios(this.callURL(props));\r\n        this.setState({ data: result.data }); // задание с массив hits данных с сервера\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.AsyncF(this.state.query);\r\n        // вызов асинхронного запроса по начальному значению поиска query\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // при ререндере\r\n        if (this.state.query !== prevState.query) {\r\n            // если запрос query изменился\r\n            this.AsyncF(this.state.query); // запрос по новым данным\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let hn = <div>\r\n            <h3>Search by HackerNews</h3>\r\n            <form>\r\n                {/* объединяем input и button*/}\r\n                <input // поле поиска\r\n                    value={this.state.onChangeQuery} // привязали value к значению из стейта\r\n                    onChange={(event) => {\r\n                        // при изменении\r\n                        this.inputOnChange(event); // задаем временное значение стейта по onChange input\r\n                    }}\r\n                />\r\n                <button // кнопка\r\n                    onClick={(e) => {\r\n                        // по клику\r\n                        e.preventDefault(); // отменяем действие по умолчанию (отправка формы)\r\n                        this.buttonOnClick();\r\n                        //задание в поле поиска query значение из временного onChangeQuery\r\n                    }}\r\n                >\r\n                    Search\r\n                </button>\r\n            </form>\r\n\r\n            <ul>\r\n                {this.state.data.hits &&\r\n                    <div>\r\n                        {this.state.data.hits.map((\r\n                            //мапим\r\n                            d\r\n                        ) => (\r\n                            <li key={d.objectID}>\r\n                                {\" \"}\r\n                                {/* key привязываем к map id*/}\r\n                                <a href={d.url} >\r\n                                    {d.title}\r\n                                    {d.story_title}\r\n                                </a>\r\n                                {/* список ссылок с URL*/}\r\n                            </li>\r\n                        ))}\r\n                    </div>\r\n                }\r\n            </ul>\r\n        </div>\r\n        return (    <div>\r\n                <ScrollContainer\r\n                    child={hn}\r\n                    height={window.screen.availHeight-218}\r\n                    firstInsideContainer={\"UsersUp\"}\r\n                    secondInsideContainer={\"UsersDown\"}\r\n                    containerElement={\"UserContainer\"}\r\n                /> {/*отрисовка Users в скрол контейнере*/}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default News;\r\n"],"names":["News","state","data","hits","query","onChangeQuery","inputOnChange","event","setState","currentTarget","value","buttonOnClick","callURL","props","axios","this","result","AsyncF","prevProps","prevState","hn","onChange","onClick","e","preventDefault","map","d","href","url","title","story_title","objectID","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","React"],"sourceRoot":""}