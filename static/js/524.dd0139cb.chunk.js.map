{"version":3,"file":"static/js/524.dd0139cb.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/DialogList/DialogList.module.css?a68d","webpack://my-app/./src/components/DialogList/Messages/Message/Message.module.css?536c","../node_modules/@restart/hooks/esm/useTimeout.js","../node_modules/react-bootstrap/esm/ToastFade.js","../node_modules/react-bootstrap/esm/ToastContext.js","../node_modules/react-bootstrap/esm/ToastHeader.js","../node_modules/react-bootstrap/esm/ToastBody.js","../node_modules/react-bootstrap/esm/Toast.js","components/DialogList/Messages/Message/MessageBS.jsx","components/DialogList/Messages/Message/MessagesElements.jsx","assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/DialogList/Messages/MessagesFormik/Dialog.module.css?4d1e","components/DialogList/Messages/MessagesFormik/DialogFormik.jsx","components/DialogList/Messages/MessagesRender.jsx","components/common/CommonClasses/ScrollBottom.jsx","components/DialogList/Messages/MessagesContainer.jsx","components/DialogList/DialogList.jsx","components/DialogList/DialogListContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogList\":\"DialogList_dialogList__-kM5Q\",\"dialogListHeader\":\"DialogList_dialogListHeader__Ghrx5\",\"messagesHeader\":\"DialogList_messagesHeader__jVdRL\",\"knopka\":\"DialogList_knopka__vbiLF\",\"dialogItemGreed\":\"DialogList_dialogItemGreed__2e91Z\",\"dialog\":\"DialogList_dialog__usWuR\",\"dialogCurrent\":\"DialogList_dialogCurrent__+1zl+\",\"dialogImg\":\"DialogList_dialogImg__0nnsL\",\"FieldLeft\":\"DialogList_FieldLeft__L01Nw\",\"buttonRight\":\"DialogList_buttonRight__Si1No\",\"FieldButtonGreed\":\"DialogList_FieldButtonGreed__t0V+a\",\"dialogContainer\":\"DialogList_dialogContainer__TA-RH\",\"x\":\"DialogList_x__yvTkJ\",\"BgStyle\":\"DialogList_BgStyle__bQObV\",\"photoFixed\":\"DialogList_photoFixed__u4+AK\",\"inputFixed\":\"DialogList_inputFixed__qlqSC\",\"userPhoto\":\"DialogList_userPhoto__Gv9DW\",\"linkNoDecoration\":\"DialogList_linkNoDecoration__u4kyp\",\"myLink\":\"DialogList_myLink__5+Icu\"};","// extracted by mini-css-extract-plugin\nexport default {\"messagesCommon\":\"Message_messagesCommon__WS2pF\",\"messageMyId\":\"Message_messageMyId__+mbtn\",\"messageNotMyId\":\"Message_messageNotMyId__5+CvR\",\"insideToastMy\":\"Message_insideToastMy__P6sDI\",\"insideToastNotMy\":\"Message_insideToastNotMy__meNqg\",\"time\":\"Message_time__4GQ5r\",\"closeButton\":\"Message_closeButton__OGOB3\"};","import { useMemo, useRef } from 'react';\nimport useMounted from './useMounted';\nimport useWillUnmount from './useWillUnmount';\n/*\n * Browsers including Internet Explorer, Chrome, Safari, and Firefox store the\n * delay as a 32-bit signed integer internally. This causes an integer overflow\n * when using delays larger than 2,147,483,647 ms (about 24.8 days),\n * resulting in the timeout being executed immediately.\n *\n * via: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\n\nvar MAX_DELAY_MS = Math.pow(2, 31) - 1;\n\nfunction setChainedTimeout(handleRef, fn, timeoutAtMs) {\n  var delayMs = timeoutAtMs - Date.now();\n  handleRef.current = delayMs <= MAX_DELAY_MS ? setTimeout(fn, delayMs) : setTimeout(function () {\n    return setChainedTimeout(handleRef, fn, timeoutAtMs);\n  }, MAX_DELAY_MS);\n}\n/**\n * Returns a controller object for setting a timeout that is properly cleaned up\n * once the component unmounts. New timeouts cancel and replace existing ones.\n *\n *\n *\n * ```tsx\n * const { set, clear } = useTimeout();\n * const [hello, showHello] = useState(false);\n * //Display hello after 5 seconds\n * set(() => showHello(true), 5000);\n * return (\n *   <div className=\"App\">\n *     {hello ? <h3>Hello</h3> : null}\n *   </div>\n * );\n * ```\n */\n\n\nexport default function useTimeout() {\n  var isMounted = useMounted(); // types are confused between node and web here IDK\n\n  var handleRef = useRef();\n  useWillUnmount(function () {\n    return clearTimeout(handleRef.current);\n  });\n  return useMemo(function () {\n    var clear = function clear() {\n      return clearTimeout(handleRef.current);\n    };\n\n    function set(fn, delayMs) {\n      if (delayMs === void 0) {\n        delayMs = 0;\n      }\n\n      if (!isMounted()) return;\n      clear();\n\n      if (delayMs <= MAX_DELAY_MS) {\n        // For simplicity, if the timeout is short, just set a normal timeout.\n        handleRef.current = setTimeout(fn, delayMs);\n      } else {\n        setChainedTimeout(handleRef, fn, Date.now() + delayMs);\n      }\n    }\n\n    return {\n      set: set,\n      clear: clear\n    };\n  }, []);\n}","import * as React from 'react';\nimport { ENTERING, EXITING } from 'react-transition-group/Transition';\nimport Fade from './Fade';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst fadeStyles = {\n  [ENTERING]: 'showing',\n  [EXITING]: 'showing show'\n};\nconst ToastFade = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(Fade, {\n  ...props,\n  ref: ref,\n  transitionClasses: fadeStyles\n}));\nToastFade.displayName = 'ToastFade';\nexport default ToastFade;","import * as React from 'react';\nconst ToastContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onClose() {}\n});\nexport default ToastContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CloseButton from './CloseButton';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: true\n};\nconst ToastHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  closeLabel,\n  closeVariant,\n  closeButton,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-header');\n  const context = useContext(ToastContext);\n  const handleClick = useEventCallback(e => {\n    context == null ? void 0 : context.onClose == null ? void 0 : context.onClose(e);\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    className: classNames(bsPrefix, className),\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick,\n      \"data-dismiss\": \"toast\"\n    })]\n  });\n});\nToastHeader.displayName = 'ToastHeader';\nToastHeader.defaultProps = defaultProps;\nexport default ToastHeader;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('toast-body');","import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","import React from 'react';\nimport classes from './Message.module.css';\nimport Toast from 'react-bootstrap/Toast'\nimport CloseButton from \"react-bootstrap/CloseButton\";\n\nconst Message = ({message, myId, userId, Date, MessageId, deleteMessage}) => {\n\n    return <div>\n        <div\n            className={`${classes.messagesCommon} ${myId === userId ? classes.messageMyId : classes.messageNotMyId}`}>\n            {/*в зависимости от того кто пишет, доп стили к тексту*/}\n\n            <Toast className={myId === userId ?classes.insideToastMy:classes.insideToastNotMy}>\n                <Toast.Body>\n                    <div className='d-flex d-inline-block'>\n                        <big>{message} {/*сообщение */}</big>\n                        <div className={classes.time}>\n                            {Date.Hour}{\":\"}{Date.Minutes}\n                        </div>\n                            <CloseButton className={classes.closeButton}\n                                onClick={()=>{deleteMessage(MessageId)}}\n                            />\n                    </div>\n                </Toast.Body>\n            </Toast>\n\n        </div>\n    </div>\n}\n\nexport default Message;\n\n","import Message from \"./MessageBS\";\r\nimport React from \"react\";\r\n\r\nlet MessagesElements = ({messages2, myId, deleteMessage}) => messages2.map((m) => // подкомпонента отрисовки всех сообщений через map\r\n    <Message key={m.id+m.message} message={m.message} myId={myId} userId={m.userId} Date={m.Date} MessageId={m.id}\r\n             deleteMessage={deleteMessage}/>);\r\n\r\nexport default MessagesElements\r\n","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.12d8e771d6d27bcd4485de69966afd04.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"Dialog_legendStyle__z97rp\",\"fieldSetStyle\":\"Dialog_fieldSetStyle__SCY0j\",\"sendSwg\":\"Dialog_sendSwg__38Jvm\"};","import React from \"react\";\r\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\r\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\r\nimport {MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport sendSwg from \"../../../../assets/images/swg/send-svg2.svg\"\r\nimport classes from \"./Dialog.module.css\"\r\n\r\nlet myInitialValues = { // начальные зачения форм\r\n    newMessage: \"\",\r\n}\r\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\r\n})\r\n\r\nconst DialogFormik = ({sendMessage, scrollBottom}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\r\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\r\n        sendMessage(values.newMessage) // колбек, который принмает результат ввода формы\r\n        resetForm()// сбросить значение формы после ввода\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={myInitialValues}\r\n                validationSchema={myValidationSchema}\r\n                onSubmit={myOnSubmit}\r\n            >\r\n                {({\r\n                      handleReset,// обнуление полей\r\n                    values,\r\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\r\n                    <Form>\r\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\r\n                            <div  className='col-9'>\r\n                                <MyTextInput // сообщение в MyPostsBS\r\n                                    label=\"\"\r\n                                    name='newMessage'\r\n                                    type='text'\r\n                                    placeholder='Введите ваше сообщение'\r\n                                   // autoFocus={true}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <Button variant={\"light\"} className={\"mx-2\"}\r\n                                        type=\"submit\" //кнопка отправить форму\r\n                                        onClick={scrollBottom} /*прокрутка вниз при добавлении нового сообщения*/\r\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\r\n                                >\r\n\r\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\r\n                                           title={'Отправить сообщение'}/>\r\n                                </Button>\r\n                            </div>\r\n{/*\r\n                            <div><Button onClick={()=>{history.back()}}>Prev</Button></div>\r\n*/}\r\n                        </div>\r\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DialogFormik\r\n\r\n","import classes from \"../DialogList.module.css\";\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport MessagesElements from \"./Message/MessagesElements\";\nimport DialogFormik from \"./MessagesFormik/DialogFormik\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport {NavLink} from \"react-router-dom\";\n\nconst MessagesRender = ({messages2, myId, deleteMessage, sendMessage, scrollBottom, profilePage}) => {\n\n    const messagesProfileRender = <div className={classes.photoFixed}>\n        {/*спозиционированный сверху иконку человека, с кем общаюсь*/}\n        {profilePage.profile &&  // если профиль пользователя уже загружен\n        <NavLink to={`/profile/${profilePage.profile.userId}`} className={classes.myLink} >\n            {/*при клике переход на профиль собеседника, ссылка без подчеркивания*/}\n            <Image // картинка аватар собеседника\n                src={profilePage.profile.photos.small?profilePage.profile.photos.small:userPhoto}\n                className={classes.userPhoto}\n                title={\"Перейти в профиль\"}\n                alt={\"Перейти в профиль\"}\n            />\n            <span>{profilePage.profile.fullName}</span>\n        </NavLink>\n        }\n    </div>\n\n    return <div className={classes.BgStyle}>\n        <Row>\n            <MessagesElements // отрисовка сообщений\n                messages2={messages2} // сообщения\n                myId={myId} // мой ID\n                deleteMessage={deleteMessage} // функйцию удаления сообщений\n            />\n        </Row>\n\n        {messagesProfileRender}\n        {/*спозиционированная полоска сверку сообщений с иконкой собеседникой и ссылкой на его профиль*/}\n\n        <div className={classes.inputFixed}> {/*спозиционированный снизу инпут и кнопка ввода сообщений*/}\n            <div>\n                <DialogFormik\n                    sendMessage={sendMessage}\n                    scrollBottom={scrollBottom}\n                /> {/*вызов формы сообщений*/}\n            </div>\n        </div>\n\n    </div>\n}\nexport default MessagesRender\n","\nconst ScrollBottom = () => {\n    const scrollHeight = Math.max(\n        document.body.scrollHeight, document.documentElement.scrollHeight,\n        document.body.offsetHeight, document.documentElement.offsetHeight,\n        document.body.clientHeight, document.documentElement.clientHeight\n    );\n    window.scrollTo(0, scrollHeight)\n}\nexport default ScrollBottom\n","import React from 'react';\nimport {\n    deleteMessageThunkCreator,\n    sendDialogsThunkCreator,\n    updateDialogListThunkCreator\n} from \"../../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport withRouter2 from \"../../hoc/withRouter2\";\nimport MessagesRender from \"./MessagesRender\";\nimport ScrollBottom from \"../../common/CommonClasses/ScrollBottom\";\n\nclass MessagesContainer extends React.Component {\n\n    sendMessage = (NewMessage) => { // отправка сообщения\n        if (!this.props.userId) { // при клике просто по вкладке DialogList\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\n            return\n        }\n        if (!NewMessage) { // при клике просто по вкладке DialogList\n            return // не реагировать на пустые сообщения\n        }\n\n        let profilePage = this.props.profilePage // локальный стейт страницы пользователя\n        let userName = 0 // задаем переменную имени пользователя\n        let userPhoto = 0 // и его фото для отображения в диалоглисте\n        if (profilePage !== null) { // если профиль пользователя уже загружен\n            userName = this.props.profilePage.profile.fullName; // переопределить имя пользователя\n            userPhoto = this.props.profilePage.profile.photos.small; // и его фото и стейта\n        }\n\n        this.props.sendDialogsThunkCreator( // отправить сообщение\n            NewMessage,\n            this.props.auth.myId, // мой ID для формирования DialogList собеседника\n            this.props.auth.myLogin, // мой логин  для формирования DialogList собеседника\n            this.props.auth.myProfile.photos.small, // мое фото  для формирования DialogList собеседника\n            this.props.userId, // ID собеседника для формирования моего DialogList\n        ); // отправить сообщение\n\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\n            this.props.auth.myId, // мой ID\n            this.props.userId, // ID с кем веду диалог\n            userName, // его имя\n            userPhoto // и фото\n        )\n    }\n\n    deleteMessage = (messageID) => { // удалить сообщение по его ID в списке\n        this.props.deleteMessageThunkCreator(messageID, this.props.myId, this.props.userId);\n    }\n\n    scrollBottom = () => {\n        return ScrollBottom()\n    }\n\n    render() {\n        return <div>\n            <MessagesRender\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\n                myId={this.props.myId} // мой ID\n                deleteMessage = {this.deleteMessage} // удалить сообщение\n                sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\n                scrollBottom={this.scrollBottom}\n                profilePage={this.props.profilePage}\n        />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n        profilePage: state.profilePage, // страница профиля пользователя для создания dialogList\n        auth: state.auth,// страница моего профиля для создания dialogList\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps,\n        {\n            sendDialogsThunkCreator,//санкреатор отправки нового сообщения в диалог\n            deleteMessageThunkCreator,//санкреатор удаления сообщения из далога\n            updateDialogListThunkCreator,//санкреатор обновления диалогЛиста (моего когда я пишу кому то сообщение) - запись в localStorage.\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n)\n(MessagesContainer);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, {useEffect} from 'react'; // импорт реакта\r\n//import classes from './DialogList.module.css';// css обработка\r\n//import DialogItem from \"./DialogItem\";// подкомпонента отрисовки диалогов через map\r\n//import userPhotoAva from \"../../assets/images/no-image3.png\";\r\nimport MessagesContainer from \"./Messages/MessagesContainer\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst DialogList = ({deleteDialog, dialogUserID, getDialogList, dialogs2,\r\n                     getDialogLastUpdateTime}) => { // основная компонента отрисовки диалогов\r\n\r\n/*    let dialogElements = dialogs2.map((d) => // подкомпонента отрисовки всех диалогов через map\r\n        {\r\n            let userPhoto = d.userPhoto ? d.userPhoto : userPhotoAva; // если аватарки с сервера нет, подставить заглушку\r\n            return <DialogItem key={d.userId} userName={d.userName} userId={d.userId}\r\n                               userPhoto={userPhoto} dialogUserID={dialogUserID}\r\n                               deleteDialog={deleteDialog} dialogId={d.dialogId}\r\n            />\r\n        }\r\n    );\r\n        const DialogListRender = () => {\r\n            return <div>\r\n                <div className={classes.dialogContainer}>\r\n                    {dialogElements} {/!*отрисовка диалогов*!/}\r\n                </div>\r\n            </div>\r\n        }*/\r\n\r\n    useEffect(() => { // при очередном ререндере\r\n        const id = setInterval(() => { // задать цикл с интервалом в 1 сек\r\n            getDialogLastUpdateTime() // получить время обновления текущего диалога\r\n            getDialogList()// получить диалогЛист (мне кто то написал, или я начал диалог)\r\n        }, 1000)\r\n        return (() => {\r\n            clearInterval(id)\r\n        }) // для сброса цикла при очередном рендере\r\n    }, [getDialogLastUpdateTime, getDialogList]) // useEffect без зависимостей\r\n\r\n\r\n    return (\r\n        <Row>\r\n            {/* <Col><DialogListRender/></Col>\r\n            {/*отрисовка диалоглиста*/}\r\n\r\n            <Col>\r\n                <MessagesContainer/> {/*отрисовка сообщений*/}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\nexport default DialogList;\r\n\r\n","import React from 'react';\nimport DialogList from \"./DialogList\";\nimport {\n    deleteDialogThunkCreator,\n    getDialogLastUpdateTimeTnkCrt,\n    getDialogsThunkCreator, getMyDialogListThunkCreator,//getFollowThunkCreator,\n    setdialogUserID,\n    setMessages\n} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getProfileThunkCreator} from \"../../redux/profile-reducer\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport withRouter2 from \"../hoc/withRouter2\";\n\nclass DialogListContainer extends React.Component {\n    commonPartMountUpdate = () => {// общая часть для componentDidMount и componentDidUpdate\n        if (!this.props.userId) { // если перешли на вкладку DialogList с нулевым userId\n            if (this.props.messages2.length>0) { // если массив сообщений непустой\n                this.props.setMessages([]); // занулить массив сообщений (очистить список сообщений)\n                this.props.setdialogUserID(null) // занулить userId (убрать выделение диалога)\n            }\n            return\n        }\n        if ( this.props.dialogUserID!==this.props.userId) { // если считаный из URL userId не равен тому, что в BLL\n            this.props.setdialogUserID(this.props.userId) // задать в BLL считаный из URL ID\n            //здесь запросить профиль выбранного userId через getProfileThunkCreator\n            this.props.getProfileThunkCreator(this.props.userId, true, this.props.myId)// при переходе в диалог любого пользователя считать его данные профиля с сервера\n        }\n\n    }\n    componentDidMount() {\n        this.getDialogList()\n        //      console.log(\"DialogListContainer -> componentDidMount\")\n        this.commonPartMountUpdate();// общая часть для componentDidMount и componentDidUpdate\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //       console.log(\"DialogListContainer -> componentDidUpdate\")\n        this.commonPartMountUpdate(); // общая часть для componentDidMount и componentDidUpdate\n        if  (this.props.dialogLastUpdateTime!==prevProps.dialogLastUpdateTime) { // если время обновления диалога изменилось\n            this.getDialogs()// запросить новые сообщения по диалогу\n        }\n    }\n\n    getDialogs = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке DialogList\n        this.props.getDialogsThunkCreator(this.props.myId, this.props.userId);// получить диалоги\n    }\n\n    getDialogLastUpdateTime = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке DialogList\n        this.props.getDialogLastUpdateTimeTnkCrt(this.props.myId, this.props.userId); // получить время последенего обновления диалога\n    }\n\n    getDialogList = () => {\n        this.props.getMyDialogListThunkCreator(this.props.myId)\n    }\n\n    deleteDialog = (dialogId, userId2) => {\n        this.props.deleteDialogThunkCreator(dialogId, this.props.myId, userId2)\n        // здесь сменить URL без ID\n    }\n\n    render () {\n        return <div>\n            <DialogList\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\n                dialogs ={this.props.dialogs} // список диалогов\n                dialogs2 ={this.props.dialogs2} // список диалогов с LocalStorage\n                {...this.props} // все входящие пропсы пробросили дальше\n             //   sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\n                getDialogs={this.getDialogs}  // проброс местного метода получить диалоги\n                getDialogLastUpdateTime={this.getDialogLastUpdateTime} // проброс метода - получить время обновления текущего диалога\n                myId={this.props.myId} // мой ID\n             //   deleteMessage = {this.deleteMessage} // удалить сообщение\n                getDialogList={this.getDialogList} // периодическая проверка написал ли кто мне, или я с кем диалог начал\n                dialogUserID = {this.props.dialogUserID}\n                deleteDialog = {this.deleteDialog}\n            />\n        </div>\n    }\n}\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // флаг, авторизован ли я сейчас,\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n  //      dialogs: state.dialogsPage.dialogs, // список диалогов\n        dialogLastUpdateTime: state.dialogsPage.dialogLastUpdateTime,// время последнего времени обновления текущего диалога\n        dialogs2: state.dialogsPage.dialogs2, // список диалогов с LocalStorage\n        profilePage:state.profilePage, // страница профиля пользователя для создания dialogList\n        auth: state.auth,// страница моего профиля для создания dialogList\n     //   editProfileStatus: state.auth.editProfileStatus // ошибка правки формы профиля\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps,\n        {\n        //    sendDialogsThunkCreator,//санкреатор отправки нового сообщения в диалог\n            getDialogsThunkCreator,//санкреатор получения диалогов с данными\n            setdialogUserID, // экшнкреатор задания списка сообщений в стейт messages2\n            setMessages,// экшнкреатор задания списка сообщений в стейт messages2\n            getDialogLastUpdateTimeTnkCrt,//санкреатор получения диалогов с данными\n         //   deleteMessageThunkCreator,//санкреатор удаления сообщения из далога\n            getProfileThunkCreator,// санкреатор на получение профиля выбранного пользователя\n            //  getFollowThunkCreator,санкреатор проверки follow/unfollow выбранного юзера для составления списка диалогов\n            getMyDialogListThunkCreator,//санкреатор получения моего диалогЛиста\n          //  updateDialogListThunkCreator,//санкреатор обновления диалогЛиста (моего когда я пишу кому то сообщение) - запись в localStorage.\n            deleteDialogThunkCreator, //санкреатор удаления диалога из диалогЛиста\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2 // проверка, залогинен ли я\n)\n(DialogListContainer);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["MAX_DELAY_MS","Math","pow","setChainedTimeout","handleRef","fn","timeoutAtMs","delayMs","Date","now","current","setTimeout","useTimeout","isMounted","useMounted","useRef","useWillUnmount","clearTimeout","useMemo","clear","set","fadeStyles","_fadeStyles","_defineProperty","ENTERING","EXITING","ToastFade","React","props","ref","_jsx","Fade","_objectSpread","transitionClasses","displayName","onClose","ToastHeader","_ref","bsPrefix","closeLabel","closeVariant","closeButton","className","children","_objectWithoutProperties","_excluded","useBootstrapPrefix","context","useContext","ToastContext","handleClick","useEventCallback","e","_jsxs","classNames","CloseButton","variant","onClick","defaultProps","createWithBsPrefix","Toast","_ref$transition","transition","Transition","_ref$show","show","_ref$animation","animation","_ref$delay","delay","_ref$autohide","autohide","bg","delayRef","onCloseRef","useEffect","autohideTimeout","autohideToast","autohideFunc","useCallback","toastContext","hasAnimation","toast","concat","role","value","in","unmountOnExit","Object","assign","Body","ToastBody","Header","message","myId","userId","MessageId","deleteMessage","classes","Hour","Minutes","messages2","map","m","Message","id","myInitialValues","newMessage","myValidationSchema","Yup","sendMessage","scrollBottom","_Fragment","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","MyTextInput","label","name","type","placeholder","Button","disabled","Image","src","sendSwg","alt","title","profilePage","messagesProfileRender","profile","NavLink","to","photos","small","userPhoto","fullName","Row","MessagesElements","DialogFormik","scrollHeight","max","document","body","documentElement","offsetHeight","clientHeight","window","scrollTo","MessagesContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","NewMessage","userName","sendDialogsThunkCreator","auth","myLogin","myProfile","updateDialogListThunkCreator","alert","messageID","deleteMessageThunkCreator","ScrollBottom","_createClass","key","MessagesRender","this","compose","connect","state","dialogUserID","dialogsPage","withRouter2","deleteDialog","getDialogList","getDialogLastUpdateTime","dialogs2","setInterval","clearInterval","Col","DialogListContainer","commonPartMountUpdate","setdialogUserID","getProfileThunkCreator","setMessages","getDialogs","getDialogsThunkCreator","getDialogLastUpdateTimeTnkCrt","getMyDialogListThunkCreator","dialogId","userId2","deleteDialogThunkCreator","prevProps","prevState","snapshot","dialogLastUpdateTime","DialogList","dialogs","isAuth","NavigateToLoginHoc2"],"sourceRoot":""}