{"version":3,"file":"static/js/136.5610c31b.chunk.js","mappings":"iNAWMA,EAAqB,WAGvB,IAAMC,GAAkCC,EAAAA,EAAAA,KAAY,SAACC,GAAqB,OAAKA,EAAMC,KAAKH,QAAQ,IAelG,OAAOI,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAQC,SAAA,CAAC,IACpDR,EAASS,KAAK,SAACC,EAAGC,GAAK,OAAKC,EAAAA,EAAAA,KAACC,EAAO,CAAaC,QAASJ,GAAhBC,EAAoB,MAEvE,EAEME,EAAkD,SAAHE,GAAmB,IAAdD,EAAOC,EAAPD,QACtD,OAAOV,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACHI,EAAAA,EAAAA,KAAA,OAAKI,IAAKF,EAAQG,OAASC,EAAWb,MAAO,CAACc,MAAO,QAASC,IAAI,yCAAU,KAC5ER,EAAAA,EAAAA,KAAA,KAAAJ,SAAIM,EAAQO,WAAa,KACzBT,EAAAA,EAAAA,KAAA,SACCE,EAAQA,QAAQ,KACjBF,EAAAA,EAAAA,KAAA,WAER,EAGMU,EAAwB,WAC1B,IAAAC,GAA8BC,EAAAA,EAAAA,UAAkB,IAAIC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CT,EAAOW,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAsCJ,EAAAA,EAAAA,UAA+B,WAAWK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAE1EE,GAFYD,EAAA,GAAgBA,EAAA,IAEjBE,EAAAA,EAAAA,OA+BjB,OAAO3B,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACHI,EAAAA,EAAAA,KAAA,SACIoB,SAJW,MAKXC,MAAOnB,EACPoB,SAAU,SAACC,GACPR,EAAYQ,EAAEC,cAAcH,MAChC,KAELrB,EAAAA,EAAAA,KAAA,UAAQyB,QAfS,WAEhBP,GAASQ,EAAAA,EAAAA,IAAgBxB,IACzBa,EAAY,GAChB,EAWiCK,SAVd,MAUmCxB,SAAE,SAAa,MAEzE,EAkDA,EA9CuB,WA+BnB,IAAMsB,GAAWC,EAAAA,EAAAA,MAUjB,OARAQ,EAAAA,EAAAA,YAAU,WAEN,OADAT,GAASU,EAAAA,EAAAA,OACF,WACHV,GAASW,EAAAA,EAAAA,MACb,CACJ,GAAE,KAGKrC,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACHI,EAAAA,EAAAA,KAACb,EAAQ,IAAG,KACZa,EAAAA,EAAAA,KAACU,EAAW,IAAG,MAEvB,ECnIA,EALmC,WAC/B,OAAOV,EAAAA,EAAAA,KAAA,OAAAJ,UACHI,EAAAA,EAAAA,KAAC8B,EAAI,KAEb,C","sources":["components/ChatPage/ChatPage.tsx","components/ChatPage/ChatPageContainer.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport userPhoto from \"../../assets/images/no-image3.png\";\nimport {ChatMessageType} from \"../api/chat-api\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {sendMessageThCr, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\n\n\n\ntype WebSocketType = WebSocket | null // тип объекта вебсокет\n\nconst Messages: React.FC = () => {\n   // const [messages, setMessages] = useState<Array<ChatMessageType>>( [] ) // массив сообщений чата с сервера\n\n    const messages:Array<ChatMessageType> = useSelector((state:GlobalStateType) => state.chat.messages )\n\n    // useEffect( () => {\n    //     const messageHandler = (e: MessageEvent) => { // обработчик новых сообщений\n    //         const newMessages = JSON.parse( e.data ) // получить массив новых сообщений\n    //         setMessages( (prevState => [...prevState, ...newMessages]) ) // добавить новые сообщения к ранее загруженным\n    //     }\n    //     wsChannel?.removeEventListener( 'message', messageHandler ) // перед добавлением нового слушателя, удалить старый\n    //\n    //     wsChannel?.addEventListener( 'message', messageHandler ) // добавить слушатель события новых сообщений\n    //     return () => {\n    //         wsChannel?.removeEventListener( 'message', messageHandler )// при закрытии useEffect удалить открытые ранее слушатели\n    //     }\n    // }, [wsChannel] )\n\n    return <div style={{height: \"400px\", overflowY: \"auto\"}}> {/*отрисовка списка сообщений*/}\n        {messages.map( (m, index) => <Message key={index} message={m}/> )}\n    </div>\n}\n\nconst Message: React.FC<{ message: ChatMessageType }> = ({message}) => {//отрисовка списка сообщений\n    return <div>\n        <img src={message.photo || userPhoto} style={{width: \"30px\"}} alt='аватар'/> {/*аватарка собеседника*/}\n        <b>{message.userName}</b> {/* его имя*/}\n        <br/>\n        {message.message} {/*само сообщение*/}\n        <hr/>\n    </div>\n}\n\n\nconst AddMessages: React.FC = () => {\n    const [message, setMessage] = useState<string>( \"\" )\n    const [readyStatus, setReadyStatus] = useState<'pending' | \"ready\">( \"pending\" )\n\n    const dispatch = useDispatch()\n\n/*    useEffect( () => {\n        const openHandler = () => { // обработчик при открытии канала websocket\n            setTimeout(()=>{\n                setReadyStatus( \"ready\" ) // добавить флаг доступности кнопки и поля ввода\n                console.log( 'open' )\n            },2000)\n        }\n\n        if (!wsChannel) {// если нет канала websocket\n            setReadyStatus(\"pending\") // убрать флаг доступности кнопки и поля ввода\n\n        }\n        wsChannel?.removeEventListener('open', openHandler)// перед добавлением нового слушателя, удалить старый\n\n        wsChannel?.addEventListener( 'open', openHandler )// добавить слушатель события открытого канала websocket\n\n        return () => {\n            wsChannel?.removeEventListener('open', openHandler)// при закрытии useEffect удалить открытые ранее слушатели\n            setReadyStatus(\"pending\")\n        }\n    }, [wsChannel] )*/\n\n    const sendMessage = () => { // ввод новых сообщений\n      //  message && wsChannel?.send( message ) // если поле ввода не пустое, отправить новое сообщение\n        dispatch(sendMessageThCr(message))\n        setMessage( \"\" ) // занулить поле воода\n    }\n    const isDisabled = false\n        //readyStatus !== 'ready' // флаг доступности кнопки и поля ввода\n    return <div >\n        <input\n            disabled={isDisabled} // доступность поля ввода\n            value={message} // значение из локального стейта\n            onChange={(e) => { // при изменении поля ввода\n                setMessage( e.currentTarget.value ) // записать значение в локальный стейт\n            }}\n        />\n       <button onClick={sendMessage} disabled={isDisabled} >Send</button> {/* кнопка отправки сообщений*/}\n    </div>\n}\n\n\n\nconst Chat: React.FC = () => { // основная страница чата\n //   const [wsChannel, setWsChannel] = useState<WebSocketType>( null ) // хранилище канала websocket\n\n/*\n    useEffect( () => {\n        let ws: WebSocket // временная переменная канала websocket\n\n        const closeHandler = () => { // обработчик закрытия канала websocket\n            console.log( \"CLOSE WS\" )\n            setWsChannel(null) // зануляем канал, если прило событие close\n            setTimeout(()=>createChannel(),3000) // пересоздаем новый канал при закрытии старого\n        }\n\n        const createChannel = () => { // обработчик создания нового канала websocket\n            ws?.removeEventListener('close', closeHandler)// перед добавлением нового слушателя, удалить старый\n            ws?.close() // закрыть канал перед открытием нового\n\n            ws = new WebSocket( 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx' ) // создать новый канал\n            ws.addEventListener( 'close', closeHandler )// добавить слушатель события закрытия канала websocket\n            setWsChannel( ws ) // записать в локальное хранилище объект канала websocket\n        }\n\n        createChannel()\n        return () => {\n            ws.removeEventListener('close', closeHandler)// при закрытии useEffect удалить открытые ранее слушатели\n            ws.close() // закрыть канал при завершении useEffect\n        }\n    }, [] )\n*/\n\n   // мы хотим запустить startMessagesListening\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(startMessagesListening())\n        return ()=>{\n            dispatch(stopMessagesListening())\n        }\n    },[])\n\n\n    return <div>\n        <Messages /> {/*отрисовка сообщений чата из websocket*/}\n        <AddMessages /> {/*добавить сообщения в чат websocket*/}\n    </div>\n}\nexport default Chat\n\n\n","import React from \"react\";\nimport Chat from \"./ChatPage\";\n\nconst ChatPageContainer:React.FC = () => {\n    return <div>\n        <Chat/>\n    </div>\n}\nexport default ChatPageContainer\n"],"names":["Messages","messages","useSelector","state","chat","_jsxs","style","height","overflowY","children","map","m","index","_jsx","Message","message","_ref","src","photo","userPhoto","width","alt","userName","AddMessages","_useState","useState","_useState2","_slicedToArray","setMessage","_useState3","_useState4","dispatch","useDispatch","disabled","value","onChange","e","currentTarget","onClick","sendMessageThCr","useEffect","startMessagesListening","stopMessagesListening","Chat"],"sourceRoot":""}