{"version":3,"file":"static/js/439.6466e909.chunk.js","mappings":"2NACA,EAAgC,gCAAhC,EAAmO,mCAAnO,EAAsR,gC,oBCAtR,EAA8B,oCAA9B,EAA0I,wC,mBCMtIA,EAAkB,CAClBC,WAAY,IAEZC,EAAqBC,EAAAA,GAAW,CAAE,GA0DtC,EAvDuB,SAAH,GAAwB,IAAnBC,EAAY,EAAZA,aAMrB,OACI,iCACQ,6BACI,gBAAKC,UAAWC,EAAoB,SAAC,uFAE7C,SAAC,KAAM,CACHC,cAAeP,EACfQ,iBAAkBN,EAClBO,SAbO,SAACC,EAAO,GAAkB,IAAhBC,EAAS,EAATA,UACzBP,EAAaM,GACbC,GACJ,EAUiC,SAGpB,YACgB,EAAXC,YAAW,OAEb,SAAC,KAAI,WACD,gBAAKP,UAAWC,EAAwB,UACpC,4BACI,SAAC,KAAY,CACTO,MAAM,8CACNC,KAAK,OACLC,KAAK,OACLC,YAAY,wBAEhB,SAAC,KAAY,CACTH,MAAM,QACNC,KAAK,QACLC,KAAK,QACLC,YAAY,WAEjB,SAAC,KAAW,CACRH,MAAM,qGACNC,KAAK,UACLC,KAAK,WACLC,YAAY,yDACZC,WAAW,KAEd,oBAAQF,KAAK,SAAQ,UAAC,IAA6B,kBAMxD,MAK3B,EC3BA,EAnCiB,SAAH,GAA2D,IAAtDX,EAAY,EAAZA,aAAcc,EAAc,EAAdA,eAAgBC,EAAiB,EAAjBA,kBACzCC,EAAmB,SAACC,GACpB,OAAO,gBAAKhB,UAAWC,EAAyB,SAC3Ce,EAAMC,UAEf,EAEA,OAAIJ,GAEI,0BACI,UAACE,EAAgB,WAAC,KACd,yBAAK,iDACL,yBAAMF,KAEN,mBAAQb,UAAWC,EAAuBiB,QAAS,WAC/CJ,EAAkB,GACtB,EAAE,SAAC,gGASf,iBAAKd,UAAWC,EAAsB,UAAC,KACnC,0BACI,SAAC,EAAc,CAACF,aAAcA,OAElC,qBAIZ,EChCMoB,EAAiB,qJAIlB,OAJkB,oCAEnBpB,aAAe,SAACqB,GACZ,EAAKJ,MAAMK,0BAA0BD,EACzC,EAAC,EAUA,OAVA,8BAED,WACI,OAAO,0BACH,SAAC,EAAQ,CACLrB,aAAcuB,KAAKvB,aACnBc,eAAgBS,KAAKN,MAAMH,eAC3BC,kBAAmBQ,KAAKN,MAAMF,qBAG1C,KAAC,EAdkB,CAASS,EAAAA,WAuBhC,GAAeC,EAAAA,EAAAA,KANO,SAACC,GACnB,MAAO,CACHZ,eAAgBY,EAAMC,SAASb,eAEvC,GAGI,CAACQ,0BAAAA,EAAAA,GAA2BP,kBAAAA,EAAAA,IADhC,CACoDK,E","sources":["webpack://my-app/./src/components/FeedBack/FeedBack.module.css?b10b","webpack://my-app/./src/components/FeedBack/FeedBackFormik/FeedBackFormik.module.css?9652","components/FeedBack/FeedBackFormik/FeedBackFormik.jsx","components/FeedBack/FeedBack.jsx","components/FeedBack/FeedBackContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"feedBackGreed\":\"FeedBack_feedBackGreed__xb18p\",\"FeedBackSuccess\":\"FeedBack_FeedBackSuccess__tFRsF\",\"legendStyle\":\"FeedBack_legendStyle__rOg3O\",\"fieldSetStyle\":\"FeedBack_fieldSetStyle__ifcUC\",\"sendMessageBoard\":\"FeedBack_sendMessageBoard__UG9aW\",\"buttonSuccess\":\"FeedBack_buttonSuccess__8u00M\"};","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"FeedBackFormik_legendStyle__VL04a\",\"fieldSetStyle\":\"FeedBackFormik_fieldSetStyle__w9E7H\",\"fieldButtonGrid\":\"FeedBackFormik_fieldButtonGrid__HAXfT\"};","import React from \"react\";\r\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\r\nimport classes from \"./FeedBackFormik.module.css\"\r\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\r\nimport {MyTextArea, MyTextInput} from \"../../common/formikCommon/MyFields\"\r\n\r\nlet myInitialValues = { // начальные зачения форм\r\n    newMessage: \"\",\r\n}\r\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\r\n})\r\n\r\nconst FeedBackFormik = ({sendFeedBack}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\r\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\r\n        sendFeedBack(values) // колбек, который принмает результат ввода формы\r\n        resetForm()// сбросить значение формы после ввода\r\n    }\r\n\r\n    return (\r\n        <fieldset>\r\n                <legend>\r\n                    <div className={classes.legendStyle}>Обратная связь</div>\r\n                </legend>\r\n            <Formik\r\n                initialValues={myInitialValues}\r\n                validationSchema={myValidationSchema}\r\n                onSubmit={myOnSubmit}\r\n            >\r\n\r\n                {({\r\n                      handleReset,// обнуление полей\r\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\r\n                    <Form>\r\n                        <div className={classes.fieldButtonGrid}>\r\n                            <div>\r\n                                <MyTextInput // сообщение в MyPosts\r\n                                    label=\"Ваше имя\"\r\n                                    name='name'\r\n                                    type='text'\r\n                                    placeholder='имя'\r\n                                />\r\n                                <MyTextInput // email\r\n                                    label=\"Email\"\r\n                                    name='email'\r\n                                    type='email'\r\n                                    placeholder='email'\r\n                                />\r\n                               <MyTextArea // сообщение в MyPosts\r\n                                   label=\"Введите сообщение*\"\r\n                                   name='message'\r\n                                   type='textarea'\r\n                                   placeholder='сообщение'\r\n                                   autoFocus={true}\r\n                               />\r\n                                <button type=\"submit\"> {/*кнопка отправить форму*/}\r\n                                    Submit\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\nexport default FeedBackFormik\r\n\r\n","import React from \"react\";\r\nimport classes from \"./FeedBack.module.css\";\r\nimport FeedBackFormik from \"./FeedBackFormik/FeedBackFormik\";\r\n\r\nconst FeedBack = ({sendFeedBack, feedBackStatus, setFeedBackStatus}) => {\r\n    let SendMessageBoard = (props) => {\r\n        return <div className={classes.sendMessageBoard}>{/*стилизация отправки данных на сервер*/}\r\n            {props.children}\r\n        </div>\r\n    }\r\n\r\n    if (feedBackStatus) { // если статус feedback из BLL не пустой\r\n        return (\r\n            <div>\r\n                <SendMessageBoard> {/*стилизация отправки данных на сервер*/}\r\n                    <div>Спасибо!</div>\r\n                    <div>{feedBackStatus}</div>\r\n                    {/*отобразить статус*/}\r\n                    <button className={classes.buttonSuccess} onClick={() => {\r\n                        setFeedBackStatus(\"\")\r\n                    }}>Новое сообщение\r\n                    </button>\r\n                    {/*обнуление статуса и отображение формы*/}\r\n                </SendMessageBoard>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.feedBackGreed}> {/*растягивание полей ввода не на весь экран*/}\r\n            <div>\r\n                <FeedBackFormik sendFeedBack={sendFeedBack}/>\r\n            </div>\r\n            <div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FeedBack;\r\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {postFeedBackThunkCreator2, setFeedBackStatus} from \"../../redux/feedback-reducer\";\nimport FeedBack from \"./FeedBack\";\n\nclass FeedBackContainer extends React.Component {\n\n    sendFeedBack = (data) => {\n        this.props.postFeedBackThunkCreator2(data)// отправка фидбека из api\n    }\n\n    render () {\n        return <div>\n            <FeedBack\n                sendFeedBack={this.sendFeedBack} // колбек отправки сообщения из контейнера\n                feedBackStatus={this.props.feedBackStatus} // фидбэк статус из BLL\n                setFeedBackStatus={this.props.setFeedBackStatus} // задать статус (обнулить для отправки нового сообщения)\n            />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        feedBackStatus: state.feedback.feedBackStatus // статус отправки сообщения на сервер\n    }\n}\n\nexport default connect(mapStateToProps,\n    {postFeedBackThunkCreator2, setFeedBackStatus})(FeedBackContainer);\n"],"names":["myInitialValues","newMessage","myValidationSchema","Yup","sendFeedBack","className","classes","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","label","name","type","placeholder","autoFocus","feedBackStatus","setFeedBackStatus","SendMessageBoard","props","children","onClick","FeedBackContainer","data","postFeedBackThunkCreator2","this","React","connect","state","feedback"],"sourceRoot":""}