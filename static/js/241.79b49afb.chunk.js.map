{"version":3,"file":"static/js/241.79b49afb.chunk.js","mappings":"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","sources":["components/Info/LoginInfoShort.jsx","webpack://my-app/./src/components/Login/Login.module.css?3530","../node_modules/react-bootstrap/esm/ButtonGroup.js","components/Login/LoginFormikBS.jsx","components/Login/LoginContainer.jsx"],"sourcesContent":["let LoginInfoShort = () => {\r\n    return (<div>\r\n        Данные для тестового входа:\r\n        <p>Аккаунт 1: Email: evgeniysazonov1983@gmail.com <br/>\r\n            Password: 12qwaszx</p>\r\n        <p>Аккаунт 2 : Email: evgeniysazonov1983@googlemail.com <br/>\r\n            Password: 12qwaszx</p>\r\n        <p>Аккаунт 3: Email: free@samuraijs.com <br/>\r\n            Password: free</p>\r\n        <p>В случае проблем с авторизацией, попробуйте сначала войти по указанным парам логин/пароль на <br/>\r\n            <a href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a>\r\n        </p>\r\n    </div>)\r\n}\r\n\r\nexport default LoginInfoShort\r\n","// extracted by mini-css-extract-plugin\nexport default {\"LoginForm\":\"Login_LoginForm__s2klG\",\"legendStyle\":\"Login_legendStyle__SOIpE\",\"fieldSetStyle\":\"Login_fieldSetStyle__1oKJz\",\"errorText\":\"Login_errorText__kahI9\"};","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React from \"react\";\r\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\r\nimport classes from \"./Login.module.css\"\r\nimport {MyTextInput, MyCheckbox} from \"../common/formikCommon/MyFieldsBS\"\r\nimport {PointerCursor} from \"../Dark_light_theme/globalStyles\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\n//import DisplayFormikState from \"../common/formikCommon/DisplayFormikState\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Col from \"react-bootstrap/Col\";\r\nimport LoginInfoShort from \"../Info/LoginInfoShort\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport commonClasses from \"../common/CommonClasses/common.module.css\"\r\n\r\nlet myInitialValues = { // начальные зачения форм\r\n    email: \"\",\r\n    password: \"\",\r\n    captcha: \"\",\r\n}\r\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\r\n    email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .required('Required'),\r\n})\r\n\r\nconst LoginFormik = ({postLogin, captchaURL, updateCaptcha, loginError}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\r\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\r\n        postLogin(values) // колбек, который принмает результат ввода формы\r\n        resetForm()// сбросить значение формы после ввода\r\n    }\r\n\r\n    const loginForm = <Formik\r\n        initialValues={myInitialValues}\r\n        validationSchema={myValidationSchema}\r\n        onSubmit={myOnSubmit}\r\n    >\r\n\r\n        {({\r\n              handleReset,// обнуление полей\r\n          }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\r\n            <Form> {/*className={classes.LoginForm}*/}\r\n                <Col> {/*lg={6} md={12}*/}\r\n\r\n                    <MyTextInput // email\r\n                        label=\"Email Address\"\r\n                        name='email'\r\n                        type='email'\r\n                        placeholder='email'\r\n                        leftLabelLength='7rem'\r\n                    />\r\n\r\n                    <MyTextInput // password\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder='password'\r\n                        leftLabelLength='7rem'\r\n                    />\r\n\r\n                    <MyCheckbox name='rememberme'>  {/*чекбокс */}\r\n                        запомнить меня\r\n                    </MyCheckbox>\r\n\r\n                    {captchaURL && <div>\r\n                        <PointerCursor>\r\n                            <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"></img>\r\n                        </PointerCursor>\r\n                        {/*<label htmlFor=\"captcha\">Captcha</label> {/*альтернатива написания input с обработкой ошибок*/}\r\n\r\n                        <MyTextInput // email\r\n                            label=\"\"\r\n                            name='captcha'\r\n                            type='text'\r\n                            placeholder='captcha'\r\n                        />\r\n                    </div>\r\n\r\n                    }\r\n                    <ButtonGroup aria-label=\"Basic example\">\r\n                        <Button variant=\"warning\" type='button' onClick={handleReset}>Reset</Button>\r\n                        <Button type=\"submit\"> {/*кнопка отправить форму*/}\r\n                            Submit\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                    {/*кнопка сброса к значениям по умолчанию*/}\r\n                    <div className={classes.errorText}>{loginError && loginError}</div>\r\n                    <div/>\r\n\r\n                    {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\r\n                </Col>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n    return (\r\n        <>\r\n            <Container className=\"d-inline-block\">\r\n                <h2 className={commonClasses.pageHeader}>Login</h2>\r\n\r\n                <Row >\r\n                    <Col>{loginForm}</Col>\r\n                    <Col><LoginInfoShort/></Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginFormik\r\n\r\n","import React from \"react\";\r\nimport Login from \"./LoginFormikBS\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    postLogin = ({email, password, rememberme, captcha}) => { // email, password, rememberme берем из формы login\r\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\r\n        this.props.postLoginThunkCreator(email, password, rememberme, captcha);\r\n    }\r\n\r\n    updateCaptcha = () => {\r\n        this.props.getCaptchaThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) { // условие что я авторизован\r\n            this.props.getFriendsThunkCreator( // получить список друзей\r\n                this.props.friendsCurrentPage,\r\n                this.props.friendsPageSize,\r\n                this.props.friendsTerm,\r\n                this.props.friend);\r\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Login postLogin={this.postLogin}\r\n                       captchaURL={this.props.captchaURL}\r\n                       updateCaptcha={this.updateCaptcha}\r\n                       dispatch = {this.props.dispatch}\r\n                       loginError = {this.props.loginError}\r\n                /> {/*Возврат целевой компоненты*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\r\n        friendsPageSize: state.sideBar.friendsPageSize,\r\n        friendsTerm: state.sideBar.friendsTerm,\r\n        friend: state.sideBar.friend,\r\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\r\n        loginError: state.auth.loginError // ошибка авторизации\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        postLoginThunkCreator: (email, password, rememberme, captchaURL) => { // отправить сообщение\r\n            dispatch(postLoginThunkCreator(email, password, rememberme, captchaURL))\r\n        },\r\n        getFriendsThunkCreator: (currentPage, pageSize, term, friend) => { // отправить сообщение\r\n            dispatch(getFriendsThunkCreator(currentPage, pageSize, term, friend))\r\n        },\r\n        getCaptchaThunkCreator: () => { // отправить сообщение\r\n            dispatch(getCaptchaThunkCreator())\r\n        },\r\n        dispatch: dispatch\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\r\n"],"names":["href","ButtonGroup","React","ref","bsPrefix","size","vertical","className","as","Component","rest","prefix","useBootstrapPrefix","baseClass","_jsx","classNames","displayName","defaultProps","role","myInitialValues","email","password","captcha","myValidationSchema","Yup","required","postLogin","captchaURL","updateCaptcha","loginError","loginForm","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","Col","label","name","type","placeholder","leftLabelLength","src","onClick","alt","Button","variant","classes","Container","commonClasses","Row","LoginInfoShort","LoginContainer","rememberme","props","postLoginThunkCreator","getCaptchaThunkCreator","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","to","dispatch","connect","state","auth","sideBar","currentPage","pageSize","term"],"sourceRoot":""}