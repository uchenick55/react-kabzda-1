{"version":3,"file":"static/js/842.0128c9b3.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","components/Login/LoginContainer.jsx","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginCommon\":\"Login_loginCommon__6FyBi\",\"LoginForm\":\"Login_LoginForm__s2klG\",\"legendStyle\":\"Login_legendStyle__SOIpE\",\"fieldSetStyle\":\"Login_fieldSetStyle__1oKJz\"};","import React from \"react\"; // импорт реакта\nimport {Field, reduxForm, reset} from \"redux-form\";// reduxForm для ввода новых постов\nimport classes from './Login.module.css'\nimport styles from './../common/Validation/customFields.module.css'\nimport {Input} from \"../common/Validation/customFields\";\nimport {email, Required} from \"../common/Validation/validationField\";\nimport {PointerCursor} from \"../Dark_light_theme/globalStyles\";\n\nconst LoginForm = ({handleSubmit, error, captchaURL, updateCaptcha}) => { // компонента формы\n    return (\n        <form onSubmit={handleSubmit}/*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\n            <fieldset >\n                <legend><div className={classes.legendStyle}>Войдите в аккаунт</div></legend>\n                <div className={classes.fieldSetStyle}>\n                    <div>\n                        <Field\n                            name=\"email\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                            component={Input}// компонент - ввод\n                            placeholder=\"email\" // текст подсказка при пустом поле\n                            validate={[Required, email]}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            name=\"password\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                            component={Input}// компонент - ввод\n                            placeholder=\"password\"// текст подсказка при пустом поле\n                            validate={[Required]}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            name=\"rememberme\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                            component=\"input\"// компонент - ввод\n                            type=\"checkbox\"// тип - чекбокс\n                        />\n                        <label> запомнить меня</label>\n                    </div>\n                    {captchaURL &&\n                        <div>\n                            <PointerCursor>\n                                <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"></img>\n                            </PointerCursor>\n                            <Field\n                                name=\"captcha\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                                component={Input}// компонент - ввод\n                                placeholder=\"captcha\" // текст подсказка при пустом поле\n                                validate={[Required]}\n                            />\n                        </div>\n                    }\n                    <div>\n                        <button type=\"submit\">Submit</button>\n                        {/*кнопка*/}\n                    </div>\n                    <div className={styles.commonError}>\n                        {/*стилизация красным сообщение об общей ошибке с сервера при неверном логине или пароле*/}\n                        {error} {/*вывод сообщения ошибки после диспатча stopSubmit из auth-reducer.jsx */}\n                    </div>\n\n                </div>\n            </fieldset>\n        </form>\n    )\n}\n\n// оберточная компонента формы, задает имя подстейта \"LoginForm\"\nlet LoginReduxForm = reduxForm({form: 'LoginForm'})(LoginForm)\n\nlet Login = ({postLogin, captchaURL, updateCaptcha, dispatch}) => {\n\n    let resetFormFields = () => { // альтернативный вариант сброса формы, можно подключить к сабмиту\n        dispatch(reset('LoginForm')) // сброс полей формы после ввода\n\n    }\n    let onSubmit = (formData) => { // функция реакции на сабмит формы с данными от формы formData\n        const rememberme = !formData.rememberme ? false : formData.rememberme // если галочка rememberme не стоит, то false\n        postLogin(formData.email, formData.password, rememberme, formData.captcha)//вызов postLoginThunkCreator выше из LoginContainer\n        resetFormFields() // сбросить поля формы после отправки данных полей\n    }\n    return (\n        <div className={classes.loginCommon}/*стиль*/ >\n            <div className={classes.LoginForm}>\n                <div><LoginReduxForm\n                    onSubmit={onSubmit}\n                    captchaURL={captchaURL} // отображение каптчи, если она не пустая\n                    updateCaptcha={updateCaptcha}\n                />{/*вызов формы логина с отсылкой на локальный обработчик сабмита*/}\n                </div>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default Login\n","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    postLogin = (email, password, rememberme, captcha) => { // email, password, rememberme берем из формы login\r\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\r\n        this.props.postLoginThunkCreator(email, password, rememberme, captcha);\r\n    }\r\n\r\n    updateCaptcha = () => {\r\n        this.props.getCaptchaThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) { // условие что я авторизован\r\n            this.props.getFriendsThunkCreator( // получить список друзей\r\n                this.props.friendsCurrentPage,\r\n                this.props.friendsPageSize,\r\n                this.props.friendsTerm,\r\n                this.props.friend);\r\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Login postLogin={this.postLogin}\r\n                       captchaURL={this.props.captchaURL}\r\n                       updateCaptcha={this.updateCaptcha}\r\n                       dispatch = {this.props.dispatch}\r\n                /> {/*Возврат целевой компоненты*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\r\n        friendsPageSize: state.sideBar.friendsPageSize,\r\n        friendsTerm: state.sideBar.friendsTerm,\r\n        friend: state.sideBar.friend,\r\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        postLoginThunkCreator: (email, password, rememberme, captchaURL) => { // отправить сообщение\r\n            dispatch(postLoginThunkCreator(email, password, rememberme, captchaURL))\r\n        },\r\n        getFriendsThunkCreator: (currentPage, pageSize, term, friend) => { // отправить сообщение\r\n            dispatch(getFriendsThunkCreator(currentPage, pageSize, term, friend))\r\n        },\r\n        getCaptchaThunkCreator: () => { // отправить сообщение\r\n            dispatch(getCaptchaThunkCreator())\r\n        },\r\n        dispatch: dispatch\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\r\n","import React from \"react\";\nimport classes from \"./customFields.module.css\"\nimport {Field} from \"redux-form\";\n\nexport const Textarea = ({input, meta, ...restProps}) => {\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\n    return (\n        <div>\n            <div >\n                <textarea {...input} // формат задан в redux field validation\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\n                          className={isError?classes.textAreaError:classes.textArea}\n                    //границу textarea подсветить красным если ошибка в meta\n                />\n            </div>\n            <div >\n                {isError && <span className={classes.textError}>{meta.error}</span>}\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\n            </div>\n        </div>\n    )\n}\nexport const Input = ({input, meta, ...restProps}) => {\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\n    return (\n        <span>\n            <span >\n                <input {...input} // формат задан в redux field validation\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\n                          className={isError?classes.InputError:classes.Input}\n                    //границу login подсветить красным если ошибка в meta\n                />\n            </span>\n            <div >\n                {isError && <span className={classes.textError}>{meta.error}</span>}\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\n            </div>\n        </span>\n    )\n}\n\nexport const CreateField = (name, component, placeholder, validate ) => {\n    return (<div>\n        <Field\n            name={name}// имя поля формы и возвращаемого свойства объекта после сабмита формы\n            component={component}// компонент - кастомная строка с валидацией\n            placeholder={placeholder}// текст подсказка при пустом поле\n            validate={validate}\n        />\n    </div>)\n\n}\n\n\n\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaURL","updateCaptcha","onSubmit","className","classes","Field","name","component","Input","placeholder","validate","Required","email","type","src","onClick","alt","styles","postLogin","dispatch","formData","rememberme","password","captcha","reset","LoginContainer","props","postLoginThunkCreator","getCaptchaThunkCreator","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","to","React","connect","state","auth","sideBar","currentPage","pageSize","term","Textarea","input","meta","restProps","isError","touched","CreateField","value","maxLengthCreator","maxLength","length","test","undefined"],"sourceRoot":""}