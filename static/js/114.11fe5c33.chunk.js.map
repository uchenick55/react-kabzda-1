{"version":3,"file":"static/js/114.11fe5c33.chunk.js","mappings":"yNAGMA,EAAS,SAACC,GAEZ,OACI,oBACIC,UAAU,SACVC,QAAS,WAELF,EAAMG,aAAaH,EAAMI,EAC5B,EALL,UAOKJ,EAAMK,MAPX,MAUP,EAEKC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAiDD,OAjDCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,eAAAA,MAEF,SAAaF,GAET,OACI,SAACL,EAAD,CACIM,MAAOE,KAAKP,MAAMQ,QAAQJ,GAC1BD,aAAcI,KAAKP,MAAMG,aACzBC,EAAGA,GAGd,uBAED,WACI,IAAIK,EACEC,EAASC,EAAgBJ,KAAKP,MAAMQ,SAW1C,OAVID,KAAKP,MAAMY,QAAQC,OAAS,KAC5BJ,EAASF,KAAKP,MAAMc,QAAU,0EAAqB,2EAGnDJ,IACAD,EAAS,iEAAiBC,GAE1BH,KAAKP,MAAMY,QAAQC,QAAU,KAAOH,IACpCD,EAAS,mCAGT,4BACI,gBAAKR,UAAU,SAAf,SAAyBQ,KAEzB,iBAAKR,UAAU,YAAf,UACKM,KAAKQ,aAAa,GADvB,IAEKR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,OAEvB,iBAAKd,UAAU,YAAf,UAEKM,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,OAEvB,iBAAKd,UAAU,YAAf,UAEKM,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,GAClBR,KAAKQ,aAAa,QAIlC,OAjDCT,CAAcU,EAAAA,WAoDpB,SAASL,EAAgBH,GAYrB,IAVA,IAAMS,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAMJ,OAAQK,GAAQ,EAAG,CAEzC,cAAkBD,EAAMC,GAAxB,GAAOC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAEA,GAAIb,EAAQW,IAAMX,EAAQW,KAAOX,EAAQY,IAAMZ,EAAQW,KAAOX,EAAQa,GAElE,OAAOb,EAAQW,EAEtB,CACD,OAAO,IACV,KA+DD,EA7DMG,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYtB,GAAQ,IAAD,yBACf,cAAMA,IAOVG,aAAe,SAACC,GAEZ,IAAImB,EAAc,EAAKC,MAAMZ,QAAQC,OAAS,EAC1CY,EAAa,EAAKD,MAAMZ,QAAQW,GAAaE,WAAWC,QAEtDhB,EAASC,EAAgBc,GAE/B,IAAIA,EAAWrB,KAAMM,EAArB,CAIAe,EAAWrB,GAAK,EAAKoB,MAAMV,QAAU,IAAM,IAE3C,EAAKa,SAAS,CAACb,SAAU,EAAKU,MAAMV,UAGpC,IAAMc,EAAc,EAAKJ,MAAMZ,QAAQiB,OAAO,CAACJ,WAAAA,IAG/C,EAAKE,SAAS,CAACf,QAASgB,GATvB,CAUJ,EA5BkB,EA8BnBE,QAAU,WACN,EAAKH,SAAS,CACVb,SAAS,EACTF,QAAS,CAAC,CAACa,WAAYM,MAAM,GAAGC,KAAK,SAG5C,EAlCG,EAAKR,MAAQ,CACTV,SAAS,EACTF,QAAS,CAAC,CAACa,WAAYM,MAAM,GAAGC,KAAK,SAJ1B,CAMlB,CAmDA,OAnDA,8BAgCD,WACI,IAAIT,EAAchB,KAAKiB,MAAMZ,QAAQC,OAAS,EAC1CY,EAAalB,KAAKiB,MAAMZ,QAAQW,GAAaE,WAAWC,QAC5D,OACI,4BACI,0BAAK,qHACL,0BACI,SAACpB,EAAD,CACIE,QAASiB,EACTX,QAASP,KAAKiB,MAAMV,QACpBX,aAAcI,KAAKJ,aACnBS,QAASL,KAAKiB,MAAMZ,aAG5B,0BACI,mBAAQX,UAAU,kBAAkBC,QAASK,KAAKuB,QAAlD,2FAIf,OA1DCR,CAAuBN,EAAAA,U","sources":["components/Rest/Krestiki-Noliki/krestiki-noliki.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./krestiki-noliki.css\";\r\n\r\nconst Square = (props) => {\r\n    // отрисовка квадрата (отдельной клетки)\r\n    return (\r\n        <button\r\n            className=\"square\" // класс кнопки/клетки\r\n            onClick={() => {\r\n                // по клику\r\n                props.handleSquare(props.i); // выполнить функцию из пропсов сверху\r\n            }}\r\n        >\r\n            {props.value} {/* значение внутри клетки X, O или пустота (null)*/}\r\n        </button>\r\n    );\r\n};\r\n\r\nclass Board extends React.Component {\r\n    // все игровое поле из 9 клеток\r\n    renderSquare(i) {\r\n        // обращение к отрисовке отдельной клетки Square\r\n        return (\r\n            <Square // отрисовать Square отдельную клетку\r\n                value={this.props.squares[i]} // значение X, O или пусто (null)\r\n                handleSquare={this.props.handleSquare} // обработчик кликов по кнопке, пришел сверху из пропсов\r\n                i={i} // номер текущей клетки\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let status; // существует переменная status\r\n        const Winner = calculateWinner(this.props.squares); // проверка, появился ли победитель\r\n        if (this.props.history.length < 10) {\r\n            status = this.props.xIsNext ? \"Сейчас ходит: X \" : \"Сейчас ходит: O \";\r\n            // задать статусу кто ходит следующим X или O\r\n        }\r\n        if (Winner) {// определен победитель\r\n            status = \"Победитель: \" + Winner; // вывести победителя\r\n        }\r\n        if (this.props.history.length >= 10 && !Winner) {\r\n            status = \"Ничья\"; // заполнены все клетки и нет победителя\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                {/*вывести статус в отрисовке*/}\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)} {/*задание 3 клеток с порядковым номером i*/}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {/*перенос строки, задание еще 3 клеток*/}\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {/*перенос строки, задание еще 3 клеток*/}\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    // функция определения победителя (squares - весь текущий массив клеток)\r\n    const lines = [\r\n        [0, 1, 2], // задание комбинаций a, b, c при которых определяется победитель\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let n = 0; n < lines.length; n = n + 1) {\r\n        // перебор элементов squares\r\n        const [a, b, c] = lines[n]; // переменным a, b, с присваивают поочередно\r\n        // комбинации возможной победы\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            // если комбинации победы совпадают с текущим расположением на поле\r\n            return squares[a]; // выводится текущий игрок (X или O) как победитель\r\n        }\r\n    }\r\n    return null; // если комбинации победы не совпадают, победитель не определен\r\n}\r\n\r\nclass KrestikiNoliki extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true, // что вводим X или O (true/false)\r\n            history: [{squaresNew: Array(9).fill(null)}] // массив объектов - истории ходов\r\n        };\r\n    }\r\n\r\n    handleSquare = (i) => {\r\n        // обработчик кликов\r\n        let currentStep = this.state.history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\r\n        let squaresNew = this.state.history[currentStep].squaresNew.slice(); // делаем копию текущего массива\r\n\r\n        const Winner = calculateWinner(squaresNew); // попытка определения победитея\r\n\r\n        if (squaresNew[i] || Winner) {\r\n            //если текущая кнопка ранее была заполнена, или победитель уже определен\r\n            return; // ничего не делаем\r\n        }\r\n        squaresNew[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        // заносим в массив текущего хода X или O в зависимости от xIsNext\r\n        this.setState({xIsNext: !this.state.xIsNext});\r\n        // передаем ход следующему игроку\r\n\r\n        const historyNew2 = this.state.history.concat({squaresNew});\r\n        // добавить в локальный массив historyNew2 данные из основного массива history и новый массив squaresNew\r\n\r\n        this.setState({history: historyNew2}); // внести в history обновленный  historyNew2\r\n    };\r\n\r\n    newGame = () => {\r\n        this.setState({\r\n            xIsNext: true,\r\n            history: [{squaresNew: Array(9).fill(null)}]\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        let currentStep = this.state.history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\r\n        let squaresNew = this.state.history[currentStep].squaresNew.slice(); // делаем копию текущего массива\r\n        return (\r\n            <div>\r\n                <div><h3>Крестики нолики</h3></div>\r\n                <div>\r\n                    <Board\r\n                        squares={squaresNew} // пропсами передаем вглубь текущий массив клеток\r\n                        xIsNext={this.state.xIsNext} // статус кто ходит\r\n                        handleSquare={this.handleSquare} // обработчик кликов\r\n                        history={this.state.history}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className=\"new-game-button\" onClick={this.newGame}>Начать заново</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KrestikiNoliki;\r\n\r\n\r\n"],"names":["Square","props","className","onClick","handleSquare","i","value","Board","this","squares","status","Winner","calculateWinner","history","length","xIsNext","renderSquare","React","lines","n","a","b","c","KrestikiNoliki","currentStep","state","squaresNew","slice","setState","historyNew2","concat","newGame","Array","fill"],"sourceRoot":""}