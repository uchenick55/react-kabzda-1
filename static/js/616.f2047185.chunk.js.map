{"version":3,"file":"static/js/616.f2047185.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/hoc/NavigateToLoginHoc.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dM24o\",\"dialogList\":\"Dialogs_dialogList__DRCp9\",\"dialogListHeader\":\"Dialogs_dialogListHeader__LoidE\",\"messagesHeader\":\"Dialogs_messagesHeader__0aYgL\",\"knopka\":\"Dialogs_knopka__xT3Jx\",\"dialogItemGreed\":\"Dialogs_dialogItemGreed__AaCdb\",\"dialog\":\"Dialogs_dialog__YZmRT\",\"dialogCurrent\":\"Dialogs_dialogCurrent__ICI5E\",\"dialogImg\":\"Dialogs_dialogImg__H5UvS\",\"FieldLeft\":\"Dialogs_FieldLeft__5h4r2\",\"buttonRight\":\"Dialogs_buttonRight__XYfP1\",\"FieldButtonGreed\":\"Dialogs_FieldButtonGreed__pgs7l\",\"dialogContainer\":\"Dialogs_dialogContainer__4-aI+\",\"x\":\"Dialogs_x__6nHnv\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport x from \"../../../assets/images/x.png\";\r\nimport {PointerCursor} from \"../../Dark_light_theme/globalStyles\";\r\n\r\n\r\nconst DialogItem = ({deleteDialog, dialogId, userPhoto, userName, userId, dialogUserID}) => {\r\n    let onMouseOverAction = () => {\r\n\r\n    }\r\n    return <div className={userId === dialogUserID ? classes.dialogCurrent : classes.dialog} >\r\n        <div className={classes.dialogItemGreed}>  {/*разделение фото имени с кнопкой закрытия диалога в диалогЛисте*/}\r\n            <div >\r\n                <NavLink to={'/dialogs/' + userId}> {/*навигация на диалог*/}\r\n                    <div className={classes.knopka}>\r\n                        <div className={classes.dialogList}>{/* Разделение фото и имени*/}\r\n                            <div>\r\n                                <img src={userPhoto} alt={\"userPhoto\"} className={classes.dialogImg}/> {/*Фото диалога*/}\r\n                            </div>\r\n                            <div>\r\n                                <div>{userName}</div> {/*имя*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <PointerCursor>\r\n                    <img src={x} alt={\"Удалить из своего диалогЛиста\"} className={classes.x}\r\n                         onMouseOver={onMouseOverAction} onClick={() => {\r\n                        deleteDialog(dialogId, userId)\r\n                    }} title={\"Удалить из своего диалогЛиста\"}/>\r\n                </PointerCursor>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageCommon\":\"Message_messageCommon__JBI1k\",\"timeStyle\":\"Message_timeStyle__nW8fG\",\"x\":\"Message_x__9QsEg\",\"messageswrapper\":\"Message_messageswrapper__KRV1p\",\"messageMyId\":\"Message_messageMyId__w6TOo\",\"messageNotMyId\":\"Message_messageNotMyId__wjpf9\"};","import React from 'react';\nimport classes from './Message.module.css';\nimport x from \"../../../assets/images/x.png\";\n\n\nconst Message = ({message, myID, userId, Date, MessageId, deleteMessage}) => {\n\n    let onMouseOverAction = () => {\n\n    }\n    return <div className={classes.messageswrapper}> {/*разделить сообщения на мои и собеседника поровну (право-лево)*/}\n        <div className={myID === userId ? classes.messageMyId : classes.messageNotMyId}> {/*в зависимости от того кто пишет, доп стили к тексту*/}\n            <span>{message}</span>\n            <img src={x} className={classes.x} onMouseOver={onMouseOverAction} onClick={()=>{deleteMessage(MessageId)}} alt={\"Удалить сообщение у всех\"} title = {\"Удалить сообщение у всех\"}/>\n            <span className={classes.timeStyle}>{Date.Hour}{\":\"}{Date.Minutes}</span>\n        </div>\n    </div>\n}\n\nexport default Message;\n\n","import React, {useEffect} from 'react'; // импорт реакта\r\nimport classes from './Dialogs.module.css';// css обработка\r\nimport DialogItem from \"./DialogItem/DialogItem\";// подкомпонента отрисовки диалогов через map\r\nimport Message from \"./Message/Message\";// подкомпонента отрисовки сообщений через map\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {Input} from \"../common/Validation/customFields\";\r\nimport {maxLengthCreator} from \"../common/Validation/validationField\";\r\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\";\r\nimport userPhotoAva from \"../../assets/images/no-image3.png\";\r\n\r\n\r\nconst newMessageForm = ({handleSubmit}) => {// компонента формы\r\n    return (\r\n        <form onSubmit={handleSubmit} /*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\r\n            <div className={classes.FieldButtonGreed}>\r\n                <div className={classes.FieldLeft}>\r\n                    <Field\r\n                        name={\"newMessageData\"}// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}//настраиваемый компонент текстовое поле для вывода ошибок ввода\r\n                        validate={[maxLengthCreator(100)]}//Required убрал\r\n                        placeholder={\"newMessage\"}// текст подсказка при пустом поле\r\n                    />\r\n                </div>\r\n                <div className={classes.buttonRight}>\r\n                    <button type=\"submit\">Submit</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// оберточная компонента формы, задает имя подстейта \"newMessageForm\"\r\nconst NewMessageReduxForm = reduxForm({form: \"newMessageForm\"})(newMessageForm)\r\n\r\nconst Dialogs = ({deleteDialog, dialogUserID, getDialogList, dialogs2, messages2, dispatch, sendMessage, getDialogLastUpdateTime, myID, deleteMessage}) => { // основная компонента отрисовки диалогов\r\n\r\n    let dialogElements = dialogs2.map((d) => // подкомпонента отрисовки всех диалогов через map\r\n        {\r\n            let userPhoto = d.userPhoto ? d.userPhoto : userPhotoAva; // если аватарки с сервера нет, подставить заглушку\r\n            return <DialogItem key={d.userId} userName={d.userName} userId={d.userId}\r\n                               userPhoto={userPhoto} dialogUserID={dialogUserID}\r\n                               deleteDialog={deleteDialog} dialogId={d.dialogId}\r\n            />\r\n        }\r\n    );\r\n\r\n    let messagesElements = messages2.map((m) => // подкомпонента отрисовки всех сообщений через map\r\n        <Message key={m.id+m.message} message={m.message} myID={myID} userId={m.userId} Date={m.Date} MessageId={m.id}\r\n                 deleteMessage={deleteMessage}/>);\r\n\r\n    let onSendMessageClick = (formDataNewMessage) => {// функция отправления данных формы нового сообщения в стейт\r\n        dispatch(reset('newMessageForm'))\r\n        sendMessage(formDataNewMessage.newMessageData);\r\n    };\r\n\r\n    useEffect(() => { // при очередном ререндере\r\n        const id = setInterval(() => { // задать цикл с интервалом в 1 сек\r\n            getDialogLastUpdateTime() // получить время обновления текущего диалога\r\n            getDialogList()// получить диалогЛист (мне кто то написал, или я начал диалог)\r\n        }, 1000)\r\n        return (() => {\r\n            clearInterval(id)\r\n        }) // для сброса цикла при очередном рендере\r\n    }, [getDialogLastUpdateTime, getDialogList]) // useEffect без зависимостей\r\n\r\n    return (\r\n        <div className={classes.dialogs} /*стиль всех диалогов*/>\r\n            <div>\r\n                <h3 className={classes.dialogListHeader}>dialogList</h3>\r\n                <div className={classes.dialogContainer}>\r\n                    <ScrollContainer // обернуть сообщения скролом\r\n                        child={dialogElements}\r\n                        height={window.screen.availHeight - 282} // высота поля скрола\r\n                        firstInsideContainer={\"DialogsUp\"}\r\n                        secondInsideContainer={\"DialogsDown\"}\r\n                        containerElement={\"DialogsContainer123\"}\r\n                    /> {/*отрисовка диалогов в скрол контейнере*/}</div>\r\n\r\n            </div>\r\n            <div>\r\n                <h3 className={classes.messagesHeader}>Messages</h3>\r\n\r\n                <ScrollContainer // обернуть сообщения скролом\r\n                    child={messagesElements}\r\n                    height={window.screen.availHeight - 282} // высота поля скрола\r\n                    firstInsideContainer={\"MessagesUp\"}\r\n                    secondInsideContainer={\"MessagesDown\"}\r\n                    containerElement={\"MessagesContainer\"}\r\n                /> {/*отрисовка сообщений в скрол контейнере*/}\r\n                <div><NewMessageReduxForm\r\n                    onSubmit={onSendMessageClick}/> {/*вызов формы сообщений с отсылкой на локальный обработчик сабмита*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {\r\n    deleteDialogThunkCreator,\r\n    deleteMessageThunkCreator,\r\n    getDialogLastUpdateTimeTnkCrt,\r\n    getDialogsThunkCreator, getFollowThunkCreator, getMyDialogListThunkCreator,\r\n    sendDialogsThunkCreator,\r\n    setdialogUserID,\r\n    setMessages, updateDialogListThunkCreator\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {NavigateToLoginHoc} from \"../hoc/NavigateToLoginHoc\";\r\nimport {compose} from \"redux\";\r\nimport {useParams} from \"react-router\";\r\nimport {getProfileThunkCreator} from \"../../redux/profile-reducer\";\r\n\r\nclass DialogsContainer extends React.Component {\r\n    commonPartMountUpdate = () => {// общая часть для componentDidMount и componentDidUpdate\r\n        if (!this.props.userID) { // если перешли на вкладку Dialogs с нулевым userID\r\n            if (this.props.messages2.length>0) { // если массив сообщений непустой\r\n                this.props.setMessages([]); // занулить массив сообщений (очистить список сообщений)\r\n                this.props.setdialogUserID(null) // занулить userID (убрать выделение диалога)\r\n            }\r\n            return\r\n        }\r\n        if ( this.props.dialogUserID!==this.props.userID) { // если считаный из URL userID не равен тому, что в BLL\r\n            this.props.setdialogUserID(this.props.userID) // задать в BLL считаный из URL ID\r\n            //здесь запросить профиль выбранного userId через getProfileThunkCreator\r\n            this.props.getProfileThunkCreator(this.props.userID, true, this.props.myID)// при переходе в диалог любого пользователя считать его данные профиля с сервера\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.getDialogList()\r\n        //      console.log(\"DialogsContainer -> componentDidMount\")\r\n        this.commonPartMountUpdate();// общая часть для componentDidMount и componentDidUpdate\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //       console.log(\"DialogsContainer -> componentDidUpdate\")\r\n        this.commonPartMountUpdate(); // общая часть для componentDidMount и componentDidUpdate\r\n        if  (this.props.dialogLastUpdateTime!==prevProps.dialogLastUpdateTime) { // если время обновления диалога изменилось\r\n            this.getDialogs()// запросить новые сообщения по диалогу\r\n        }\r\n    }\r\n\r\n    getDialogs = () => {\r\n        if (this.props.userID === \"\") {return}// при клике просто по вкладке Dialogs\r\n        this.props.getDialogsThunkCreator(this.props.myID, this.props.userID);// получить диалоги\r\n    }\r\n\r\n    getDialogLastUpdateTime = () => {\r\n        if (this.props.userID === \"\") {return}// при клике просто по вкладке Dialogs\r\n        this.props.getDialogLastUpdateTimeTnkCrt(this.props.myID, this.props.userID); // получить время последенего обновления диалога\r\n    }\r\n\r\n    getDialogList = () => {\r\n        this.props.getMyDialogListThunkCreator(this.props.myID)\r\n    }\r\n\r\n    sendMessage = (NewMessage) => { // отправка сообщения\r\n        let profilePage = this.props.profilePage // локальный стейт страницы пользователя\r\n        let userName = 0 // задаем переменную имени пользователя\r\n        let userPhoto = 0 // и его фото для отображения в диалоглисте\r\n        if (profilePage!==null) { // если профиль пользователя уже загружен\r\n            userName = this.props.profilePage.profile.fullName; // переопределить имя пользователя\r\n            userPhoto = this.props.profilePage.profile.photos.small; // и его фото и стейта\r\n        }\r\n\r\n        if (!this.props.userID) { // при клике просто по вкладке Dialogs\r\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\r\n            return\r\n        }\r\n\r\n        this.props.sendDialogsThunkCreator( // отправить сообщение\r\n            NewMessage,\r\n            this.props.auth.myID, // мой ID для формирования DialogList собеседника\r\n            this.props.auth.myLogin, // мой логин  для формирования DialogList собеседника\r\n            this.props.auth.myProfile.photos.small, // мое фото  для формирования DialogList собеседника\r\n            this.props.userID, // ID собеседника для формирования моего DialogList\r\n        ); // отправить сообщение\r\n\r\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\r\n            this.props.auth.myID, // мой ID\r\n            this.props.userID, // ID с кем веду диалог\r\n            userName, // его имя\r\n            userPhoto // и фото\r\n        )\r\n        //userId1, userId2, Name2, Photo2\r\n    }\r\n\r\n    deleteMessage = (messageID) => { // удалить сообщение по его ID в списке\r\n        this.props.deleteMessageThunkCreator(messageID, this.props.myID, this.props.userID);\r\n    }\r\n\r\n    deleteDialog = (dialogId, userId2) => {\r\n        this.props.deleteDialogThunkCreator(dialogId, this.props.myID, userId2)\r\n        // здесь сменить URL без ID\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render () {\r\n        return <div>\r\n            <Dialogs\r\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\r\n                dialogs ={this.props.dialogs} // список диалогов\r\n                dialogs2 ={this.props.dialogs2} // список диалогов с LocalStorage\r\n                {...this.props} // все входящие пропсы пробросили дальше\r\n                sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\r\n                getDialogs={this.getDialogs}  // проброс местного метода получить диалоги\r\n                getDialogLastUpdateTime={this.getDialogLastUpdateTime} // проброс метода - получить время обновления текущего диалога\r\n                myID={this.props.myID} // мой ID\r\n                deleteMessage = {this.deleteMessage} // удалить сообщение\r\n                getDialogList={this.getDialogList} // периодическая проверка написал ли кто мне, или я с кем диалог начал\r\n                dialogUserID = {this.props.dialogUserID}\r\n                deleteDialog = {this.deleteDialog}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps  = (dispatch) => {\r\n    return {\r\n\r\n        sendDialogsThunkCreator: (formDataNewMessage, myID, MyName, MyPhoto, userID) => { // отправить сообщение\r\n            dispatch(sendDialogsThunkCreator(formDataNewMessage, myID, MyName, MyPhoto, userID))\r\n        },\r\n        getDialogsThunkCreator: (myID, userID) => { // получить данные по текущему диалогу\r\n            dispatch(getDialogsThunkCreator(myID, userID))\r\n        },\r\n        setdialogUserID: (dialogUserID) => { // задать ID собеседника в BLL\r\n            dispatch(setdialogUserID(dialogUserID))\r\n        },\r\n        setMessages: (updatedMessages) => { // задать сообщения напрямую (для зануления)\r\n            dispatch(setMessages(updatedMessages))\r\n        },\r\n        getDialogLastUpdateTimeTnkCrt: (myID, userID) => { // получить время последнего обновления текущего диалога\r\n            dispatch(getDialogLastUpdateTimeTnkCrt(myID, userID))\r\n        },\r\n        deleteMessageThunkCreator: (messageID, myID, userID) => { // удалить сообщение из диалога\r\n            dispatch(deleteMessageThunkCreator(messageID, myID, userID))\r\n        },\r\n        getProfileThunkCreator: (dialogUserID, shouldUpdateDialogList, myID) => { // удалить сообщение из диалога\r\n            dispatch(getProfileThunkCreator(dialogUserID, shouldUpdateDialogList, myID))\r\n        },\r\n        getFollowThunkCreator: (dialogUserID) => { // удалить сообщение из диалога\r\n            dispatch(getFollowThunkCreator(dialogUserID))\r\n        },\r\n        getMyDialogListThunkCreator: (myID) => { // удалить сообщение из диалога\r\n            dispatch(getMyDialogListThunkCreator(myID))\r\n        },\r\n        updateDialogListThunkCreator: (userId1, userId2, Name2, Photo2) => { // удалить сообщение из диалога\r\n            dispatch(updateDialogListThunkCreator(userId1, userId2, Name2, Photo2))\r\n        },\r\n        deleteDialogThunkCreator: (dialogId, userId1, userId2) => { // удалить сообщение из диалога\r\n            dispatch(deleteDialogThunkCreator(dialogId, userId1, userId2))\r\n        },\r\n        dispatch: dispatch // для зануления redux-form\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth, // флаг, авторизован ли я сейчас,\r\n        myID: state.auth.myID, // мой ID (авторизованного пользователя)\r\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\r\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\r\n        dialogs: state.dialogsPage.dialogs, // список диалогов\r\n        dialogLastUpdateTime: state.dialogsPage.dialogLastUpdateTime,// время последнего времени обновления текущего диалога\r\n        dialogs2: state.dialogsPage.dialogs2, // список диалогов с LocalStorage\r\n\r\n        profilePage:state.profilePage, // страница профиля пользователя для создания dialogList\r\n        auth: state.auth,// страница моего профиля для создания dialogList\r\n    }\r\n}\r\n\r\nfunction withRouter (Children) { // функция получения данных из URL браузера\r\n    return (props) => {\r\n        let match = {params: useParams()} // получить данные ID из URL браузера\r\n        let userID = Number(match.params[\"*\"]); // получить локальный userId из URL браузера\r\n        return <Children {...props} match = {match} userID={userID}/>// добавить данные в оборачиваемую компоненту\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter, // получить данные ID из URL браузера и добавить в пропсы\r\n    NavigateToLoginHoc // проверка, залогинен ли я\r\n)\r\n(DialogsContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport let NavigateToLoginHoc = (Component) => { // оберточная компонента проверки на Login, оборачивающая целевую компоненту\r\n    class NavigateToLoginHocWithAuth extends React.Component { // внутренняя компонента уже с данными isAuth\r\n        render () {\r\n            if (!this.props.isAuth) { // условие что я не авторизован\r\n                return <Navigate to='../login'/>; // редирект на страницу Login\r\n            }\r\n            return <Component {...this.props}/> /// возврат целевой компоненты, если редиректа не было на Login\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(NavigateToLoginHocWithAuth)// добавляем в стейт флаги isAuth - \"я авторизован?\"\r\n}\r\n"],"names":["deleteDialog","dialogId","userPhoto","userName","userId","dialogUserID","className","classes","to","src","alt","x","onMouseOver","onClick","title","message","myID","Date","MessageId","deleteMessage","Hour","Minutes","NewMessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","name","component","Input","validate","maxLengthCreator","placeholder","type","getDialogList","dialogs2","messages2","dispatch","sendMessage","getDialogLastUpdateTime","dialogElements","map","d","userPhotoAva","messagesElements","m","id","useEffect","setInterval","clearInterval","ScrollContainer","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","formDataNewMessage","reset","newMessageData","DialogsContainer","commonPartMountUpdate","props","userID","setdialogUserID","getProfileThunkCreator","length","setMessages","getDialogs","getDialogsThunkCreator","getDialogLastUpdateTimeTnkCrt","getMyDialogListThunkCreator","NewMessage","profilePage","profile","fullName","photos","small","sendDialogsThunkCreator","auth","myLogin","myProfile","updateDialogListThunkCreator","alert","messageID","deleteMessageThunkCreator","userId2","deleteDialogThunkCreator","this","prevProps","prevState","snapshot","dialogLastUpdateTime","dialogs","React","compose","connect","state","isAuth","dialogsPage","MyName","MyPhoto","updatedMessages","shouldUpdateDialogList","getFollowThunkCreator","userId1","Name2","Photo2","Children","match","params","useParams","Number","NavigateToLoginHoc","mapStateToProps","Component","NavigateToLoginHocWithAuth"],"sourceRoot":""}