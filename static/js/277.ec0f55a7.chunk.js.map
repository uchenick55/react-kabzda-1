{"version":3,"file":"static/js/277.ec0f55a7.chunk.js","mappings":"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","sources":["components/FeedBack/FeedBackFormik/FeedBackFormik.tsx","components/Info/FeedBackInfoShort.tsx","components/FeedBack/FeedBackBS.tsx","components/FeedBack/FeedBackContainer.tsx"],"sourcesContent":["import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport {apiFeedBackDataType} from \"../../common/types/commonTypes\";\n\nconst myInitialValues = { // начальные зачения форм\n    name: \"\",\n    email: \"\",\n    message: \"\",\n}\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address'),\n    message: Yup.string()\n        .required('Required'),\n})\n\ntype FeedBackFormikType = {\n    sendFeedBack: (data:apiFeedBackDataType) => void,\n}\nconst FeedBackFormik:React.FC<FeedBackFormikType> = ({sendFeedBack}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:apiFeedBackDataType, {resetForm}:any) => { // действия по сабмиту\n        sendFeedBack(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (<div>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div>\n                            <div>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"Ваше имя\"\n                                    autoFocus={false}\n                                    name='name'\n                                    type='text'\n                                    placeholder='имя'\n                                    leftLabelLength='7rem'\n\n                                />\n\n                                <MyTextInput // email\n                                    label=\"Email\"\n                                    autoFocus={false}\n                                    name='email'\n                                    type='email'\n                                    placeholder='email'\n                                    leftLabelLength='7rem'\n                                />\n\n                                <MyTextInput // сообщение\n                                    label=\"Сообщение * \"\n                                    autoFocus={false}\n                                    name='message'\n                                    type='textarea'\n                                    placeholder='сообщение'\n                                    leftLabelLength='7rem'\n                                />\n\n                                <Row className=\"mx-1\">\n\n                                    <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                                        Submit\n                                    </Button>\n                                </Row>\n                            </div>\n                        </div>\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </div>\n\n    )\n}\n\nexport default FeedBackFormik\n\n","import React from \"react\";\r\n\r\ntype FeedBackInfoShortType = {}\r\nconst FeedBackInfoShort:React.FC<FeedBackInfoShortType> = () => {\r\n    return (<div>\r\n        <p>Проверить отправку почты можно на тестовом почтовом ящике {\" \"}\r\n            <a href=\"https://passport.yandex.ru/auth/\">яндекс почты</a>: <br/>\r\n            testfeedback2023 <br/>\r\n            testfeedback2023_password <br/>\r\n        </p>\r\n    </div>)\r\n}\r\n\r\nexport default FeedBackInfoShort\r\n","import React, {useState} from \"react\";\nimport FeedBackFormik from \"./FeedBackFormik/FeedBackFormik\";\nimport commonClasses from \"../common/CommonClasses/common.module.css\";\nimport Container from \"react-bootstrap/Container\";\nimport ModalBS1 from \"../common/ModalBS/ModalBS1\";\nimport FeedBackInfoShort from \"../Info/FeedBackInfoShort\";\nimport {apiFeedBackDataType} from \"../common/types/commonTypes\";\n\ntype FeedBackType = {\n    feedBackStatus: string\n    sendFeedBack: (data:apiFeedBackDataType) => void,\n    setFeedBackStatus:(feedBackStatus:string)=>void\n\n}\nconst FeedBack:React.FC<FeedBackType> = ({sendFeedBack, feedBackStatus, setFeedBackStatus}) => {\n\n    const [show, setShow] = useState(true); // хук задания флага показать ли модальное окно\n\n    if (feedBackStatus) { // если статус feedback из BLL не пустой\n        const modalHeader: JSX.Element = <div>Спасибо!</div>\n        const modalBody: JSX.Element = <div>{feedBackStatus}</div>\n        const buttonOnClick = () => {\n            setFeedBackStatus(\"\")\n        }\n\n        return <div>\n            <ModalBS1\n                show={show} // флаг показать ли модальное окно\n                setShow={setShow} // колбек смены флага показать модальное окно\n\n                modalHeader={modalHeader} // заголовок модального окна\n                modalBody={modalBody} // тело модального окна\n                buttonOnClick={buttonOnClick} // действие по кнопке модального окна\n                buttonName={\"Закрыть\"} // текст кнопки\n            />\n        </div>\n    }\n\n    return <div>\n        <h2 className={commonClasses.pageHeader}>FeedBack</h2>\n        <Container fluid>\n            <FeedBackFormik sendFeedBack={sendFeedBack}/>\n            <div className='my-3'><FeedBackInfoShort/></div>\n\n        </Container>\n    </div>\n\n};\n\nexport default FeedBack;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {postFeedBackThunkCreator2,feedBackActions} from \"../../redux/feedback-reducer\";\nimport FeedBack from \"./FeedBackBS\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {apiFeedBackDataType} from \"../common/types/commonTypes\";\n\nconst {setFeedBackStatus} = feedBackActions\n\nconst FeedBackContainer:React.FC<mapStateToPropsType & mapDispatchToPropsType> = (\n    {postFeedBackThunkCreator2, feedBackStatus, setFeedBackStatus}) => {\n\n    const sendFeedBack = (data:apiFeedBackDataType) => {\n        postFeedBackThunkCreator2(data)// отправка фидбека из api\n    }\n\n    return <div>\n        <FeedBack\n            sendFeedBack={sendFeedBack} // колбек отправки сообщения из контейнера\n            feedBackStatus={feedBackStatus} // фидбэк статус из BLL\n            setFeedBackStatus={setFeedBackStatus} // задать статус (обнулить для отправки нового сообщения)\n        />\n    </div>\n}\n\nconst mapStateToProps = (state:GlobalStateType) => {\n    return {\n        feedBackStatus: state.feedback.feedBackStatus // статус отправки сообщения на сервер\n    }\n}\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\n\ntype mapDispatchToPropsType = {\n\n\n    postFeedBackThunkCreator2: (data:apiFeedBackDataType) =>void\n    setFeedBackStatus:(feedBackStatus:string)=>void\n}\n\nexport default connect<\n    mapStateToPropsType,\n    mapDispatchToPropsType,\n    unknown,\n    GlobalStateType\n    >(mapStateToProps,\n    {postFeedBackThunkCreator2, setFeedBackStatus})(FeedBackContainer);\n"],"names":["myInitialValues","name","email","message","myValidationSchema","Yup","required","_ref","sendFeedBack","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","_jsxs","MyTextInput","label","autoFocus","type","placeholder","leftLabelLength","Row","className","Button","href","feedBackStatus","setFeedBackStatus","_useState","useState","_useState2","_slicedToArray","show","setShow","modalHeader","modalBody","ModalBS1","buttonOnClick","buttonName","commonClasses","Container","fluid","FeedBackFormik","FeedBackInfoShort","feedBackActions","connect","state","feedback","postFeedBackThunkCreator2","FeedBack","data"],"sourceRoot":""}