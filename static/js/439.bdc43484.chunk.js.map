{"version":3,"file":"static/js/439.bdc43484.chunk.js","mappings":"2NACA,EAAgC,gCAAhC,EAAmO,mCAAnO,EAAsR,gC,oBCAtR,EAA8B,oCAA9B,EAA0I,wC,mBCMtIA,EAAkB,CAClBC,WAAY,IAEZC,EAAqBC,EAAAA,GAAW,CAAE,GA0DtC,EAvDuB,SAAH,GAAwB,IAAnBC,EAAY,EAAZA,aAMrB,OACI,iCACQ,6BACI,gBAAKC,UAAWC,EAAoB,SAAC,uFAE7C,SAAC,KAAM,CACHC,cAAeP,EACfQ,iBAAkBN,EAClBO,SAbO,SAACC,EAAO,GAAkB,IAAhBC,EAAS,EAATA,UACzBP,EAAaM,GACbC,GACJ,EAUiC,SAGpB,YACgB,EAAXC,YAAW,OAEb,SAAC,KAAI,WACD,gBAAKP,UAAWC,EAAwB,UACpC,4BACI,SAAC,KAAY,CACTO,MAAM,8CACNC,KAAK,OACLC,KAAK,OACLC,YAAY,wBAEhB,SAAC,KAAY,CACTH,MAAM,QACNC,KAAK,QACLC,KAAK,QACLC,YAAY,WAEjB,SAAC,KAAW,CACRH,MAAM,qGACNC,KAAK,UACLC,KAAK,WACLC,YAAY,yDACZC,WAAW,KAEd,oBAAQF,KAAK,SAAQ,UAAC,IAA6B,kBAMxD,MAK3B,EC3BA,EAnCiB,SAAH,GAA2D,IAAtDX,EAAY,EAAZA,aAAcc,EAAc,EAAdA,eAAgBC,EAAiB,EAAjBA,kBACzCC,EAAmB,SAACC,GACpB,OAAO,gBAAKhB,UAAWC,EAAyB,SAC3Ce,EAAMC,UAEf,EAEA,OAAIJ,GAEI,0BACI,UAACE,EAAgB,WAAC,KACd,yBAAK,iDACL,yBAAMF,KAEN,mBAAQb,UAAWC,EAAuBiB,QAAS,WAC/CJ,EAAkB,GACtB,EAAE,SAAC,gGASf,iBAAKd,UAAWC,EAAsB,UAAC,KACnC,0BACI,SAAC,EAAc,CAACF,aAAcA,OAElC,qBAIZ,EChCMoB,EAAiB,qJAIlB,OAJkB,oCAEnBpB,aAAe,SAACqB,GACZ,EAAKJ,MAAMK,0BAA0BD,EACzC,EAAC,EAUA,OAVA,8BAED,WACI,OAAO,0BACH,SAAC,EAAQ,CACLrB,aAAcuB,KAAKvB,aACnBc,eAAgBS,KAAKN,MAAMH,eAC3BC,kBAAmBQ,KAAKN,MAAMF,qBAG1C,KAAC,EAdkB,CAASS,EAAAA,WAuBhC,GAAeC,EAAAA,EAAAA,KANO,SAACC,GACnB,MAAO,CACHZ,eAAgBY,EAAMC,SAASb,eAEvC,GAGI,CAACQ,0BAAAA,EAAAA,GAA2BP,kBAAAA,EAAAA,IADhC,CACoDK,E","sources":["webpack://my-app/./src/components/FeedBack/FeedBack.module.css?b10b","webpack://my-app/./src/components/FeedBack/FeedBackFormik/FeedBackFormik.module.css?9652","components/FeedBack/FeedBackFormik/FeedBackFormik.jsx","components/FeedBack/FeedBack.jsx","components/FeedBack/FeedBackContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"feedBackGreed\":\"FeedBack_feedBackGreed__xb18p\",\"FeedBackSuccess\":\"FeedBack_FeedBackSuccess__tFRsF\",\"legendStyle\":\"FeedBack_legendStyle__rOg3O\",\"fieldSetStyle\":\"FeedBack_fieldSetStyle__ifcUC\",\"sendMessageBoard\":\"FeedBack_sendMessageBoard__UG9aW\",\"buttonSuccess\":\"FeedBack_buttonSuccess__8u00M\"};","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"FeedBackFormik_legendStyle__VL04a\",\"fieldSetStyle\":\"FeedBackFormik_fieldSetStyle__w9E7H\",\"fieldButtonGrid\":\"FeedBackFormik_fieldButtonGrid__HAXfT\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./FeedBackFormik.module.css\"\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\nimport {MyTextArea, MyTextInput} from \"../../common/formikCommon/MyFields\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\nconst FeedBackFormik = ({sendFeedBack}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\n        sendFeedBack(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <fieldset>\n                <legend>\n                    <div className={classes.legendStyle}>Обратная связь</div>\n                </legend>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div className={classes.fieldButtonGrid}>\n                            <div>\n                                <MyTextInput // сообщение в MyPosts\n                                    label=\"Ваше имя\"\n                                    name='name'\n                                    type='text'\n                                    placeholder='имя'\n                                />\n                                <MyTextInput // email\n                                    label=\"Email\"\n                                    name='email'\n                                    type='email'\n                                    placeholder='email'\n                                />\n                               <MyTextArea // сообщение в MyPosts\n                                   label=\"Введите сообщение*\"\n                                   name='message'\n                                   type='textarea'\n                                   placeholder='сообщение'\n                                   autoFocus={true}\n                               />\n                                <button type=\"submit\"> {/*кнопка отправить форму*/}\n                                    Submit\n                                </button>\n                            </div>\n                        </div>\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </fieldset>\n    )\n}\n\nexport default FeedBackFormik\n\n","import React from \"react\";\nimport classes from \"./FeedBack.module.css\";\nimport FeedBackFormik from \"./FeedBackFormik/FeedBackFormik\";\n\nconst FeedBack = ({sendFeedBack, feedBackStatus, setFeedBackStatus}) => {\n    let SendMessageBoard = (props) => {\n        return <div className={classes.sendMessageBoard}>{/*стилизация отправки данных на сервер*/}\n            {props.children}\n        </div>\n    }\n\n    if (feedBackStatus) { // если статус feedback из BLL не пустой\n        return (\n            <div>\n                <SendMessageBoard> {/*стилизация отправки данных на сервер*/}\n                    <div>Спасибо!</div>\n                    <div>{feedBackStatus}</div>\n                    {/*отобразить статус*/}\n                    <button className={classes.buttonSuccess} onClick={() => {\n                        setFeedBackStatus(\"\")\n                    }}>Новое сообщение\n                    </button>\n                    {/*обнуление статуса и отображение формы*/}\n                </SendMessageBoard>\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.feedBackGreed}> {/*растягивание полей ввода не на весь экран*/}\n            <div>\n                <FeedBackFormik sendFeedBack={sendFeedBack}/>\n            </div>\n            <div>\n            </div>\n        </div>\n    );\n};\n\nexport default FeedBack;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {postFeedBackThunkCreator2, setFeedBackStatus} from \"../../redux/feedback-reducer\";\nimport FeedBack from \"./FeedBack\";\n\nclass FeedBackContainer extends React.Component {\n\n    sendFeedBack = (data) => {\n        this.props.postFeedBackThunkCreator2(data)// отправка фидбека из api\n    }\n\n    render () {\n        return <div>\n            <FeedBack\n                sendFeedBack={this.sendFeedBack} // колбек отправки сообщения из контейнера\n                feedBackStatus={this.props.feedBackStatus} // фидбэк статус из BLL\n                setFeedBackStatus={this.props.setFeedBackStatus} // задать статус (обнулить для отправки нового сообщения)\n            />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        feedBackStatus: state.feedback.feedBackStatus // статус отправки сообщения на сервер\n    }\n}\n\nexport default connect(mapStateToProps,\n    {postFeedBackThunkCreator2, setFeedBackStatus})(FeedBackContainer);\n"],"names":["myInitialValues","newMessage","myValidationSchema","Yup","sendFeedBack","className","classes","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","label","name","type","placeholder","autoFocus","feedBackStatus","setFeedBackStatus","SendMessageBoard","props","children","onClick","FeedBackContainer","data","postFeedBackThunkCreator2","this","React","connect","state","feedback"],"sourceRoot":""}