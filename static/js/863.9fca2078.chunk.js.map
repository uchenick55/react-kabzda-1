{"version":3,"file":"static/js/863.9fca2078.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialog2Messages2/dialog2Messages2COM.module.scss?b62d","webpack://my-app/./src/components/Dialog2Messages2/Dialog2/dialog2Render.module.css?aae0","components/common/ErrorBoundary/GetDate.tsx","components/Dialog2Messages2/Dialog2/Dialog2Item.tsx","assets/images/swg/magnifying-glass.svg","components/Dialog2Messages2/Dialog2/Dialog2SearchRender.tsx","components/Dialog2Messages2/Dialog2/Dialog2Render.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/messages2Render.module.scss?0979","assets/images/swg/dust-bin2.svg","assets/images/swg/spam1.svg","assets/images/swg/restore1.svg","components/Dialog2Messages2/Messages2/Msg2DropDownMenu.tsx","components/Dialog2Messages2/Messages2/Messages2Item.tsx","assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/Dialog2Messages2/Messages2/Msg2SendMessageRender.module.css?17c7","components/Dialog2Messages2/Messages2/Msg2SendMessageRender.tsx","components/Dialog2Messages2/Messages2/Msg2HeaderNamePhoto.tsx","components/Dialog2Messages2/Messages2/Messages2Render.tsx","components/Dialog2Messages2/Dialog2Messages2COM.tsx","components/Dialog2Messages2/Dialog2Messages2Container.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog2Messages2Common\":\"dialog2Messages2COM_dialog2Messages2Common__yrugD\",\"Fixed\":\"dialog2Messages2COM_Fixed__8oFn8\"};","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"dialog2Render_Fixed__yAlTJ\",\"dialog2ListCommon\":\"dialog2Render_dialog2ListCommon__ZMqFo\",\"MobileDialogWidth\":\"dialog2Render_MobileDialogWidth__ahAt-\",\"DesktopDialogWidth\":\"dialog2Render_DesktopDialogWidth__zSxVR\",\"Dialog2ItemCardExt\":\"dialog2Render_Dialog2ItemCardExt__LODJo\",\"Dialog2ItemCardInt\":\"dialog2Render_Dialog2ItemCardInt__HQqPI\",\"Dialog2ItemCardName\":\"dialog2Render_Dialog2ItemCardName__zSixE\",\"Dialog2ItemCardPhoto\":\"dialog2Render_Dialog2ItemCardPhoto__jPmgw\",\"Dialog2ItemCardNewMsgCnt\":\"dialog2Render_Dialog2ItemCardNewMsgCnt__TrWvv\",\"Dialog2ItemCardMsgTime\":\"dialog2Render_Dialog2ItemCardMsgTime__2bCd+\",\"dialog2HeaderCommon\":\"dialog2Render_dialog2HeaderCommon__YO-4Y\",\"Dialog2SearchInput\":\"dialog2Render_Dialog2SearchInput__uF7Sy\",\"MagnifyingGlass\":\"dialog2Render_MagnifyingGlass__VpERP\"};","export type DataReturn2Type = {\n    \"Year\": string,\n    \"Month\": string,\n    \"Day\": string,\n    \"Hour\": string,\n    \"Minutes\": string,\n    \"Seconds\": string,\n    isToday: boolean\n};\ntype GetDateType = (customDate:string) => DataReturn2Type\n\nconst GetDate:GetDateType= (customDate) => {\n    let Data = new Date( !customDate? 0: new Date(customDate).getTime() + 3*3600*1000)\n\n    const isToday: boolean = !!customDate && // этот день сегодня?\n        new Date().getFullYear() ===  Data.getFullYear() &&\n        new Date().getMonth() === Data.getMonth() &&\n        new Date().getDate() === Data.getDate()\n\n    const Year =(\"0\" + Data.getFullYear()).substr(-4) ;\n    const Month =  Data.getMonth();\n    const Day = (\"0\" +  Data.getDate()).substr(-2);\n    const Hour = (\"0\" + Data.getHours()).substr(-2);\n    const Minutes = (\"0\" + Data.getMinutes()).substr(-2) ;\n    const Seconds = (\"0\" + Data.getSeconds()).substr(-2);\n    let fMonth;\n\n    switch (Month)\n    {\n        case 0: fMonth=\"01\"; break;\n        case 1: fMonth=\"02\"; break;\n        case 2: fMonth=\"03\"; break;\n        case 3: fMonth=\"04\"; break;\n        case 4: fMonth=\"05\"; break;\n        case 5: fMonth=\"06\"; break;\n        case 6: fMonth=\"07\"; break;\n        case 7: fMonth=\"08\"; break;\n        case 8: fMonth=\"09\"; break;\n        case 9: fMonth=\"10\"; break;\n        case 10: fMonth=\"11\"; break;\n        case 11: fMonth=\"12\"; break;\n        default: fMonth=\"\"; break;\n    }\n    return {\n        \"Year\": Year,\n        \"Month\": fMonth,\n        \"Day\": Day,\n        \"Hour\": Hour,\n        \"Minutes\": Minutes,\n        \"Seconds\": Seconds,\n        isToday: isToday\n    }\n}\nexport default GetDate\n","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\nimport GetDate from \"../../common/ErrorBoundary/GetDate\";\n\ntype Dialog2ItemType = {\n    userName: string, //\"evgeniysazonov\"\n    hasNewMessages: boolean,\n    lastDialogActivityDate: string, //\"2023-04-30T19:10:31.843\"\n    newMessagesCount: number, //0\n    photos: {\n        small: string,// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user-small.jpg?v=1\",\n        large: string// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user.jpg?v=1\"\n    },\n    id: number\n}\nconst Dialog2Item: React.FC<Dialog2ItemType> = (\n    {userName, hasNewMessages, photos, lastDialogActivityDate, newMessagesCount, id}) => {\n    const DateLocal = GetDate(lastDialogActivityDate) // получаем дату последнего сообщения\n    return <div className={classes.Dialog2ItemCardExt}>\n        <NavLink to={'/messages/' + id}>\n            <div className={classes.Dialog2ItemCardInt}>\n                <div className={classes.Dialog2ItemCardName}>{userName}</div>   {/*Имя пользователя*/}\n                {hasNewMessages && <div\n                    className={classes.Dialog2ItemCardNewMsgCnt}>{newMessagesCount}</div>} {/*вывод количества новых сообщений*/}\n                <img src={photos.small ? photos.small : userPhoto} className={classes.Dialog2ItemCardPhoto}\n                     alt=\"CardPhoto\"/> {/*Фото*/}\n                <div className={classes.Dialog2ItemCardMsgTime}>{\n\n                    DateLocal.isToday\n                        ? <span> {DateLocal.Hour }:{DateLocal.Minutes}</span>\n                        : <span> {DateLocal.Day } {DateLocal.Month} {DateLocal.Year}</span>\n\n                }</div>\n                {/*Время*/}\n            </div>\n        </NavLink>\n    </div>\n}\nexport default React.memo(Dialog2Item)\n","var _g, _g2, _g3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgMagnifyingGlass(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"64px\",\n    height: \"64px\",\n    viewBox: \"0 0 1024 1024\",\n    className: \"icon\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"#000000\",\n    transform: \"matrix(-1, 0, 0, 1, 0, 0)\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"SVGRepo_bgCarrier\",\n    strokeWidth: 0\n  })), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"SVGRepo_tracerCarrier\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"SVGRepo_iconCarrier\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M448 768A320 320 0 1 0 448 128a320 320 0 0 0 0 640z m297.344-76.992l214.592 214.592-54.336 54.336-214.592-214.592a384 384 0 1 1 54.336-54.336z\",\n    fill: \"#000000\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMagnifyingGlass);\nexport default __webpack_public_path__ + \"static/media/magnifying-glass.09322c4362d187ef0b64355ff9c574e8.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport MagnifyingGlass from \"../../../assets/images/swg/magnifying-glass.svg\"\n\ntype Dialog2SearchRenderType = {\n    SearchValue: string // поисковый запрос в списке диалогов\n    setSearchValue: (SearchValue:string)=>void // функция обновления локального стейта поиска в списке диалогов\n}\nconst Dialog2SearchRender: React.FC<Dialog2SearchRenderType> = ({SearchValue, setSearchValue})=>{\n    return <div>\n        <input\n            placeholder={\"Поиск\"}\n            value={SearchValue}\n            onChange={(event => setSearchValue(event.target.value))}\n            type=\"text\"\n            className={classes.Dialog2SearchInput} />\n        <img src={MagnifyingGlass} className={classes.MagnifyingGlass} alt=\"Поиск\"/>\n    </div>\n}\nexport default Dialog2SearchRender\n","import React, {useState} from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport {getDialog2AllType} from \"../../api/apiTypes\";\nimport Dialog2Item from \"./Dialog2Item\";\nimport Dialog2SearchRender from \"./Dialog2SearchRender\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n}\nconst Dialog2Render: React.FC<Dialog2RenderType> = (\n    {PageWidth, MobileWidth, patch, Dialog2All}\n) => {\n    const [SearchValue, setSearchValue] = useState<string>( \"\" ) // локальный стейт поискового запроса в диалогах\n    const Dialog2AllFiltered: getDialog2AllType = Dialog2All && Dialog2All.filter( d2 => { //если список диалогов есть,\n        return d2.userName.toLowerCase().includes( SearchValue.toLowerCase() ) // фильтруем по поисковому запросу\n    } )\n    return <div>\n        { // Компонента Dialog2Render отрисовывается на странице dialog всегда.\n            // На странице messages только при десктопной версии\n            ((patch === \"messages\" && PageWidth > MobileWidth) || (patch === \"dialog2\"))\n            && <div>\n                <div  //Fixed слева вверху.\n                    // Поле остается на странице dialog2 всегда.\n                    // На странице messages только при десктопной версии\n                    className={`${classes.Fixed} ${classes.dialog2HeaderCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\n                    /*поиск по именам списка диалогов, с задержкой после ввода, без кнопки отправить*/\n\n                ><Dialog2SearchRender SearchValue={SearchValue} setSearchValue={setSearchValue}/>\n                </div>\n                <div // Fixed слева внизу + прокрутка. Поле остается на странице dialog2 всегда\n                    className={`${classes.Fixed} ${classes.dialog2ListCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\n                >\n                    {Dialog2AllFiltered.map( d2 => {\n                        const {id, userName, hasNewMessages, lastDialogActivityDate, newMessagesCount, photos} = d2\n                        return <Dialog2Item\n                            key={id} userName={userName} hasNewMessages={hasNewMessages} photos={photos}\n                            lastDialogActivityDate={lastDialogActivityDate} newMessagesCount={newMessagesCount}\n                            id={id}/>\n                    } )}\n                    {/*список диалогов с фильтрацией по имени из заголовка. */}\n                </div>\n            </div>}\n\n    </div>\n}\nexport default React.memo( Dialog2Render )\n","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"messages2Render_Fixed__baHQ8\",\"messages2NameAndProfileLink\":\"messages2Render_messages2NameAndProfileLink__gsVN6\",\"messages2ChooseDialog\":\"messages2Render_messages2ChooseDialog__JKbif\",\"messages2RenderMessages\":\"messages2Render_messages2RenderMessages__Ebe0U\",\"messages2PrintMessage\":\"messages2Render_messages2PrintMessage__dhozP\",\"MobileMessagesLeft\":\"messages2Render_MobileMessagesLeft__6JOQ+\",\"DesktopMessagesLeft\":\"messages2Render_DesktopMessagesLeft__rsM5T\",\"Msg2HeaderName\":\"messages2Render_Msg2HeaderName__Mw++x\",\"Msg2HeaderPhoto\":\"messages2Render_Msg2HeaderPhoto__XGI9W\",\"Msg2HeaderActivityDate\":\"messages2Render_Msg2HeaderActivityDate__ZWTOr\",\"myIdNotMyIdMsg2ComExt\":\"messages2Render_myIdNotMyIdMsg2ComExt__oPyxL\",\"myIdMessageExt\":\"messages2Render_myIdMessageExt__41EAp\",\"NOTmyIdMessageExt\":\"messages2Render_NOTmyIdMessageExt__5fs33\",\"myIdNotMyIdMsg2ComInt\":\"messages2Render_myIdNotMyIdMsg2ComInt__Estd7\",\"myIdMessageInt\":\"messages2Render_myIdMessageInt__xSaFZ\",\"NOTmyIdMessageInt\":\"messages2Render_NOTmyIdMessageInt__hPt2K\",\"Msg2DropDownMenuExt\":\"messages2Render_Msg2DropDownMenuExt__az4N7\",\"Msg2DropDownMenuIntCommon\":\"messages2Render_Msg2DropDownMenuIntCommon__vMw3j\",\"Msg2DropDownMenuIntMy\":\"messages2Render_Msg2DropDownMenuIntMy__6FgWz\",\"Msg2DropDownMenuIntNotMy\":\"messages2Render_Msg2DropDownMenuIntNotMy__Yf+sf\",\"Msg2DropDownItems\":\"messages2Render_Msg2DropDownItems__Qu0q7\",\"positionRelative\":\"messages2Render_positionRelative__ovQvp\",\"DropdownItem\":\"messages2Render_DropdownItem__AtL0R\",\"imgDelete\":\"messages2Render_imgDelete__qGmmU\",\"imgSpam\":\"messages2Render_imgSpam__tMesr\",\"imgRestore\":\"messages2Render_imgRestore__YIG+H\",\"Msg2ItemAdedAtCommon\":\"messages2Render_Msg2ItemAdedAtCommon__JW5T8\",\"ColorMy\":\"messages2Render_ColorMy__HqHhB\",\"ColorNotMy\":\"messages2Render_ColorNotMy__X-mAo\",\"Msg2DeletedText\":\"messages2Render_Msg2DeletedText__lBh9V\",\"Msg2DeletedPic\":\"messages2Render_Msg2DeletedPic__V5oiT\",\"Msg2SpamPic\":\"messages2Render_Msg2SpamPic__wTzWN\",\"Msg2Body\":\"messages2Render_Msg2Body__dWvTp\",\"Msg2DateExt\":\"messages2Render_Msg2DateExt__3e0xK\",\"Msg2DateInt\":\"messages2Render_Msg2DateInt__G4Q4g\"};","var _style, _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDustBin2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"800px\",\n    width: \"800px\",\n    id: \"_x32_\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 512 512\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\r\\n\\t.st0{fill:#000000;}\\r\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M88.594,464.731C90.958,491.486,113.368,512,140.234,512h231.523c26.858,0,49.276-20.514,51.641-47.269 l25.642-335.928H62.952L88.594,464.731z M420.847,154.93l-23.474,307.496c-1.182,13.37-12.195,23.448-25.616,23.448H140.234 c-13.42,0-24.434-10.078-25.591-23.132L91.145,154.93H420.847z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M182.954,435.339c5.877-0.349,10.35-5.4,9.992-11.269l-10.137-202.234c-0.358-5.876-5.401-10.349-11.278-9.992 c-5.877,0.357-10.35,5.409-9.993,11.277l10.137,202.234C172.033,431.231,177.085,435.696,182.954,435.339z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M256,435.364c5.885,0,10.656-4.763,10.656-10.648V222.474c0-5.885-4.771-10.648-10.656-10.648 c-5.885,0-10.657,4.763-10.657,10.648v202.242C245.344,430.601,250.115,435.364,256,435.364z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M329.046,435.339c5.878,0.357,10.921-4.108,11.278-9.984l10.129-202.234c0.348-5.868-4.116-10.92-9.993-11.277 c-5.877-0.357-10.92,4.116-11.277,9.992L319.054,424.07C318.697,429.938,323.17,434.99,329.046,435.339z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M439.115,64.517c0,0-34.078-5.664-43.34-8.479c-8.301-2.526-80.795-13.566-80.795-13.566l-2.722-19.297 C310.388,9.857,299.484,0,286.642,0h-30.651H225.34c-12.825,0-23.728,9.857-25.616,23.175l-2.721,19.297 c0,0-72.469,11.039-80.778,13.566c-9.261,2.815-43.357,8.479-43.357,8.479C62.544,67.365,55.332,77.172,55.332,88.38v21.926h200.66 h200.676V88.38C456.668,77.172,449.456,67.365,439.115,64.517z M276.318,38.824h-40.636c-3.606,0-6.532-2.925-6.532-6.532 s2.926-6.532,6.532-6.532h40.636c3.606,0,6.532,2.925,6.532,6.532S279.924,38.824,276.318,38.824z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDustBin2);\nexport default __webpack_public_path__ + \"static/media/dust-bin2.85ba7792a26715a7b4844146f0fe8516.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSpam1(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    height: \"800px\",\n    width: \"800px\",\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 319.459 319.459\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.707,97.032l-124.686-76.3c-11.283-6.904-25.301-6.904-36.584,0l-124.686,76.3C6.419,103.356,0,114.809,0,126.924 v141.937c0,19.323,15.721,35.044,35.044,35.044h249.371c19.323,0,35.044-15.721,35.044-35.044V126.924 C319.459,114.809,313.04,103.356,302.707,97.032z M151.877,37.792c2.422-1.482,5.137-2.223,7.853-2.223 c2.715,0,5.431,0.741,7.853,2.223l123.206,75.395l-94.152,61.831v-7.864c12.352-4.763,21.142-16.751,21.142-30.761v-15.071 c0-5.523-4.478-10-10-10s-10,4.477-10,10v15.071c0,2.682-0.819,5.176-2.219,7.246c-2.226-8.225-7.755-15.104-15.075-19.115 l8.426-15.87c2.59-4.878,0.735-10.932-4.143-13.522c-4.88-2.589-10.933-0.734-13.521,4.143l-11.391,21.454h-0.247l-11.391-21.454 c-2.59-4.878-8.644-6.733-13.521-4.143s-6.732,8.644-4.143,13.522l8.426,15.87c-7.32,4.011-12.849,10.891-15.075,19.115 c-1.401-2.07-2.219-4.564-2.219-7.246v-15.071c0-5.523-4.478-10-10-10s-10,4.477-10,10v15.071c0,14.01,8.79,25.998,21.142,30.761 v7.864l-94.152-61.831L151.877,37.792z M153.823,140.729h11.813c6.065,0,11,4.935,11,11v23.345c0,6.065-4.935,11-11,11h-11.813 c-6.065,0-11-4.935-11-11v-23.345C142.823,145.663,147.758,140.729,153.823,140.729z M284.415,283.905H35.044 c-8.295,0-15.044-6.749-15.044-15.044V131.42l119.885,78.731c6.028,3.958,12.937,5.937,19.845,5.937s13.817-1.979,19.845-5.937 l119.885-78.73v137.441C299.459,277.156,292.71,283.905,284.415,283.905z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M97.094,233.038h10.882c3.866,0,7-3.134,7-7s-3.134-7-7-7H97.094c-9.86,0-17.882,8.022-17.882,17.882 s8.021,17.882,17.882,17.882c2.141,0,3.882,1.741,3.882,3.882s-1.741,3.882-3.882,3.882H86.212c-3.866,0-7,3.134-7,7s3.134,7,7,7 h10.882c9.86,0,17.882-8.022,17.882-17.882s-8.021-17.882-17.882-17.882c-2.141,0-3.882-1.741-3.882-3.882 S94.953,233.038,97.094,233.038z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M138.184,219.038h-10.882c-3.866,0-7,3.134-7,7v43.527c0,3.866,3.134,7,7,7s7-3.134,7-7v-14.764h3.882 c9.86,0,17.882-8.022,17.882-17.882S148.044,219.038,138.184,219.038z M138.184,240.802h-3.882v-7.764h3.882 c2.141,0,3.882,1.741,3.882,3.882S140.324,240.802,138.184,240.802z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M179.273,219.038c-9.86,0-17.882,8.022-17.882,17.882v32.646c0,3.866,3.134,7,7,7s7-3.134,7-7v-14.764h7.764v14.764 c0,3.866,3.134,7,7,7s7-3.134,7-7V236.92C197.155,227.06,189.134,219.038,179.273,219.038z M175.392,240.802v-3.882 c0-2.141,1.741-3.882,3.882-3.882s3.882,1.741,3.882,3.882v3.882H175.392z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.923,219.242c-3.126-0.771-6.376,0.692-7.874,3.542l-5.685,10.829l-5.685-10.829c-1.498-2.852-4.747-4.314-7.874-3.542 c-3.127,0.771-5.324,3.576-5.324,6.796v43.527c0,3.866,3.134,7,7,7s7-3.134,7-7v-15.877c1.287,1.252,3.03,1.984,4.883,1.984 s3.596-0.731,4.883-1.984v15.877c0,3.866,3.134,7,7,7s7-3.134,7-7v-43.527C240.247,222.818,238.05,220.013,234.923,219.242z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSpam1);\nexport default __webpack_public_path__ + \"static/media/spam1.6b2e03613617d21268ffc89216b86ffe.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgRestore1(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 32 32\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M 14 4 C 13.477 4 12.9415 4.1835 12.5625 4.5625 C 12.1845 4.9405 12 5.477 12 6 L 12 7 L 5 7 L 5 9 L 6.09375 9 L 8 27.09375 L 8.09375 28 L 23.90625 28 L 24 27.09375 L 25.90625 9 L 27 9 L 27 7 L 20 7 L 20 6 C 20 5.477 19.8165 4.9415 19.4375 4.5625 C 19.0595 4.1845 18.523 4 18 4 L 14 4 z M 14 6 L 18 6 L 18 7 L 14 7 L 14 6 z M 8.125 9 L 23.875 9 L 22.09375 26 L 9.90625 26 L 8.125 9 z M 16 12 L 12 16 L 15 16 L 15 23 L 17 23 L 17 16 L 20 16 L 16 12 z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRestore1);\nexport default __webpack_public_path__ + \"static/media/restore1.e9dde41c96777233a2e7981f04df1cd9.svg\";\nexport { ForwardRef as ReactComponent };","import Dropdown from 'react-bootstrap/Dropdown';\nimport classes from \"./messages2Render.module.scss\"\nimport React from \"react\";\nimport dustBin from \"../../../assets/images/swg/dust-bin2.svg\"\nimport Spam from \"../../../assets/images/swg/spam1.svg\"\nimport Restore from \"../../../assets/images/swg/restore1.svg\"\n\ntype Msg2DropDownMenuType = {\n    id: string\n    isMyMessage: boolean // индикатор, мое ли это сообщение\n    deletedBySender: boolean // помечено, удалено отправителем\n    isSpam: boolean // помечено как спам\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n\n}\nconst Msg2DropDownMenu: React.FC<Msg2DropDownMenuType> = (\n    {Msg2DeleteMessage, id, isMyMessage, Msg2MarkAsSpam, Msg2Restore, deletedBySender, isSpam}) => {\n    return (\n        <>\n            <div>\n\n                <Dropdown>\n                    <Dropdown.Toggle className={\n                        `${isMyMessage ? classes.Msg2DropDownMenuIntMy : classes.Msg2DropDownMenuIntNotMy} \n                         ${classes.Msg2DropDownMenuIntCommon}`}>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu className={classes.Msg2DropDownItems}>\n                        {!deletedBySender && <Dropdown.Item className={classes.positionRelative} eventKey=\"1\" onClick={() => {\n                            Msg2DeleteMessage( id ) // удалить сообщение по его id\n                        }}>\n                            <div className={classes.DropdownItem}>Удалить у меня</div>\n                            <img src={dustBin} className={classes.imgDelete} alt=\"Удалить у меня\"/>\n                        </Dropdown.Item>}\n                        {(!isMyMessage && !isSpam) && <Dropdown.Item className={classes.positionRelative} eventKey=\"2\" onClick={() => {\n                            Msg2MarkAsSpam( id ) // пометить сообщение как спам по его id\n                        }}>\n                            <div className={classes.DropdownItem}>В спам</div>\n                            <img src={Spam} className={classes.imgSpam} alt=\"В спам\"/>\n                        </Dropdown.Item>}\n                        {(deletedBySender || isSpam ) && <Dropdown.Item className={classes.positionRelative} eventKey=\"3\" onClick={() => {\n                            Msg2Restore( id ) // восстановить сообщение из спама и удаленных\n                        }}>\n                            <div className={classes.DropdownItem}>Восстановить</div>\n                            <img src={Restore} className={classes.imgRestore} alt=\"Восстановить\"/>\n                        </Dropdown.Item>}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n        </>\n    );\n}\n\nexport default Msg2DropDownMenu;\n","import React, {useState} from \"react\";\nimport classes from \"./messages2Render.module.scss\"\nimport Msg2DropDownMenu from \"./Msg2DropDownMenu\";\nimport dustBin from \"../../../assets/images/swg/dust-bin2.svg\"\nimport Spam from \"../../../assets/images/swg/spam1.svg\"\nimport GetDate from \"../../common/ErrorBoundary/GetDate\";\n\ntype Messages2ItemType = {\n    id: string// \"cde7821a-6981-4f49-8b12-faf681cb1621\",\n    body: string// \"555\",\n    addedAt: string// \"2023-05-01T07:13:00.54\",\n    addedAtPrev: string// \"2023-05-01T07:13:00.54\",\n    senderId: number// 25528,\n    myId: number // номер моего id\n    deletedBySender: boolean // помечено, удалено отправителем\n    isSpam: boolean // помечено как спам\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2MarkAsSpam: (message2Id: string) => void // пометить сообщение как спам\n    Msg2Restore: (message2Id: string) => void // восстановить сообщение из спама и удаленных\n\n}\nconst Messages2Item: React.FC<Messages2ItemType> = (\n    {\n        id, body, Msg2DeleteMessage, addedAt, senderId, myId, Msg2MarkAsSpam, Msg2Restore, deletedBySender,\n        isSpam, addedAtPrev\n    }) => {\n\n    const DateLocal = GetDate( addedAt ) // дата из текста со смещением + 3 часа\n    const PrevDateLocal = GetDate( addedAtPrev ) // предыдущая дата из текста со смещением + 3 часа\n\n    const isMyMessage: boolean = myId === senderId ? true : false // индикатор, что мое сообщение\n    const [IdMsg2DropDowShowed, setIdMsg2DropDowShowed] = useState<string>( \"\" ) // показать ли контекстное меню\n    return <div>\n        {\n            `${DateLocal.Day}-${DateLocal.Month}-${DateLocal.Year}` !== // дата текущего рендера\n            `${PrevDateLocal.Day}-${PrevDateLocal.Month}-${PrevDateLocal.Year}` && // не равна дате предыдущего рендера\n            // тогда отображаем дату в списке сообщений\n            <div className={classes.Msg2DateExt}>\n                <div className={classes.Msg2DateInt}>\n                    {DateLocal.Day}.{DateLocal.Month}.{DateLocal.Year}</div>\n                {/* дата сообщений*/}\n            </div>}\n\n        <div\n            className={`${classes.myIdNotMyIdMsg2ComExt} ${isMyMessage ? classes.myIdMessageExt : classes.NOTmyIdMessageExt}`}>\n            <div\n                className={\n                    `${classes.myIdNotMyIdMsg2ComInt} ${isMyMessage ? classes.myIdMessageInt : classes.NOTmyIdMessageInt}`}\n                onMouseOver={() => { // при наведении на сообщение, записываем в локальный стейт id сообщения\n                    setIdMsg2DropDowShowed( id )\n                }}\n                onMouseLeave={() => {\n                    setIdMsg2DropDowShowed( \"\" ) // при убирании мышки с сообщения, очищаем id локльного стейта нведенного сообщения\n                }}\n            >\n                {deletedBySender\n                    ? <div //если помечено как удаленное, отобразит текст удаления и картинку корзины\n                    >\n                        <img className={classes.Msg2DeletedPic} src={dustBin} alt=\"\"/>\n                        <div className={classes.Msg2DeletedText}> это сообщение удалено</div>\n                    </div>\n                    : <div className={classes.Msg2Body}>{body}</div>//тело сообщения\n                }\n                <div\n                    className={`${classes.Msg2ItemAdedAtCommon} ${isMyMessage ? classes.ColorMy : classes.ColorNotMy}`}>\n                    {DateLocal.Hour}:{DateLocal.Minutes}\n                </div>\n                {/*Время*/}\n                {isSpam && <img className={classes.Msg2SpamPic} src={Spam} alt=\"\"/>\n\n                }\n                <div className={classes.Msg2DropDownMenuExt}>\n\n                    {IdMsg2DropDowShowed === id && // отрисовываем dropDown в сообщения только для локального IdMsg2DropDowShowed\n                    <Msg2DropDownMenu Msg2DeleteMessage={Msg2DeleteMessage} id={id} isMyMessage={isMyMessage}\n                                      Msg2MarkAsSpam={Msg2MarkAsSpam} Msg2Restore={Msg2Restore}\n                                      deletedBySender={deletedBySender} isSpam={isSpam}\n\n                    />}\n                </div>\n            </div>\n        </div>\n    </div>\n}\n//React.memo(\nexport default React.memo( Messages2Item )\n/*\nonClick={() => {\n    Msg2DeleteMessage( id )\n}}*/\n","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.12d8e771d6d27bcd4485de69966afd04.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"Msg2SendMessageRender_legendStyle__xT4Bz\",\"fieldSetStyle\":\"Msg2SendMessageRender_fieldSetStyle__cfoGt\",\"sendSwg\":\"Msg2SendMessageRender_sendSwg__etLEs\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\nimport sendSwg from \"../../../assets/images/swg/send-svg2.svg\"\nimport classes from \"./Msg2SendMessageRender.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype DialogFormikType = {\n    Msg2SendMessage: (messageBody: string) =>void,\n\n}\ntype valuesType = {\n    newMessage:string\n}\nconst Msg2SendMessageRender:React.FC<DialogFormikType> = ({Msg2SendMessage}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:valuesType, {resetForm}:any) => { // действия по сабмиту\n        Msg2SendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n                {({\n                      handleReset,// обнуление полей\n                    values,\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\n                            <div  className='col-9'>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"\"\n                                    autoFocus={false}\n                                    name='newMessage'\n                                    type='text'\n                                    placeholder='Введите ваше сообщение'\n                                    leftLabelLength={\"\"}\n                                   // autoFocus={true}\n                                />\n                            </div>\n                            <div>\n                                <Button variant={\"light\"} className={\"mx-2\"}\n                                        type=\"submit\" //кнопка отправить форму\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\n                                >\n\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\n                                           title={'Отправить сообщение'}/>\n                                </Button>\n                            </div>\n                        </div>\n                        {/*   <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default React.memo(Msg2SendMessageRender)\n\n","import React from \"react\";\nimport {newMessagesItem} from \"../../api/apiTypes\";\nimport classes from \"./messages2Render.module.scss\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\nimport GetDate from \"../../common/ErrorBoundary/GetDate\";\n\ntype Msg2HeaderNamePhotoType = {\n    userId: number, // id пользователя из URL\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n\n}\nconst Msg2HeaderNamePhoto: React.FC<Msg2HeaderNamePhotoType> = ({userId, D2Item}) => {\n    const photoSrc = D2Item && D2Item.photos && D2Item.photos.small ? D2Item.photos.small : userPhoto // фото с сервера или заглушка\n    const DateLocal = GetDate(D2Item && D2Item.lastUserActivityDate) // получаем дату последнего сообщения\n    return <div>\n        {D2Item && <div>\n            <div className={classes.Msg2HeaderName}>{D2Item && D2Item.userName}</div>\n            <NavLink to={'/profile/' + userId}>\n                <img className={classes.Msg2HeaderPhoto} src={photoSrc} alt=\"photoSrc\"/>\n            </NavLink>\n            <div className={classes.Msg2HeaderActivityDate}>Был(а): {\" \"}\n                {D2Item &&  DateLocal.isToday\n                    ? <span> сегодня в {DateLocal.Hour }:{DateLocal.Minutes}</span>\n                    : <span> {DateLocal.Day }.{DateLocal.Month}.{DateLocal.Year}</span>\n                }\n            </div>\n        </div>}\n    </div>\n}\nexport default React.memo( Msg2HeaderNamePhoto ) // сокращаем число ререндеров\n","import React from \"react\";\nimport classes from \"./messages2Render.module.scss\"\nimport {newMessagesItem, sendMessageType} from \"../../api/apiTypes\";\nimport Messages2Item from \"./Messages2Item\";\nimport Msg2SendMessageRender from \"./Msg2SendMessageRender\";\nimport Msg2HeaderNamePhoto from \"./Msg2HeaderNamePhoto\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    userId: number, // id пользователя из URL\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    myId: number // номер моего id\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody: string) => void // отправить сообщение указанному пользователю\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n\n}\nconst Messages2Render: React.FC<Dialog2RenderType> = (\n    {\n        PageWidth, MobileWidth, patch, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, userId,\n        D2Item, myId, Msg2MarkAsSpam, Msg2Restore\n    }) => {\n    return <div>\n        {patch === \"dialog2\" && PageWidth > MobileWidth && <div\n            //- предложение выбрать диалог.Fixed все остальное поле справа.\n            // эта часть отображается только на странице dialog и только в десктопной версии\n            className={`${classes.Fixed} ${classes.messages2ChooseDialog}`}\n        > Выберите диалог\n        </div>}\n\n        {patch === \"messages\" &&\n        <div // эта часть компоненты Messages2Render отрисовывается на странице messages всегда.\n        >\n            <div\n                //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2NameAndProfileLink} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2HeaderNamePhoto userId={userId} D2Item={D2Item}/>\n\n            </div>\n            <div //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2RenderMessages} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                {MessagesNewerThen.map( (m2, Ind, Arr) => { // отрисовка всех сообщений\n                    const {\n                        id, body, addedAt, senderId, deletedBySender, isSpam\n                    } = m2\n                    const addedAtPrev = Ind>0\n                        ?   Arr[Ind-1].addedAt // дата добавления предыдущего сообщения\n                        :   \"\"\n                    return <Messages2Item key={id} id={id} body={body} Msg2DeleteMessage={Msg2DeleteMessage}\n                                          addedAt={addedAt} senderId={senderId} myId={myId}\n                                          Msg2MarkAsSpam={Msg2MarkAsSpam} Msg2Restore={Msg2Restore}\n                                          deletedBySender={deletedBySender} isSpam={isSpam}  addedAtPrev={addedAtPrev}\n                    />\n                } )}\n                <div className=\"second-block\"></div>\n                {/* метка прокуртки сообщений при каждом обновлении списка сообщений*/}\n            </div>\n            <div//fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2PrintMessage} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2SendMessageRender Msg2SendMessage={Msg2SendMessage}/>\n            </div>\n        </div>\n        }\n\n    </div>\n\n}\nexport default Messages2Render\n","import React from \"react\";\nimport classesCommon from \"./dialog2Messages2COM.module.scss\";\nimport Dialog2Render from \"./Dialog2/Dialog2Render\";\nimport Messages2Render from \"./Messages2/Messages2Render\";\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../api/apiTypes\";\n\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    userId: number, // id пользователя из URL\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    D2Item: newMessagesItem, // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    myId: number // номер моего id\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody:string) => void // отправить сообщение указанному пользователю\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n}\n\nconst Dialog2Messages2COM: React.FC<Dialog2RenderType> = (\n    {patch, PageWidth, MobileWidth, Dialog2All, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, userId,\n        D2Item, myId, Msg2MarkAsSpam, Msg2Restore}\n    ) => {\n    return <div className={classesCommon.dialog2Messages2Common}>\n        {/*Отрисовка поля диалогов*/}\n        <Dialog2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch} Dialog2All={Dialog2All}/>\n\n        <Messages2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch}\n                         MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n                         Msg2SendMessage={Msg2SendMessage} userId={userId} D2Item={D2Item}\n                         myId={myId} Msg2MarkAsSpam={Msg2MarkAsSpam}\n                         Msg2Restore={Msg2Restore}\n        />\n    </div>\n}\nexport default Dialog2Messages2COM\n","import React, {useCallback, useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {\n    deleteDialog2MessageIdThCr,\n    getDialog2MessageIdViewedThCr, getDialog2MessagesNewerThenThCr,\n    getDialog2AllThCr, postDialog2MessageIdToSpamThCr,\n    postDialog2MessageThCr, putDialog2MessageIdRestoreThCr,\n    putDialog2StartThCr, getDailog2UnreadMessagesThCr, Dialog2Actions, MarkersType\n} from \"../../redux/dialog2-reducer\";\nimport Dialog2Messages2COM from \"./Dialog2Messages2COM\";\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../api/apiTypes\";\nimport {compose} from \"redux\";\nimport withRouter2 from \"../hoc/withRouter2\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\n\ntype OwnPropsType = {\n    userId: number, // id пользователя из URL (withRouter2)\n}\n\nconst Dialog2Messages2Container: React.FC<mapStateToPropsType & mapDispatchToPropsType & OwnPropsType> = (\n    {\n        putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n        getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n        putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n        patch, PageWidth, MobileWidth, Dialog2All, userId, MessagesNewerThen, D2Item,\n        Markers, setMarkers, getDialog2AllAC, myId, setD2Item\n    }\n) => {\n    //cde7821a-6981-4f49-8b12-faf681cb1621 от \"555\"\n    // 84ac68ee-73d0-43c4-82bb-0fd0273d4808 (привет андрей)\n    // 25528  | 27045 | 1079\n\n    const Msg2DeleteMessage = useCallback( (message2Id: string) => {// - удалить сообщение (только у себя) по ID сообщения\n        deleteDialog2MessageIdThCr( message2Id, userId, \"2022-04-30T19:10:31.843\", MessagesNewerThen )\n    }, [userId, MessagesNewerThen, deleteDialog2MessageIdThCr] )\n\n    const Msg2MarkAsSpam = (message2Id: string) => {// - пометить сообщение как спам по ID сообщения\n        postDialog2MessageIdToSpamThCr( message2Id, MessagesNewerThen )\n    }\n    const Msg2Restore = (message2Id: string) => {// - пометить сообщение как спам по ID сообщения\n        putDialog2MessageIdRestoreThCr( message2Id, MessagesNewerThen ) // - восстановить сообщение из спама и удаленных\n    }\n\n    const Msg2SendMessage = (messageBody: string) => {\n        postDialog2MessageThCr( userId, messageBody, \"2022-04-30T19:10:31.843\", Markers )// отправить сообщение указав ID пользователя\n        if (Markers.dialogId !== userId) { //Если мы еще не начали диалог с пользователем, и отправили сообщение\n            putDialog2StartThCr( userId ) // инициировать диалог\n            setMarkers( { // маркер пометить, что диалог начался\n                ...Markers,\n                dialogId: userId\n            } )\n        }\n    }\n    const secondBlock = document.querySelector( '.second-block' ) // ссылка на прокрутку вниз\n\n    const MSG2ScrollBottom = useCallback( () => {\n        secondBlock && secondBlock.scrollIntoView( true )\n    }, [secondBlock] )\n    //Сама метка className=\"second-block\" находится в дочерней Messages2Render\n\n    useEffect( () => {\n            // через интервал времени при выборе диалога с новыми сообщениями локально пометить сообщение\n            // как прочитаное. При следующем получении данных с сервера, все синхронизируется\n            if (D2Item && D2Item.newMessagesCount > 0) {  //если маркер непрочтенных сообщений больше нуля\n                setTimeout( () => { // делаем таймер паузу пока сообщение не исчезнет\n                    const Dialog2AllLocal2: getDialog2AllType = [];\n                    Dialog2All.forEach( dd => {\n                        if (dd.id === userId) { // если это диалог в котором есть новые сообщения\n                            dd.hasNewMessages = false; // зануляем значения\n                            dd.newMessagesCount = 0;\n                        }\n                        Dialog2AllLocal2.push( dd ) //на каждой итерации добавляем элемент в новый массив копию\n                    } )\n                    console.log( \"таймер закончился\" )\n                    getDialog2AllAC( Dialog2AllLocal2 )\n                }, 1000 )\n            }\n        },\n        [D2Item, Dialog2All, getDialog2AllAC, userId] )\n\n    // getDialog2MessageIdViewedThCr(\"84ac68ee-73d0-43c4-82bb-0fd0273d4808\") // проверить прочитано ли сообщение по его ID\n    // getDailog2UnreadMessagesThCr() // - вернуть количество непрочтенных сообщений\n    useEffect( () => {\n        if (userId !== 0 && !Markers.straightFirstUploaded) {\n            console.log( \"начать диалог по непустому userId \" )\n            putDialog2StartThCr( userId )\n            setMarkers( {\n                ...Markers, straightFirstUploaded: true // задать маркер прямой загрузки в true\n            } )\n        }\n    }, [userId, Markers, putDialog2StartThCr, setMarkers] )\n\n    useEffect(()=>{\n        setMarkers( { // при смене id зануляем маркер полученых сообщений по заданному id\n            ...Markers, HasMsg2Requestd: false // задать маркер - мы уже сообщения по данному userId запросили\n        } )\n    }, [userId])\n\n    useEffect( () => { // получаем новые сообщения если\n        if (userId !== 0 && (// userId не равен нулю,\n            (MessagesNewerThen.length === 0 && !Markers.HasMsg2Requestd)   //и список сообщений пустой и мы его еще не запрашивали\n            || (MessagesNewerThen.length > 0 && // или список сообщений может быть не пустым\n                (MessagesNewerThen[0].senderId !== userId && MessagesNewerThen[0].recipientId !== userId) // но эти сообщения мы еще не загружали\n            )\n        )) {\n\n            console.log( \"получить сообщения при смене userId\", userId )\n            getDialog2MessagesNewerThenThCr( userId, \"2022-04-30T19:10:31.843\" )\n            setMarkers( {\n                ...Markers, HasMsg2Requestd: true // задать маркер - мы уже сообщения по данному userId запросили\n            } )\n\n            //Поставить маркер, что список сообщений уже был получен\n\n            const D2ItemLocal: newMessagesItem = Dialog2All.filter( d2 => d2.id === userId )[0]\n            setD2Item( D2ItemLocal ) // отфильтрровать d2Item\n        }\n    }, [userId, Dialog2All, getDialog2MessagesNewerThenThCr, setD2Item, MessagesNewerThen] )\n\n    useEffect( () => {\n        if (patch === \"dialog2\" && !Markers.Dialog2FirstUploaded && myId) {\n            console.log( \"Единичное получение списка диалогов на странице dialog2\" )\n            getDialog2AllThCr( myId, 1, 10 )\n            setMarkers( {\n                ...Markers, Dialog2FirstUploaded: true\n            } )\n        }\n    }, [userId, patch, Markers, getDialog2AllThCr, setMarkers, myId] )\n\n    useEffect( () => {\n        if (Markers.needToScrollBottom) {\n            MSG2ScrollBottom() // прокручиваем список сообщений вниз\n            setMarkers( {\n                ...Markers, needToScrollBottom: false // ставим маркер - прокручивать вниз не нужно\n            } )\n        }\n    }, [Markers, MSG2ScrollBottom, setMarkers] )\n\n    return <div>\n        <Dialog2Messages2COM\n            patch={patch} PageWidth={PageWidth} MobileWidth={MobileWidth} Dialog2All={Dialog2All}\n            MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n            Msg2SendMessage={Msg2SendMessage} userId={userId} D2Item={D2Item}\n            myId={myId} Msg2MarkAsSpam={Msg2MarkAsSpam} Msg2Restore={Msg2Restore}\n        />\n    </div>\n}\nconst mapStateToProps = (state: GlobalStateType) => {\n    return {\n        patch: state.app.patch as string,// имя страницы из URL\n        PageWidth: state.app.PageWidth as number,// ширина страницы\n        MobileWidth: state.app.MobileWidth as number,// ширина страницы, считающаяся мобильной версткой\n        Dialog2All: state.dialog2.Dialog2All as getDialog2AllType,// список всех диалогов для левой колонки\n        MessagesNewerThen: state.dialog2.MessagesNewerThen as Array<sendMessageType>,// сообщения выбранного диалога, новее заданной даты\n        D2Item: state.dialog2.D2Item as newMessagesItem,// отфильтрованый  из Dialog2All выбранный пользователь по userId\n        Markers: state.dialog2.Markers as MarkersType,//вспомогательные маркеры\n        myId: state.auth.myId as number// номер моего id\n    }\n}\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\n\ntype mapDispatchToPropsType = {\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,// получить список всех диалогов\n    setMarkers: (Markers: MarkersType) => void // задать вспомогательные маркеры\n    getDialog2AllAC: (Dialog2All: getDialog2AllType) => void, //- получить список диалогов по id пользователя\n    putDialog2StartThCr: (currentDialogId: number) => void,// начало диалога с пользователем по его ID\n    postDialog2MessageThCr: (userId: number, body: string, date: string, Markers: MarkersType) => void,// - отправить сообщение пользователю\n    postDialog2MessageIdToSpamThCr: (messageId: string, MessagesNewerThen: Array<sendMessageType>) => void,// - пометить сообщение как спам\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string, MessagesNewerThen: Array<sendMessageType>) => void,//- удалить сообщение (только у себя) по ID сообщения\n    putDialog2MessageIdRestoreThCr: (messageId: string, MessagesNewerThen: Array<sendMessageType>) => void,//  - восстановить сообщение из спама и удаленных\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,// получить все сообщения от указанного ID пользователя новее чем указанная дата\n    setD2Item: (D2Item: newMessagesItem) => void // задать D2Item (шапку сообщений)\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,//- проверить, было ли прочитано сообщение по Id сообщения\n    getDailog2UnreadMessagesThCr: () => void, // вернуть количество непрочтенных сообщений\n}\nconst {setMarkers, setD2Item, getDialog2AllAC} = Dialog2Actions // получить экшены\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType>( mapStateToProps,\n        {\n            putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n            getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n            putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n            setMarkers, getDialog2AllAC, setD2Item\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2\n)\n( Dialog2Messages2Container );\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nlet NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n"],"names":["customDate","fMonth","Data","Date","getTime","isToday","getFullYear","getMonth","getDate","Year","substr","Month","Day","Hour","getHours","Minutes","getMinutes","Seconds","getSeconds","Dialog2Item","_ref","userName","hasNewMessages","photos","lastDialogActivityDate","newMessagesCount","id","DateLocal","GetDate","_jsx","className","classes","children","NavLink","to","_jsxs","src","small","userPhoto","alt","React","SearchValue","setSearchValue","placeholder","value","onChange","event","target","type","MagnifyingGlass","Dialog2Render","PageWidth","MobileWidth","patch","Dialog2All","_useState","useState","_useState2","_slicedToArray","Dialog2AllFiltered","filter","d2","toLowerCase","includes","concat","Dialog2SearchRender","map","Msg2DeleteMessage","isMyMessage","Msg2MarkAsSpam","Msg2Restore","deletedBySender","isSpam","_Fragment","Dropdown","eventKey","onClick","dustBin","Spam","Restore","Messages2Item","body","addedAt","senderId","myId","addedAtPrev","PrevDateLocal","IdMsg2DropDowShowed","setIdMsg2DropDowShowed","onMouseOver","onMouseLeave","Msg2DropDownMenu","myInitialValues","newMessage","myValidationSchema","Yup","Msg2SendMessageRender","Msg2SendMessage","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","MyTextInput","label","autoFocus","name","leftLabelLength","Button","variant","disabled","Image","sendSwg","title","Msg2HeaderNamePhoto","userId","D2Item","photoSrc","lastUserActivityDate","MessagesNewerThen","m2","Ind","Arr","classesCommon","Messages2Render","setMarkers","Dialog2Actions","setD2Item","getDialog2AllAC","compose","connect","state","app","dialog2","Markers","auth","putDialog2StartThCr","getDialog2AllThCr","postDialog2MessageThCr","getDialog2MessageIdViewedThCr","postDialog2MessageIdToSpamThCr","deleteDialog2MessageIdThCr","putDialog2MessageIdRestoreThCr","getDialog2MessagesNewerThenThCr","getDailog2UnreadMessagesThCr","withRouter2","NavigateToLoginHoc2","useCallback","message2Id","secondBlock","document","querySelector","MSG2ScrollBottom","scrollIntoView","useEffect","setTimeout","Dialog2AllLocal2","forEach","dd","push","console","log","straightFirstUploaded","_objectSpread","HasMsg2Requestd","length","recipientId","D2ItemLocal","Dialog2FirstUploaded","needToScrollBottom","Dialog2Messages2COM","messageBody","dialogId","CommonInputTextArea","props","_objectWithoutProperties","_excluded","_useField","useField","meta","touched","error","_excluded2","_useField3","_useField4","field","InputGroup","size","style","width","as","undefined","MyCheckbox","_excluded3","_useField5","_useField6","mapStateToProps","isAuth","Component","Navigate","Children","aaa","params","useParams","Number"],"sourceRoot":""}