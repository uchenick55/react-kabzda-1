{"version":3,"file":"static/js/231.ed1c47a7.chunk.js","mappings":"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","sources":["assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/Dialog2Messages2/dialog2Messages2COM.module.scss?b62d","webpack://my-app/./src/components/Dialog2Messages2/Dialog2/dialog2Render.module.css?aae0","components/Dialog2Messages2/Dialog2/Dialog2Item.tsx","components/Dialog2Messages2/Dialog2/Dialog2Render.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/messages2Render.module.scss?0979","assets/images/swg/dust-bin2.svg","assets/images/swg/spam1.svg","assets/images/swg/restore1.svg","components/Dialog2Messages2/Messages2/Msg2DropDownMenu.tsx","components/Dialog2Messages2/Messages2/Messages2Item.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/MessagesFormik.module.css?1d18","components/Dialog2Messages2/Messages2/Msg2SendMessageRender.tsx","components/Dialog2Messages2/Messages2/Msg2HeaderNamePhoto.tsx","components/Dialog2Messages2/Messages2/Messages2Render.tsx","components/Dialog2Messages2/Dialog2Messages2COM.tsx","components/Dialog2Messages2/Dialog2Messages2Container.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx"],"sourcesContent":["var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.12d8e771d6d27bcd4485de69966afd04.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"dialog2Messages2Common\":\"dialog2Messages2COM_dialog2Messages2Common__yrugD\",\"Fixed\":\"dialog2Messages2COM_Fixed__8oFn8\"};","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"dialog2Render_Fixed__yAlTJ\",\"dialog2HeaderCommon\":\"dialog2Render_dialog2HeaderCommon__YO-4Y\",\"dialog2ListCommon\":\"dialog2Render_dialog2ListCommon__ZMqFo\",\"MobileDialogWidth\":\"dialog2Render_MobileDialogWidth__ahAt-\",\"DesktopDialogWidth\":\"dialog2Render_DesktopDialogWidth__zSxVR\",\"Dialog2ItemCardExt\":\"dialog2Render_Dialog2ItemCardExt__LODJo\",\"Dialog2ItemCardInt\":\"dialog2Render_Dialog2ItemCardInt__HQqPI\",\"Dialog2ItemCardName\":\"dialog2Render_Dialog2ItemCardName__zSixE\",\"Dialog2ItemCardPhoto\":\"dialog2Render_Dialog2ItemCardPhoto__jPmgw\",\"Dialog2ItemCardNewMsgCnt\":\"dialog2Render_Dialog2ItemCardNewMsgCnt__TrWvv\",\"Dialog2ItemCardMsgTime\":\"dialog2Render_Dialog2ItemCardMsgTime__2bCd+\"};","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\n\ntype Dialog2ItemType = {\n    userName: string, //\"evgeniysazonov\"\n    hasNewMessages: boolean,\n    lastDialogActivityDate: string, //\"2023-04-30T19:10:31.843\"\n    newMessagesCount: number, //0\n    photos: {\n        small: string,// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user-small.jpg?v=1\",\n        large: string// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user.jpg?v=1\"\n    },\n    id: number\n}\nconst Dialog2Item: React.FC<Dialog2ItemType> = (\n    {userName, hasNewMessages, photos, lastDialogActivityDate, newMessagesCount, id}) => {\n    //console.log(\"Dialog2Item\")\n    return <div className={classes.Dialog2ItemCardExt}>\n        <NavLink to={'/messages/' + id}>\n            <div className={classes.Dialog2ItemCardInt}>\n                <div className={classes.Dialog2ItemCardName}>{userName}</div>   {/*Имя пользователя*/}\n                {hasNewMessages && <div\n                    className={classes.Dialog2ItemCardNewMsgCnt}>{newMessagesCount}</div>} {/*вывод количества новых сообщений*/}\n                <img src={photos.small ? photos.small : userPhoto} className={classes.Dialog2ItemCardPhoto}\n                     alt=\"CardPhoto\"/> {/*Фото*/}\n                <div className={classes.Dialog2ItemCardMsgTime}>{lastDialogActivityDate.slice( 0, 16 )}</div>\n                {/*Время*/}\n            </div>\n        </NavLink>\n    </div>\n}\nexport default React.memo(Dialog2Item)\n","import React from \"react\";\r\nimport classes from \"./dialog2Render.module.css\"\r\nimport {getDialog2AllType} from \"../../api/apiTypes\";\r\nimport Dialog2Item from \"./Dialog2Item\";\r\n\r\ntype Dialog2RenderType = {\r\n    patch: string,// имя страницы из URL\r\n    PageWidth: number, // ширина страницы\r\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\r\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\r\n}\r\nconst Dialog2Render: React.FC<Dialog2RenderType> = (\r\n    {PageWidth, MobileWidth, patch, Dialog2All}\r\n    ) => {\r\n    const hasRendered: Array<number> = [] // массив, какие диалоги в списке уже были отрисованы\r\n    return <div>\r\n        { // Компонента Dialog2Render отрисовывается на странице dialog всегда.\r\n            // На странице messages только при десктопной версии\r\n            ((patch === \"messages\" && PageWidth > MobileWidth) || (patch === \"dialog2\"))\r\n            && <div>\r\n                <div  //Fixed слева вверху.\r\n                    // Поле остается на странице dialog2 всегда.\r\n                    // На странице messages только при десктопной версии\r\n                    className={`${classes.Fixed} ${classes.dialog2HeaderCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\r\n                    /*поиск по именам списка диалогов, с задержкой после ввода, без кнопки отправить*/\r\n\r\n                > поиск, без кнопки отправить, с задержкой после ввода.\r\n                </div>\r\n                <div // Fixed слева внизу + прокрутка. Поле остается на странице dialog2 всегда\r\n                    className={`${classes.Fixed} ${classes.dialog2ListCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\r\n                >\r\n                    {Dialog2All.map(d2=>{\r\n                        const {id, userName, hasNewMessages, lastDialogActivityDate, newMessagesCount, photos} = d2\r\n                        if (hasRendered.includes(id)) { //был глюк с записью двух одинаковых диалогов на сервер.\r\n                            // Исправил проверкой, что уже отрисовано\r\n                            return <div/>\r\n                        }\r\n                        hasRendered.push(id)\r\n                        return <Dialog2Item\r\n                            key={id} userName={userName} hasNewMessages={hasNewMessages} photos={photos}\r\n                            lastDialogActivityDate={lastDialogActivityDate} newMessagesCount={newMessagesCount} id={id} />\r\n                    })}\r\n\r\n                    {/*список диалогов с фильтрацией по имени из заголовка. */}\r\n                </div>\r\n            </div>}\r\n\r\n    </div>\r\n}\r\nexport default React.memo(Dialog2Render)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"messages2Render_Fixed__baHQ8\",\"messages2NameAndProfileLink\":\"messages2Render_messages2NameAndProfileLink__gsVN6\",\"messages2ChooseDialog\":\"messages2Render_messages2ChooseDialog__JKbif\",\"messages2RenderMessages\":\"messages2Render_messages2RenderMessages__Ebe0U\",\"messages2PrintMessage\":\"messages2Render_messages2PrintMessage__dhozP\",\"MobileMessagesLeft\":\"messages2Render_MobileMessagesLeft__6JOQ+\",\"DesktopMessagesLeft\":\"messages2Render_DesktopMessagesLeft__rsM5T\",\"Msg2HeaderName\":\"messages2Render_Msg2HeaderName__Mw++x\",\"Msg2HeaderPhoto\":\"messages2Render_Msg2HeaderPhoto__XGI9W\",\"Msg2HeaderActivityDate\":\"messages2Render_Msg2HeaderActivityDate__ZWTOr\",\"myIdNotMyIdMsg2ComExt\":\"messages2Render_myIdNotMyIdMsg2ComExt__oPyxL\",\"myIdMessageExt\":\"messages2Render_myIdMessageExt__41EAp\",\"NOTmyIdMessageExt\":\"messages2Render_NOTmyIdMessageExt__5fs33\",\"myIdNotMyIdMsg2ComInt\":\"messages2Render_myIdNotMyIdMsg2ComInt__Estd7\",\"myIdMessageInt\":\"messages2Render_myIdMessageInt__xSaFZ\",\"NOTmyIdMessageInt\":\"messages2Render_NOTmyIdMessageInt__hPt2K\",\"Msg2DropDownMenuExt\":\"messages2Render_Msg2DropDownMenuExt__az4N7\",\"Msg2DropDownMenuIntCommon\":\"messages2Render_Msg2DropDownMenuIntCommon__vMw3j\",\"Msg2DropDownMenuIntMy\":\"messages2Render_Msg2DropDownMenuIntMy__6FgWz\",\"Msg2DropDownMenuIntNotMy\":\"messages2Render_Msg2DropDownMenuIntNotMy__Yf+sf\",\"Msg2DropDownItems\":\"messages2Render_Msg2DropDownItems__Qu0q7\",\"positionRelative\":\"messages2Render_positionRelative__ovQvp\",\"DropdownItem\":\"messages2Render_DropdownItem__AtL0R\",\"imgDelete\":\"messages2Render_imgDelete__qGmmU\",\"imgSpam\":\"messages2Render_imgSpam__tMesr\",\"imgRestore\":\"messages2Render_imgRestore__YIG+H\",\"Msg2ItemAdedAtCommon\":\"messages2Render_Msg2ItemAdedAtCommon__JW5T8\",\"ColorMy\":\"messages2Render_ColorMy__HqHhB\",\"ColorNotMy\":\"messages2Render_ColorNotMy__X-mAo\",\"Msg2DeletedText\":\"messages2Render_Msg2DeletedText__lBh9V\",\"Msg2DeletedPic\":\"messages2Render_Msg2DeletedPic__V5oiT\",\"Msg2SpamPic\":\"messages2Render_Msg2SpamPic__wTzWN\",\"Msg2Body\":\"messages2Render_Msg2Body__dWvTp\"};","var _style, _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDustBin2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"800px\",\n    width: \"800px\",\n    id: \"_x32_\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 512 512\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\r\\n\\t.st0{fill:#000000;}\\r\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M88.594,464.731C90.958,491.486,113.368,512,140.234,512h231.523c26.858,0,49.276-20.514,51.641-47.269 l25.642-335.928H62.952L88.594,464.731z M420.847,154.93l-23.474,307.496c-1.182,13.37-12.195,23.448-25.616,23.448H140.234 c-13.42,0-24.434-10.078-25.591-23.132L91.145,154.93H420.847z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M182.954,435.339c5.877-0.349,10.35-5.4,9.992-11.269l-10.137-202.234c-0.358-5.876-5.401-10.349-11.278-9.992 c-5.877,0.357-10.35,5.409-9.993,11.277l10.137,202.234C172.033,431.231,177.085,435.696,182.954,435.339z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M256,435.364c5.885,0,10.656-4.763,10.656-10.648V222.474c0-5.885-4.771-10.648-10.656-10.648 c-5.885,0-10.657,4.763-10.657,10.648v202.242C245.344,430.601,250.115,435.364,256,435.364z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M329.046,435.339c5.878,0.357,10.921-4.108,11.278-9.984l10.129-202.234c0.348-5.868-4.116-10.92-9.993-11.277 c-5.877-0.357-10.92,4.116-11.277,9.992L319.054,424.07C318.697,429.938,323.17,434.99,329.046,435.339z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st0\",\n    d: \"M439.115,64.517c0,0-34.078-5.664-43.34-8.479c-8.301-2.526-80.795-13.566-80.795-13.566l-2.722-19.297 C310.388,9.857,299.484,0,286.642,0h-30.651H225.34c-12.825,0-23.728,9.857-25.616,23.175l-2.721,19.297 c0,0-72.469,11.039-80.778,13.566c-9.261,2.815-43.357,8.479-43.357,8.479C62.544,67.365,55.332,77.172,55.332,88.38v21.926h200.66 h200.676V88.38C456.668,77.172,449.456,67.365,439.115,64.517z M276.318,38.824h-40.636c-3.606,0-6.532-2.925-6.532-6.532 s2.926-6.532,6.532-6.532h40.636c3.606,0,6.532,2.925,6.532,6.532S279.924,38.824,276.318,38.824z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDustBin2);\nexport default __webpack_public_path__ + \"static/media/dust-bin2.85ba7792a26715a7b4844146f0fe8516.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSpam1(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    height: \"800px\",\n    width: \"800px\",\n    id: \"Capa_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 319.459 319.459\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.707,97.032l-124.686-76.3c-11.283-6.904-25.301-6.904-36.584,0l-124.686,76.3C6.419,103.356,0,114.809,0,126.924 v141.937c0,19.323,15.721,35.044,35.044,35.044h249.371c19.323,0,35.044-15.721,35.044-35.044V126.924 C319.459,114.809,313.04,103.356,302.707,97.032z M151.877,37.792c2.422-1.482,5.137-2.223,7.853-2.223 c2.715,0,5.431,0.741,7.853,2.223l123.206,75.395l-94.152,61.831v-7.864c12.352-4.763,21.142-16.751,21.142-30.761v-15.071 c0-5.523-4.478-10-10-10s-10,4.477-10,10v15.071c0,2.682-0.819,5.176-2.219,7.246c-2.226-8.225-7.755-15.104-15.075-19.115 l8.426-15.87c2.59-4.878,0.735-10.932-4.143-13.522c-4.88-2.589-10.933-0.734-13.521,4.143l-11.391,21.454h-0.247l-11.391-21.454 c-2.59-4.878-8.644-6.733-13.521-4.143s-6.732,8.644-4.143,13.522l8.426,15.87c-7.32,4.011-12.849,10.891-15.075,19.115 c-1.401-2.07-2.219-4.564-2.219-7.246v-15.071c0-5.523-4.478-10-10-10s-10,4.477-10,10v15.071c0,14.01,8.79,25.998,21.142,30.761 v7.864l-94.152-61.831L151.877,37.792z M153.823,140.729h11.813c6.065,0,11,4.935,11,11v23.345c0,6.065-4.935,11-11,11h-11.813 c-6.065,0-11-4.935-11-11v-23.345C142.823,145.663,147.758,140.729,153.823,140.729z M284.415,283.905H35.044 c-8.295,0-15.044-6.749-15.044-15.044V131.42l119.885,78.731c6.028,3.958,12.937,5.937,19.845,5.937s13.817-1.979,19.845-5.937 l119.885-78.73v137.441C299.459,277.156,292.71,283.905,284.415,283.905z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M97.094,233.038h10.882c3.866,0,7-3.134,7-7s-3.134-7-7-7H97.094c-9.86,0-17.882,8.022-17.882,17.882 s8.021,17.882,17.882,17.882c2.141,0,3.882,1.741,3.882,3.882s-1.741,3.882-3.882,3.882H86.212c-3.866,0-7,3.134-7,7s3.134,7,7,7 h10.882c9.86,0,17.882-8.022,17.882-17.882s-8.021-17.882-17.882-17.882c-2.141,0-3.882-1.741-3.882-3.882 S94.953,233.038,97.094,233.038z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M138.184,219.038h-10.882c-3.866,0-7,3.134-7,7v43.527c0,3.866,3.134,7,7,7s7-3.134,7-7v-14.764h3.882 c9.86,0,17.882-8.022,17.882-17.882S148.044,219.038,138.184,219.038z M138.184,240.802h-3.882v-7.764h3.882 c2.141,0,3.882,1.741,3.882,3.882S140.324,240.802,138.184,240.802z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M179.273,219.038c-9.86,0-17.882,8.022-17.882,17.882v32.646c0,3.866,3.134,7,7,7s7-3.134,7-7v-14.764h7.764v14.764 c0,3.866,3.134,7,7,7s7-3.134,7-7V236.92C197.155,227.06,189.134,219.038,179.273,219.038z M175.392,240.802v-3.882 c0-2.141,1.741-3.882,3.882-3.882s3.882,1.741,3.882,3.882v3.882H175.392z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.923,219.242c-3.126-0.771-6.376,0.692-7.874,3.542l-5.685,10.829l-5.685-10.829c-1.498-2.852-4.747-4.314-7.874-3.542 c-3.127,0.771-5.324,3.576-5.324,6.796v43.527c0,3.866,3.134,7,7,7s7-3.134,7-7v-15.877c1.287,1.252,3.03,1.984,4.883,1.984 s3.596-0.731,4.883-1.984v15.877c0,3.866,3.134,7,7,7s7-3.134,7-7v-43.527C240.247,222.818,238.05,220.013,234.923,219.242z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSpam1);\nexport default __webpack_public_path__ + \"static/media/spam1.6b2e03613617d21268ffc89216b86ffe.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgRestore1(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 32 32\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M 14 4 C 13.477 4 12.9415 4.1835 12.5625 4.5625 C 12.1845 4.9405 12 5.477 12 6 L 12 7 L 5 7 L 5 9 L 6.09375 9 L 8 27.09375 L 8.09375 28 L 23.90625 28 L 24 27.09375 L 25.90625 9 L 27 9 L 27 7 L 20 7 L 20 6 C 20 5.477 19.8165 4.9415 19.4375 4.5625 C 19.0595 4.1845 18.523 4 18 4 L 14 4 z M 14 6 L 18 6 L 18 7 L 14 7 L 14 6 z M 8.125 9 L 23.875 9 L 22.09375 26 L 9.90625 26 L 8.125 9 z M 16 12 L 12 16 L 15 16 L 15 23 L 17 23 L 17 16 L 20 16 L 16 12 z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRestore1);\nexport default __webpack_public_path__ + \"static/media/restore1.e9dde41c96777233a2e7981f04df1cd9.svg\";\nexport { ForwardRef as ReactComponent };","import Dropdown from 'react-bootstrap/Dropdown';\nimport classes from \"./messages2Render.module.scss\"\nimport React from \"react\";\nimport dustBin from \"../../../assets/images/swg/dust-bin2.svg\"\nimport Spam from \"../../../assets/images/swg/spam1.svg\"\nimport Restore from \"../../../assets/images/swg/restore1.svg\"\n\ntype Msg2DropDownMenuType = {\n    id: string\n    isMyMessage: boolean // индикатор, мое ли это сообщение\n    deletedBySender: boolean // помечено, удалено отправителем\n    isSpam: boolean // помечено как спам\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n\n}\nconst Msg2DropDownMenu: React.FC<Msg2DropDownMenuType> = (\n    {Msg2DeleteMessage, id, isMyMessage, Msg2MarkAsSpam, Msg2Restore, deletedBySender, isSpam}) => {\n    return (\n        <>\n            <div>\n\n                <Dropdown>\n                    <Dropdown.Toggle className={\n                        `${isMyMessage ? classes.Msg2DropDownMenuIntMy : classes.Msg2DropDownMenuIntNotMy} \n                         ${classes.Msg2DropDownMenuIntCommon}`}>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu className={classes.Msg2DropDownItems}>\n                        {!deletedBySender && <Dropdown.Item className={classes.positionRelative} eventKey=\"1\" onClick={() => {\n                            Msg2DeleteMessage( id ) // удалить сообщение по его id\n                        }}>\n                            <div className={classes.DropdownItem}>Удалить у меня</div>\n                            <img src={dustBin} className={classes.imgDelete} alt=\"Удалить у меня\"/>\n                        </Dropdown.Item>}\n                        {(!isMyMessage && !isSpam) && <Dropdown.Item className={classes.positionRelative} eventKey=\"2\" onClick={() => {\n                            Msg2MarkAsSpam( id ) // пометить сообщение как спам по его id\n                        }}>\n                            <div className={classes.DropdownItem}>В спам</div>\n                            <img src={Spam} className={classes.imgSpam} alt=\"В спам\"/>\n                        </Dropdown.Item>}\n                        {(deletedBySender || isSpam ) && <Dropdown.Item className={classes.positionRelative} eventKey=\"3\" onClick={() => {\n                            Msg2Restore( id ) // восстановить сообщение из спама и удаленных\n                        }}>\n                            <div className={classes.DropdownItem}>Восстановить</div>\n                            <img src={Restore} className={classes.imgRestore} alt=\"Восстановить\"/>\n                        </Dropdown.Item>}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n        </>\n    );\n}\n\nexport default Msg2DropDownMenu;\n","import React, {useState} from \"react\";\nimport classes from \"./messages2Render.module.scss\"\nimport Msg2DropDownMenu from \"./Msg2DropDownMenu\";\nimport dustBin from \"../../../assets/images/swg/dust-bin2.svg\"\nimport Spam from \"../../../assets/images/swg/spam1.svg\"\n\ntype Messages2ItemType = {\n    id: string// \"cde7821a-6981-4f49-8b12-faf681cb1621\",\n    body: string// \"555\",\n    addedAt: string// \"2023-05-01T07:13:00.54\",\n    senderId: number// 25528,\n    myId: number // номер моего id\n    deletedBySender: boolean // помечено, удалено отправителем\n    isSpam: boolean // помечено как спам\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n\n}\nconst Messages2Item: React.FC<Messages2ItemType> = (\n    {id, body, Msg2DeleteMessage, addedAt, senderId, myId, Msg2MarkAsSpam, Msg2Restore, deletedBySender, isSpam}) => {\n\n    const isMyMessage: boolean = myId === senderId ? true : false // индикатор, что мое сообщение\n    const [IdMsg2DropDowShowed, setIdMsg2DropDowShowed] = useState<string>( \"\" ) // показать ли контекстное меню\n    return <div\n        className={`${classes.myIdNotMyIdMsg2ComExt} ${isMyMessage ? classes.myIdMessageExt : classes.NOTmyIdMessageExt}`}>\n        <div\n            className={\n                `${classes.myIdNotMyIdMsg2ComInt} ${isMyMessage ? classes.myIdMessageInt : classes.NOTmyIdMessageInt}`}\n            onMouseOver={() => { // при наведении на сообщение, записываем в локальный стейт id сообщения\n                setIdMsg2DropDowShowed( id )\n            }}\n            onMouseLeave={() => {\n                setIdMsg2DropDowShowed( \"\" ) // при убирании мышки с сообщения, очищаем id локльного стейта нведенного сообщения\n            }}\n        >\n            {deletedBySender\n                ? <div //если помечено как удаленное, отобразит текст удаления и картинку корзины\n                >\n                    <img className={classes.Msg2DeletedPic} src={dustBin} alt=\"\"/>\n                    <div className={classes.Msg2DeletedText}> это сообщение удалено </div>\n                </div>\n                : <div className={classes.Msg2Body}>{body}</div>//тело сообщения\n            }\n            <div className={`${classes.Msg2ItemAdedAtCommon} ${isMyMessage?classes.ColorMy:classes.ColorNotMy}`}>{addedAt.slice( 11, 16 )}</div>\n            {/*Время*/}\n            {isSpam && <img className={classes.Msg2SpamPic} src={Spam} alt=\"\"/>\n\n            }\n            <div className={classes.Msg2DropDownMenuExt}>\n\n                {  IdMsg2DropDowShowed===id && // отрисовываем dropDown в сообщения только для локального IdMsg2DropDowShowed\n                <Msg2DropDownMenu Msg2DeleteMessage={Msg2DeleteMessage} id={id} isMyMessage={isMyMessage}\n                                  Msg2MarkAsSpam={Msg2MarkAsSpam} Msg2Restore={Msg2Restore}\n                                  deletedBySender={deletedBySender} isSpam={isSpam}\n\n                />}\n            </div>\n        </div>\n    </div>\n}\n//React.memo(\nexport default React.memo( Messages2Item )\n/*\nonClick={() => {\n    Msg2DeleteMessage( id )\n}}*/\n","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"MessagesFormik_legendStyle__Vv1lX\",\"fieldSetStyle\":\"MessagesFormik_fieldSetStyle__2ectG\",\"sendSwg\":\"MessagesFormik_sendSwg__TECWd\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\nimport sendSwg from \"../../../assets/images/swg/send-svg2.svg\"\nimport classes from \"./MessagesFormik.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype DialogFormikType = {\n    Msg2SendMessage: (messageBody: string) =>void,\n\n}\ntype valuesType = {\n    newMessage:string\n}\nconst Msg2SendMessageRender:React.FC<DialogFormikType> = ({Msg2SendMessage}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:valuesType, {resetForm}:any) => { // действия по сабмиту\n        Msg2SendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n                {({\n                      handleReset,// обнуление полей\n                    values,\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\n                            <div  className='col-9'>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"\"\n                                    autoFocus={false}\n                                    name='newMessage'\n                                    type='text'\n                                    placeholder='Введите ваше сообщение'\n                                    leftLabelLength={\"\"}\n                                   // autoFocus={true}\n                                />\n                            </div>\n                            <div>\n                                <Button variant={\"light\"} className={\"mx-2\"}\n                                        type=\"submit\" //кнопка отправить форму\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\n                                >\n\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\n                                           title={'Отправить сообщение'}/>\n                                </Button>\n                            </div>\n                        </div>\n                        {/*   <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default React.memo(Msg2SendMessageRender)\n\n","import React from \"react\";\nimport {newMessagesItem} from \"../../api/apiTypes\";\nimport classes from \"./messages2Render.module.scss\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\n\ntype Msg2HeaderNamePhotoType = {\n    userId: number, // id пользователя из URL\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n\n}\nconst Msg2HeaderNamePhoto: React.FC<Msg2HeaderNamePhotoType> = ({userId, D2Item}) => {\n    const photoSrc = D2Item && D2Item.photos && D2Item.photos.small ? D2Item.photos.small : userPhoto // фото с сервера или заглушка\n    return <div>\n        {D2Item && <div>\n            <div className={classes.Msg2HeaderName}>{D2Item && D2Item.userName}</div>\n            <NavLink to={'/profile/' + userId}>\n                <img className={classes.Msg2HeaderPhoto} src={photoSrc} alt=\"photoSrc\"/>\n            </NavLink>\n            <div className={classes.Msg2HeaderActivityDate}>Был(а): {\" \"}\n                {D2Item && D2Item.lastUserActivityDate && D2Item.lastUserActivityDate.slice( 0, 10 )}\n            </div>\n        </div>}\n    </div>\n}\nexport default React.memo( Msg2HeaderNamePhoto ) // сокращаем число ререндеров\n","import React from \"react\";\nimport classes from \"./messages2Render.module.scss\"\nimport {newMessagesItem, sendMessageType} from \"../../api/apiTypes\";\nimport Messages2Item from \"./Messages2Item\";\nimport Msg2SendMessageRender from \"./Msg2SendMessageRender\";\nimport Msg2HeaderNamePhoto from \"./Msg2HeaderNamePhoto\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    userId: number, // id пользователя из URL\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    myId: number // номер моего id\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody: string) => void // отправить сообщение указанному пользователю\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n\n}\nconst Messages2Render: React.FC<Dialog2RenderType> = (\n    {\n        PageWidth, MobileWidth, patch, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, userId,\n        D2Item, myId, Msg2MarkAsSpam, Msg2Restore\n    }) => {\n    return <div>\n        {patch === \"dialog2\" && PageWidth > MobileWidth && <div\n            //- предложение выбрать диалог.Fixed все остальное поле справа.\n            // эта часть отображается только на странице dialog и только в десктопной версии\n            className={`${classes.Fixed} ${classes.messages2ChooseDialog}`}\n        > Выберите диалог\n        </div>}\n\n        {patch === \"messages\" &&\n        <div // эта часть компоненты Messages2Render отрисовывается на странице messages всегда.\n        >\n            <div\n                //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2NameAndProfileLink} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2HeaderNamePhoto userId={userId} D2Item={D2Item}/>\n\n            </div>\n            <div //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2RenderMessages} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                {MessagesNewerThen.map( m2 => { // отрисовка всех сообщений\n                    const {\n                        id, body, addedAt, senderId, deletedBySender, isSpam\n                    } = m2\n                    return <Messages2Item key={id} id={id} body={body} Msg2DeleteMessage={Msg2DeleteMessage}\n                                          addedAt={addedAt} senderId={senderId} myId={myId}\n                                          Msg2MarkAsSpam={Msg2MarkAsSpam} Msg2Restore={Msg2Restore}\n                                          deletedBySender={deletedBySender} isSpam={isSpam}\n                    />\n                } )}\n                <div className=\"second-block\"></div>\n                {/* метка прокуртки сообщений при каждом обновлении списка сообщений*/}\n            </div>\n            <div//fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2PrintMessage} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2SendMessageRender Msg2SendMessage={Msg2SendMessage}/>\n            </div>\n        </div>\n        }\n\n    </div>\n\n}\nexport default Messages2Render\n","import React from \"react\";\nimport classesCommon from \"./dialog2Messages2COM.module.scss\";\nimport Dialog2Render from \"./Dialog2/Dialog2Render\";\nimport Messages2Render from \"./Messages2/Messages2Render\";\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../api/apiTypes\";\n\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    userId: number, // id пользователя из URL\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    D2Item: newMessagesItem, // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    myId: number // номер моего id\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody:string) => void // отправить сообщение указанному пользователю\n    Msg2MarkAsSpam: (message2Id: string)=> void // пометить сообщение как спам\n    Msg2Restore:  (message2Id: string)=> void // восстановить сообщение из спама и удаленных\n}\n\nconst Dialog2Messages2COM: React.FC<Dialog2RenderType> = (\n    {patch, PageWidth, MobileWidth, Dialog2All, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, userId,\n        D2Item, myId, Msg2MarkAsSpam, Msg2Restore}\n    ) => {\n    return <div className={classesCommon.dialog2Messages2Common}>\n        {/*Отрисовка поля диалогов*/}\n        <Dialog2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch} Dialog2All={Dialog2All}/>\n\n        <Messages2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch}\n                         MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n                         Msg2SendMessage={Msg2SendMessage} userId={userId} D2Item={D2Item}\n                         myId={myId} Msg2MarkAsSpam={Msg2MarkAsSpam}\n                         Msg2Restore={Msg2Restore}\n        />\n    </div>\n}\nexport default Dialog2Messages2COM\n","import React, {useCallback, useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {\n    deleteDialog2MessageIdThCr,\n    getDialog2MessageIdViewedThCr, getDialog2MessagesNewerThenThCr,\n    getDialog2AllThCr, postDialog2MessageIdToSpamThCr,\n    postDialog2MessageThCr, putDialog2MessageIdRestoreThCr,\n    putDialog2StartThCr, getDailog2UnreadMessagesThCr, Dialog2Actions, MarkersType\n} from \"../../redux/dialog2-reducer\";\nimport Dialog2Messages2COM from \"./Dialog2Messages2COM\";\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../api/apiTypes\";\nimport {compose} from \"redux\";\nimport withRouter2 from \"../hoc/withRouter2\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\n\ntype DialogContainerType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    userId: number, // id пользователя из URL (withRouter2)\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    Markers: MarkersType//вспомогательные маркеры\n    myId: number // номер моего id\n\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,// получить список всех диалогов\n    setD2UserId: (userId: number) => void, // задать userId из URL в стейт\n    setMarkers: (Markers: MarkersType) => void // задать вспомогательные маркеры\n    setD2Item: (D2Item: newMessagesItem) => void // задать D2Item (шапку сообщений)\n    getDialog2AllAC: (Dialog2All: getDialog2AllType) => void, // изменить локально данные в диалоглис\n\n    putDialog2StartThCr: (currentDialogId: number) => void,\n    postDialog2MessageThCr: (userId: number, body: string, date: string, Markers: MarkersType) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string, MessagesNewerThen: Array<sendMessageType>) => void,\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string, MessagesNewerThen: Array<sendMessageType>) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string, MessagesNewerThen: Array<sendMessageType>) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n\n}\nconst Dialog2Messages2Container: React.FC<DialogContainerType> = (\n    {\n        putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n        getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n        putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n        patch, PageWidth, MobileWidth, Dialog2All, userId, MessagesNewerThen, setD2UserId, D2Item,\n        Markers, setMarkers, setD2Item, getDialog2AllAC, myId\n    }\n) => {\n    //cde7821a-6981-4f49-8b12-faf681cb1621 от \"555\"\n    // 84ac68ee-73d0-43c4-82bb-0fd0273d4808 (привет андрей)\n    // 25528  | 27045 | 1079\n\n    const Msg2DeleteMessage = useCallback( (message2Id: string) => {// - удалить сообщение (только у себя) по ID сообщения\n        deleteDialog2MessageIdThCr( message2Id, userId, \"2022-04-30T19:10:31.843\" , MessagesNewerThen)\n    }, [userId, MessagesNewerThen, deleteDialog2MessageIdThCr] )\n\n    const Msg2MarkAsSpam = (message2Id: string) => {// - пометить сообщение как спам по ID сообщения\n         postDialog2MessageIdToSpamThCr(message2Id, MessagesNewerThen)\n    }\n    const Msg2Restore = (message2Id: string) => {// - пометить сообщение как спам по ID сообщения\n         putDialog2MessageIdRestoreThCr(message2Id, MessagesNewerThen) // - восстановить сообщение из спама и удаленных\n    }\n\n    const Msg2SendMessage = (messageBody: string) => {\n        postDialog2MessageThCr( userId, messageBody, \"2022-04-30T19:10:31.843\", Markers )// отправить сообщение указав ID пользователя\n        if (Markers.dialogId !== userId) { //Если мы еще не начали диалог с пользователем, и отправили сообщение\n            putDialog2StartThCr( userId ) // инициировать диалог\n            setMarkers( { // маркер пометить, что диалог начался\n                ...Markers,\n                dialogId: userId\n            } )\n        }\n    }\n    const secondBlock = document.querySelector( '.second-block' ) // ссылка на прокрутку вниз\n\n    const MSG2ScrollBottom = () => {\n        secondBlock && secondBlock.scrollIntoView( true )\n    }\n    //Сама метка className=\"second-block\" находится в дочерней Messages2Render\n\n    useEffect( () => {\n            // через интервал времени при выборе диалога с новыми сообщениями локально пометить сообщение\n            // как прочитаное. При следующем получении данных с сервера, все синхронизируется\n            if (D2Item && D2Item.newMessagesCount > 0) {  //если маркер непрочтенных сообщений больше нуля\n                setTimeout( () => { // делаем таймер паузу пока сообщение не исчезнет\n                    const Dialog2AllLocal2: getDialog2AllType = [];\n                    Dialog2All.forEach( dd => {\n                        if (dd.id === userId) { // если это диалог в котором есть новые сообщения\n                            dd.hasNewMessages = false; // зануляем значения\n                            dd.newMessagesCount = 0;\n                        }\n                        Dialog2AllLocal2.push( dd ) //на каждой итерации добавляем элемент в новый массив копию\n                    } )\n                    console.log( \"таймер закончился\" )\n                    getDialog2AllAC( Dialog2AllLocal2 )\n                }, 1000 )\n            }\n        },\n        [D2Item, Dialog2All, getDialog2AllAC, userId] )\n\n    // getDialog2MessageIdViewedThCr(\"84ac68ee-73d0-43c4-82bb-0fd0273d4808\") // проверить прочитано ли сообщение по его ID\n    // getDailog2UnreadMessagesThCr() // - вернуть количество непрочтенных сообщений\n    useEffect( () => {\n        if (userId !== 0 && !Markers.straightFirstUploaded) {\n            console.log( \"начать диалог по непустому userId \" )\n            putDialog2StartThCr( userId ) // начать диалог\n            setMarkers( {\n                ...Markers, straightFirstUploaded: true\n            } )\n        }\n    }, [userId, Markers, putDialog2StartThCr, setMarkers] )\n\n    useEffect( () => {\n        if (userId !== 0) {\n            console.log( \"получить сообщения при смене userId\" )\n            getDialog2MessagesNewerThenThCr( userId, \"2022-04-30T19:10:31.843\" )\n\n            const D2ItemLocal: newMessagesItem = Dialog2All.filter( d2 => d2.id === userId )[0]\n            setD2Item( D2ItemLocal )\n        }\n    }, [userId, Dialog2All, getDialog2MessagesNewerThenThCr, setD2Item] )\n\n    useEffect( () => {\n        if (patch === \"dialog2\" && !Markers.Dialog2FirstUploaded) {\n            console.log( \"Единичное получение списка диалогов на странице dialog2\" )\n            getDialog2AllThCr( 25528, 1, 10 )\n            setMarkers( {\n                ...Markers, Dialog2FirstUploaded: true\n            } )\n        }\n    }, [userId, patch, Markers, getDialog2AllThCr, setMarkers] )\n\n    useEffect( () => {\n        if (Markers.needToScrollBottom) {\n            MSG2ScrollBottom() // прокручиваем список сообщений вниз\n            setMarkers( {\n                ...Markers, needToScrollBottom: false // ставим маркер - прокручивать вниз не нужно\n            } )\n        }\n    }, [Markers, MSG2ScrollBottom, setMarkers] )\n\n    return <div>\n        <Dialog2Messages2COM\n            patch={patch} PageWidth={PageWidth} MobileWidth={MobileWidth} Dialog2All={Dialog2All}\n            MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n            Msg2SendMessage={Msg2SendMessage} userId={userId} D2Item={D2Item}\n            myId={myId} Msg2MarkAsSpam={Msg2MarkAsSpam} Msg2Restore={Msg2Restore}\n        />\n\n    </div>\n}\nconst mapStateToProps = (state: GlobalStateType) => {\n    return {\n        patch: state.app.patch,\n        PageWidth: state.app.PageWidth,\n        MobileWidth: state.app.MobileWidth,\n        Dialog2All: state.dialog2.Dialog2All,\n        MessagesNewerThen: state.dialog2.MessagesNewerThen,\n        D2Item: state.dialog2.D2Item,\n        Markers: state.dialog2.Markers,\n        myId: state.auth.myId\n    }\n}\ntype mapStateToPropsType = {\n    patch: string,\n    PageWidth: number,\n    MobileWidth: number,\n    Dialog2All: getDialog2AllType,\n    MessagesNewerThen: Array<sendMessageType>,\n    D2Item: newMessagesItem,\n    Markers: MarkersType,\n    myId: number\n\n}\ntype mapDispatchToPropsType = {\n    putDialog2StartThCr: (currentDialogId: number) => void,\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,\n    postDialog2MessageThCr: (userId: number, body: string, date: string, Markers: MarkersType) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string, MessagesNewerThen: Array<sendMessageType>) => void,\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string, MessagesNewerThen: Array<sendMessageType>) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string, MessagesNewerThen: Array<sendMessageType>) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n    setD2UserId: (userId: number) => void,\n    setMarkers: (Markers: MarkersType) => void,\n    setD2Item: (D2Item: newMessagesItem) => void,\n    getDialog2AllAC: (Dialog2All: getDialog2AllType) => void,\n}\nconst {setD2UserId, setMarkers, setD2Item, getDialog2AllAC} = Dialog2Actions // получить экшены\n\nexport default compose<any>(\n    connect<mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType>( mapStateToProps,\n        {\n            putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n            getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n            putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n            setD2UserId, setMarkers, setD2Item, getDialog2AllAC\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2\n)\n( Dialog2Messages2Container );\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nlet NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n"],"names":["Dialog2Item","_ref","userName","hasNewMessages","photos","lastDialogActivityDate","newMessagesCount","id","_jsx","className","classes","children","NavLink","to","_jsxs","src","small","userPhoto","alt","slice","React","Dialog2Render","PageWidth","MobileWidth","patch","Dialog2All","hasRendered","concat","map","d2","includes","push","Msg2DeleteMessage","isMyMessage","Msg2MarkAsSpam","Msg2Restore","deletedBySender","isSpam","_Fragment","Dropdown","eventKey","onClick","dustBin","Spam","Restore","Messages2Item","body","addedAt","senderId","myId","_useState","useState","_useState2","_slicedToArray","IdMsg2DropDowShowed","setIdMsg2DropDowShowed","onMouseOver","onMouseLeave","Msg2DropDownMenu","myInitialValues","newMessage","myValidationSchema","Yup","Msg2SendMessageRender","Msg2SendMessage","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","Button","variant","disabled","Image","sendSwg","title","Msg2HeaderNamePhoto","userId","D2Item","photoSrc","lastUserActivityDate","MessagesNewerThen","m2","classesCommon","Messages2Render","setD2UserId","Dialog2Actions","setMarkers","setD2Item","getDialog2AllAC","compose","connect","state","app","dialog2","Markers","auth","putDialog2StartThCr","getDialog2AllThCr","postDialog2MessageThCr","getDialog2MessageIdViewedThCr","postDialog2MessageIdToSpamThCr","deleteDialog2MessageIdThCr","putDialog2MessageIdRestoreThCr","getDialog2MessagesNewerThenThCr","getDailog2UnreadMessagesThCr","withRouter2","NavigateToLoginHoc2","useCallback","message2Id","secondBlock","document","querySelector","MSG2ScrollBottom","scrollIntoView","useEffect","setTimeout","Dialog2AllLocal2","forEach","dd","console","log","straightFirstUploaded","_objectSpread","D2ItemLocal","filter","Dialog2FirstUploaded","needToScrollBottom","Dialog2Messages2COM","messageBody","dialogId","CommonInputTextArea","props","_objectWithoutProperties","_excluded","_useField","useField","meta","touched","error","_excluded2","_useField3","_useField4","field","InputGroup","size","style","width","as","undefined","MyCheckbox","_excluded3","_useField5","_useField6","mapStateToProps","isAuth","Component","Navigate","Children","aaa","params","useParams","Number"],"sourceRoot":""}