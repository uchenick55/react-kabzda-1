{"version":3,"file":"static/js/762.68e45503.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusUseReducer.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx","components/hoc/NavigateToLoginHoc.js","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__2H7Cx\",\"posts\":\"Profile_posts__Zsb5o\",\"ProfileRender\":\"Profile_ProfileRender__e0enY\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__wm1cP\",\"profilePhotoIMG\":\"ProfileInfo_profilePhotoIMG__EJ0ge\",\"profileInfoGreed\":\"ProfileInfo_profileInfoGreed__Ivmkx\",\"buttonsPhotoUpload\":\"ProfileInfo_buttonsPhotoUpload__Uo53b\"};","import React, {useReducer} from \"react\";\r\nimport {bedug_mode} from \"../../../../redux/store-redux\";\r\n\r\nlet ProfileStatusUseReducer = ({status, userId, myId, putStatusThunkCreator}) => {\r\n    const initialState = {\r\n        modifyStatus2: false,// локальная переменная-флаг модификации статуса\r\n        statusTmpInput2: null // локальный статус до отправки на сервер (поле input)\r\n    }\r\n\r\n    const SET_MODIFY_STATUS_TRUE = \"SET_MODIFY_STATUS_TRUE\"; // константа чтобы не ошибиться при диспатче (modify true)\r\n    const SET_MODIFY_STATUS_FALSE = \"SET_MODIFY_STATUS_FALSE\";// константа чтобы не ошибиться при диспатче (modify false)\r\n    const SET_STATUS_TMP_INPUT = \"SET_STATUS_TMP_INPUT\";// константа чтобы не ошибиться при диспатче (временный статус input)\r\n\r\n    const localReducer = (localState, action) => {\r\n        let stateCopy; // копия стейта для дебага\r\n        switch (action.type) {\r\n            case SET_MODIFY_STATUS_TRUE: // если мы открываем поле input (модификацию стьатуса)\r\n                stateCopy = {\r\n                    ...localState,\r\n                    modifyStatus2: true, // флаг модификации в true\r\n                    statusTmpInput2: status// локальный статус для input берем из стейта\r\n                };\r\n                return stateCopy; // проверяем что все вернулось как нужно\r\n            case SET_MODIFY_STATUS_FALSE: // если мы закрываем модификацию стьатуса\r\n                stateCopy = {\r\n                    ...localState,\r\n                    modifyStatus2: false // флаг модификации в false\r\n                };\r\n                return stateCopy; // проверяем что все вернулось как нужно\r\n            case 'SET_STATUS_TMP_INPUT':\r\n                stateCopy = {\r\n                    ...localState,\r\n                    statusTmpInput2: action.text // задаем локальный статус из value input\r\n                };\r\n                return stateCopy; // проверяем что все вернулось как нужно\r\n            default:\r\n                throw new Error(); // заглушка обработчика ошибок\r\n        }\r\n    }\r\n\r\n    const [localState, dispatch] = useReducer(localReducer, initialState)// меняем отдельные useState на useReducer\r\n\r\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\r\n        if (userId === myId) { // если ID открытого пользователя равен моему\r\n            dispatch({type: SET_MODIFY_STATUS_TRUE})// смена текстового отображения статуса на поле input\r\n        }\r\n    }\r\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\r\n        dispatch({type: SET_MODIFY_STATUS_FALSE})// смена текстового отображения статуса на поле input\r\n\r\n        if (bedug_mode) {console.log(\"ProfileStatusUseReducer.jsx, setMyStatus putStatusThunkCreator() ->SET_USER_PROFILE\" )} // дебаг\r\n\r\n        /////////  ProfileInfo.jsx\r\n\r\n        putStatusThunkCreator(localState.statusTmpInput2, myId)// санкреатор на обновление статуса на сервере\r\n    }\r\n    const onChangeStatus = (event) => {\r\n        const text = event.currentTarget.value;// вынимаем значение введенное в поле ввода input\r\n        dispatch({type: SET_STATUS_TMP_INPUT, text: text})// присваиваем переменной временного статуса из локального стейта введенное значение в поле\r\n    }\r\n    const checkEnterPressed = (event) => { // проверка нажатия Enter\r\n        if (event.charCode === 13) {\r\n            setMyStatus()//задание статуса при нажатии Enter\r\n        }\r\n    }\r\n\r\n    return (<div>\r\n        {!localState.modifyStatus2\r\n            ? <div>\r\n                <span\r\n                    onDoubleClick={checkIfICanModifyStatus}> {/*при двойном клике на статусе проверка могу ли я ввобще менять статус*/}\r\n                    Статус: {!status // если статуса из стейта нет или он нулевой\r\n                        ? \"нет статуса\" // отображение \"нет статуса\"\r\n                        : status // если статус есть из BLL, он отображается\r\n                    }\r\n                </span>\r\n            </div>\r\n            : <div>\r\n                <span onDoubleClick={setMyStatus}>\r\n                    <input\r\n                        value={localState.statusTmpInput2} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\r\n                        onChange={onChangeStatus} // задание временного локального статуса\r\n                        onBlur={setMyStatus}// задание стейта при потере фокуса input\r\n                        autoFocus={true} // фокусировка на поле ввода текста\r\n                        placeholder={\"задайте статус\"}// текст при пустом поле ввода\r\n                        onKeyPress={checkEnterPressed} // проверка нажатия Enter\r\n                    />\r\n                </span>\r\n            </div>\r\n        }\r\n    </div>)\r\n}\r\nexport default ProfileStatusUseReducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\nimport classes from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusUseReducer from \"./ProfileStatus/ProfileStatusUseReducer\";\nimport {bedug_mode} from \"../../../redux/store-redux\";\nimport userPhoto1 from \"../../../assets/images/no-image3.png\"; // заглушка фото пользователя\n\nconst ProfileInfo = ({profile, myId, status, putStatusThunkCreator, uploadImage, userId}) => {\n    const [profilePhoto, setprofilePhoto] = useState(userPhoto1) // useState для временного хранения фото пользователя\n    if (bedug_mode) {\n        console.log(\"ProfileInfo.jsx\")\n    } // дебаг\n    if (!profile) { // если профиль еще не загружен\n        return <Preloader/> // отобразить предзагрузку\n    }\n    let onChangeProfilePhoto = (e) => {\n        setprofilePhoto(e.target.files[0]) // записать в useState выбранный файл фото профиля(временный стейт)\n\n    }\n    return <div>\n        <div className={classes.profileInfoGreed}>\n\n            <div>\n                <img alt={\"userPhoto\"} className={classes.profilePhotoIMG}\n                     src={profile.photos.large ? profile.photos.large : userPhoto1}/>\n            </div>\n\n            <div className={classes.descriptionBlock}>\n                <h3>{profile.fullName}</h3>\n                <div>Обо мне: {profile.aboutMe}</div>\n                <div>Контакты:</div>\n                <div> facebook: {profile.contacts.facebook}</div>\n                <div>vk: {profile.contacts.vk}</div>\n                <div>twitter: {profile.contacts.twitter}</div>\n                <div>instagram: {profile.contacts.instagram}</div>\n                <div>github: {profile.contacts.github}</div>\n                <div>В поиске работы? {profile.lookingForAJob ? \"Да\" : \"Нет\"}</div>\n                <div>Описание: {profile.lookingForAJobDescription}</div>\n                <div>userId: {profile.userId}</div>\n                <div>\n                    {/*Компонента отображения моего статуса*/}\n                    <ProfileStatusUseReducer // можно еще использовать ProfileStatusUseState и ProfileStatusClass\n                        myId={myId} // мой id для модификации статуса\n                        userId={profile.userId} // id отображаемого пользователя\n                        status={status} // статус из BLL\n                        putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n                    />\n                </div>\n            </div>\n        </div>\n        <div>\n            {userId === 0 // если мы перешли на свой профиль (в браузере нет ID возле profile)\n                ? <div>\n                    <form> {/*форма отправки фото профиля на сервер*/}\n                        <span><button onClick={() => {\n                            uploadImage(profilePhoto)\n                        }}>Загрузить</button></span> {/*По клику отправить файл на сервер*/}\n                        <span><input type=\"file\" onChange={onChangeProfilePhoto}/></span> {/*загрузить файл*/}\n                    </form>\n                </div>\n                : null}\n        </div>\n\n    </div>\n}\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__g8RkF\",\"postsBlock\":\"MyPosts_postsBlock__JTP3R\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__+6X+V\",\"item\":\"Post_item__kFO1d\",\"posts\":\"Post_posts__VMct2\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = ({message, like}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img alt={\"Мистер бин на прогулке\"}  src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\r\n            {message}\r\n            <div>\r\n                <span>Like {like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Post;\r\n","import React from 'react'; // импорт реакта\nimport classes from './MyPosts.module.css' // css обработка\nimport Post from \"./Post/Post\"; // подкомпонента отрисовки постов через map\nimport {Field, reduxForm, reset} from \"redux-form\";\nimport {maxLengthCreator, Required} from \"../../common/Validation/validationField\";\nimport {Textarea} from \"../../common/Validation/customFields\";\nimport {bedug_mode} from \"../../../redux/store-redux\"; // reduxForm для ввода новых постов\n\nconst newPostForm = ({handleSubmit}) => { // компонента формы\n    return (\n        <form onSubmit={handleSubmit} /*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\n            <div>\n                <div>\n                    <Field\n                        name={\"newPostData\"} // имя поля формы и возвращаемого свойства объекта после сабмита формы\n                        component={Textarea} //настраиваемый компонент текстовое поле для вывода ошибок ввода\n                        placeholder={\"newPost\"} // текст подсказка при пустом поле\n                        validate={[Required, maxLengthCreator(60)]} //  валидация требуемого поля и максимальной длины\n                    />\n                </div>\n                <div>\n                    <button>Submit</button>\n                    {/*кнопка*/}\n                </div>\n            </div>\n        </form>\n    )\n}\n\n// оберточная компонента формы, задает имя подстейта \"newPostForm\"\nconst NewPostReduxForm = reduxForm({form: \"newPostForm\"})(newPostForm)\n\nconst MyPosts = ({userId, state, addPost, dispatch}) => { // основная компонента отрисовки постов\n    if (bedug_mode) {\n        console.log(\"MyPosts.jsx\")\n    } // дебаг\n\n    let postElements = state.posts.map((p) => // подкомпонента отрисовки всех постов через map\n        <Post message={p.message} like={p.like} id={p.id}/>);\n\n    let AddPost = (formData) => { // функция отправления данных формы нового поста в стейт\n// здесь зарезетить форму\n        dispatch(reset('newPostForm'))\n        addPost(formData.newPostData);\n    };\n\n    return (\n        <div className={classes.postsBlock} /*стиль*/ >\n            {userId === 0 // если мы перешли на свой профиль (в браузере нет ID возле profile)\n                ? <div>\n                    <h3>My posts</h3> {/*h3 заголовок*/}\n                    <NewPostReduxForm\n                        onSubmit={AddPost}/> {/*вызов формы постов с отсылкой на локальный обработчик сабмита*/}\n                    <div className={classes.posts}>\n                        {postElements} {/*отрисовка постов*/}\n                    </div>\n                </div>\n                : null\n            }\n        </div>\n    )\n}\nexport default MyPosts;\n//скрыть поле ввода постов, если это не мой аккаунт\n","import MyPosts from \"./MyPosts\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostData) => {\r\n            dispatch(addPostActionCreator(newPostData))\r\n        },\r\n        dispatch: dispatch\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\nimport classes from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {bedug_mode} from \"../../redux/store-redux\";\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\";\n\nconst Profile = ({profile, status, myId, putStatusThunkCreator, uploadImage, userId}) => {\n    if (bedug_mode) {\n        console.log(\"Profile.jsx\")\n    } // дебаг\n\n    let ProfileRender = <div className={classes.ProfileRender}>\n        <ProfileInfo // Отображение данных выбранного пользователя\n            profile={profile} // профиль выбранного пользователя\n            status={status} // статус из BLL\n            myId={myId} // мой id для модификации статуса\n            putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n            uploadImage={uploadImage} // колбек загрузки фото профиля на сервер\n            userId={userId} // id выбранного пользователя, берется из URL\n        />\n        <MyPostsContainer // контейнер отображения постов (пока заглушка из стейта BLL)\n            userId={userId} // id выбранного пользователя, берется из URL\n        />\n    </div>\n    return <div>\n        <ScrollContainer\n            child={ProfileRender}\n            height={window.screen.availHeight-280}\n            firstInsideContainer={\"ProfileUp\"}\n            secondInsideContainer={\"ProfileDown\"}\n            containerElement={\"ProfileContainer\"}\n        /> {/*отрисовка FriendList в скрол контейнере*/}\n\n\n    </div>\n}\nexport default Profile;\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileThunkCreator, putStatusThunkCreator, setprofilePhotoThunkCreator} from \"../../redux/profile-reducer\";\r\nimport {useParams} from \"react-router-dom\"\r\nimport {NavigateToLoginHoc} from \"../hoc/NavigateToLoginHoc\";\r\nimport {compose} from \"redux\";\r\nimport {bedug_mode} from \"../../redux/store-redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        if (bedug_mode) {\r\n            console.log(\"ProfileContainer.js componentDidMount()\")\r\n        } // дебаг\r\n        this.props.getProfileThunkCreator(this.props.userId);// обновить профиль в зависомости от ID\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let userId = this.props.userId; // получить локальный userId из URL браузера\r\n        if (userId === 0) {\r\n            userId = this.props.myId\r\n        }// если кликнули на мой профиль (без ID в URL браузера) то смотрим мой профиль\r\n        if (userId !== this.props.profile.userId) { // если считаный из URL ID не равен записаному в стейт (смена пользователя)\r\n            this.props.getProfileThunkCreator(userId); // обновить профиль в зависомости от ID\r\n        }\r\n    }\r\n\r\n    uploadImage = (profilePhoto) => {\r\n        console.log(profilePhoto)\r\n        this.props.setprofilePhotoThunkCreator(profilePhoto, this.props.myId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} uploadImage={this.uploadImage}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        myId: state.auth.myID,\r\n        status: state.profilePage.status,\r\n    }\r\n}\r\n\r\nfunction withRouter(Children) {\r\n    return (props) => {\r\n        let match = {params: useParams()}\r\n        let userId = Number(match.params[\"*\"]); // получить локальный userId из URL браузера\r\n        return <Children {...props} match={match} userId={userId}/>\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfileThunkCreator, putStatusThunkCreator, setprofilePhotoThunkCreator}),\r\n    withRouter,\r\n    NavigateToLoginHoc\r\n)\r\n(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport let NavigateToLoginHoc = (Component) => { // оберточная компонента проверки на Login, оборачивающая целевую компоненту\r\n    class NavigateToLoginHocWithAuth extends React.Component { // внутренняя компонента уже с данными isAuth\r\n        render () {\r\n            if (!this.props.isAuth) { // условие что я не авторизован\r\n                return <Navigate to='../login'/>; // редирект на страницу Login\r\n            }\r\n            return <Component {...this.props}/> /// возврат целевой компоненты, если редиректа не было на Login\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(NavigateToLoginHocWithAuth)// добавляем в стейт флаги isAuth - \"я авторизован?\"\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};"],"names":["status","userId","myId","putStatusThunkCreator","SET_MODIFY_STATUS_TRUE","SET_MODIFY_STATUS_FALSE","useReducer","localState","action","type","modifyStatus2","statusTmpInput2","text","Error","dispatch","setMyStatus","bedug_mode","console","log","onDoubleClick","value","onChange","event","currentTarget","onBlur","autoFocus","placeholder","onKeyPress","charCode","profile","uploadImage","useState","userPhoto1","profilePhoto","setprofilePhoto","Preloader","className","classes","alt","src","photos","large","fullName","aboutMe","contacts","facebook","vk","twitter","instagram","github","lookingForAJob","lookingForAJobDescription","onClick","e","target","files","message","like","NewPostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","name","component","Textarea","validate","Required","maxLengthCreator","state","addPost","postElements","posts","map","p","id","formData","reset","newPostData","connect","profilePage","addPostActionCreator","MyPosts","ProfileRender","ScrollContainer","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","ProfileContainer","props","setprofilePhotoThunkCreator","this","getProfileThunkCreator","prevProps","prevState","snapshot","React","compose","isAuth","auth","myID","Children","match","params","useParams","Number","NavigateToLoginHoc","input","meta","restProps","isError","touched","error","Input","maxLength","length","email","test","undefined","mapStateToProps","Component","NavigateToLoginHocWithAuth","to"],"sourceRoot":""}