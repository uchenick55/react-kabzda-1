{"version":3,"file":"static/js/569.d8f06e7d.chunk.js","mappings":"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","sources":["assets/images/swg/send-svg2.svg","webpack://my-app/./src/components/Dialog2Messages2/dialog2Messages2COM.module.scss?b62d","webpack://my-app/./src/components/Dialog2Messages2/Dialog2/dialog2Render.module.css?aae0","components/Dialog2Messages2/Dialog2/Dialog2Item.tsx","components/Dialog2Messages2/Dialog2/Dialog2Render.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/messages2Render.module.scss?0979","components/Dialog2Messages2/Messages2/Messages2Item.tsx","webpack://my-app/./src/components/Dialog2Messages2/Messages2/MessagesFormik.module.css?1d18","components/Dialog2Messages2/Messages2/Msg2SendMessageRender.tsx","components/Dialog2Messages2/Messages2/Msg2HeaderNamePhoto.tsx","components/Dialog2Messages2/Messages2/Messages2Render.tsx","components/Dialog2Messages2/Dialog2Messages2COM.tsx","components/Dialog2Messages2/Dialog2Messages2Container.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx"],"sourcesContent":["var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSendSvg2(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#000000\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"800px\",\n    height: \"800px\",\n    viewBox: \"0 0 70 70\",\n    enableBackground: \"new 0 0 70 70\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.909,5.596c-0.641-0.409-1.462-0.42-2.11-0.026L4.133,41.638c-0.676,0.408-1.048,1.176-0.95,1.958 c0.097,0.783,0.646,1.436,1.399,1.666l18.664,5.707l2.445,12.145c0.142,0.701,0.646,1.273,1.324,1.501 c0.208,0.07,0.423,0.104,0.637,0.104c0.48,0,0.954-0.174,1.325-0.502l9.658-8.542l19.824,6.062 c0.191,0.059,0.389,0.088,0.585,0.088c0.387,0,0.77-0.112,1.1-0.329c0.497-0.328,0.823-0.86,0.889-1.452L66.821,7.5 C66.904,6.744,66.551,6.006,65.909,5.596z M28.928,58.921l-1.333-6.623l6.555,2.005L28.928,58.921z M57.321,57.206l-24.833-7.593 l20.105-23.584c0.358-0.42,0.309-1.051-0.112-1.409c-0.419-0.359-1.052-0.309-1.409,0.112L30.405,48.976l-20.373-6.229 l52.369-31.658L57.321,57.206z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.524,39.707c0.042,0.006,0.083,0.008,0.124,0.008c0.498,0,0.929-0.371,0.991-0.877l0.186-1.5 c0.068-0.549-0.321-1.048-0.869-1.115c-0.547-0.073-1.047,0.322-1.115,0.869l-0.186,1.5C54.587,39.141,54.977,39.64,55.524,39.707z \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.191,50.396c0.048,0.007,0.096,0.01,0.143,0.01c0.489,0,0.917-0.359,0.989-0.858l0.959-6.691 c0.078-0.547-0.302-1.053-0.849-1.132c-0.542-0.077-1.052,0.302-1.132,0.849l-0.959,6.691 C53.265,49.812,53.645,50.317,54.191,50.396z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendSvg2);\nexport default __webpack_public_path__ + \"static/media/send-svg2.12d8e771d6d27bcd4485de69966afd04.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"dialog2Messages2Common\":\"dialog2Messages2COM_dialog2Messages2Common__yrugD\",\"Fixed\":\"dialog2Messages2COM_Fixed__8oFn8\"};","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"dialog2Render_Fixed__yAlTJ\",\"dialog2HeaderCommon\":\"dialog2Render_dialog2HeaderCommon__YO-4Y\",\"dialog2ListCommon\":\"dialog2Render_dialog2ListCommon__ZMqFo\",\"MobileDialogWidth\":\"dialog2Render_MobileDialogWidth__ahAt-\",\"DesktopDialogWidth\":\"dialog2Render_DesktopDialogWidth__zSxVR\",\"Dialog2ItemCardExt\":\"dialog2Render_Dialog2ItemCardExt__LODJo\",\"Dialog2ItemCardInt\":\"dialog2Render_Dialog2ItemCardInt__HQqPI\",\"Dialog2ItemCardName\":\"dialog2Render_Dialog2ItemCardName__zSixE\",\"Dialog2ItemCardId\":\"dialog2Render_Dialog2ItemCardId__A8R-f\",\"Dialog2ItemCardPhoto\":\"dialog2Render_Dialog2ItemCardPhoto__jPmgw\",\"Dialog2ItemCardNewMsgCnt\":\"dialog2Render_Dialog2ItemCardNewMsgCnt__TrWvv\",\"Dialog2ItemCardMsgTime\":\"dialog2Render_Dialog2ItemCardMsgTime__2bCd+\"};","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport userPhoto from \"../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\n\ntype Dialog2ItemType = {\n    userName: string, //\"evgeniysazonov\"\n    hasNewMessages: boolean,\n    lastDialogActivityDate: string, //\"2023-04-30T19:10:31.843\"\n    newMessagesCount: number, //0\n    photos: {\n        small: string,// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user-small.jpg?v=1\",\n        large: string// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user.jpg?v=1\"\n    },\n    id: number\n}\nconst Dialog2Item: React.FC<Dialog2ItemType> = (\n    {userName, hasNewMessages, photos, lastDialogActivityDate, newMessagesCount, id}) => {\n    //console.log(\"Dialog2Item\")\n    return <div className={classes.Dialog2ItemCardExt}>\n        <NavLink to={'/messages/' + id}>\n            <div className={classes.Dialog2ItemCardInt}>\n                <div className={classes.Dialog2ItemCardName}>{userName}</div>   {/*Имя пользователя*/}\n                <div className={classes.Dialog2ItemCardId}>{id}</div>   {/*Имя пользователя*/}\n                {hasNewMessages && <div\n                    className={classes.Dialog2ItemCardNewMsgCnt}>{newMessagesCount}</div>} {/*вывод количества новых сообщений*/}\n                <img src={photos.small ? photos.small : userPhoto} className={classes.Dialog2ItemCardPhoto}\n                     alt=\"CardPhoto\"/> {/*Фото*/}\n                <div className={classes.Dialog2ItemCardMsgTime}>{lastDialogActivityDate.slice( 11, 16 )}</div>\n                {/*Время*/}\n            </div>\n        </NavLink>\n    </div>\n}\nexport default React.memo(Dialog2Item)\n","import React from \"react\";\r\nimport classes from \"./dialog2Render.module.css\"\r\nimport {getDialog2AllType} from \"../../api/apiTypes\";\r\nimport Dialog2Item from \"./Dialog2Item\";\r\n\r\ntype Dialog2RenderType = {\r\n    patch: string,// имя страницы из URL\r\n    PageWidth: number, // ширина страницы\r\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\r\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\r\n}\r\nconst Dialog2Render: React.FC<Dialog2RenderType> = (\r\n    {PageWidth, MobileWidth, patch, Dialog2All}\r\n    ) => {\r\n    const hasRendered: Array<number> = [] // массив, какие диалоги в списке уже были отрисованы\r\n    return <div>\r\n        { // Компонента Dialog2Render отрисовывается на странице dialog всегда.\r\n            // На странице messages только при десктопной версии\r\n            ((patch === \"messages\" && PageWidth > MobileWidth) || (patch === \"dialog2\"))\r\n            && <div>\r\n                <div  //Fixed слева вверху.\r\n                    // Поле остается на странице dialog2 всегда.\r\n                    // На странице messages только при десктопной версии\r\n                    className={`${classes.Fixed} ${classes.dialog2HeaderCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\r\n                    /*поиск по именам списка диалогов, с задержкой после ввода, без кнопки отправить*/\r\n\r\n                > поиск, без кнопки отправить, с задержкой после ввода.\r\n                </div>\r\n                <div // Fixed слева внизу + прокрутка. Поле остается на странице dialog2 всегда\r\n                    className={`${classes.Fixed} ${classes.dialog2ListCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\r\n                >\r\n                    {Dialog2All.map(d2=>{\r\n                        const {id, userName, hasNewMessages, lastDialogActivityDate, newMessagesCount, photos} = d2\r\n                        if (hasRendered.includes(id)) { //был глюк с записью двух одинаковых диалогов на сервер.\r\n                            // Исправил проверкой, что уже отрисовано\r\n                            return <div/>\r\n                        }\r\n                        hasRendered.push(id)\r\n                        return <Dialog2Item\r\n                            key={id} userName={userName} hasNewMessages={hasNewMessages} photos={photos}\r\n                            lastDialogActivityDate={lastDialogActivityDate} newMessagesCount={newMessagesCount} id={id} />\r\n                    })}\r\n\r\n                    {/*список диалогов с фильтрацией по имени из заголовка. */}\r\n                </div>\r\n            </div>}\r\n\r\n    </div>\r\n}\r\nexport default React.memo(Dialog2Render)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"messages2Render_Fixed__baHQ8\",\"messages2NameAndProfileLink\":\"messages2Render_messages2NameAndProfileLink__gsVN6\",\"messages2ChooseDialog\":\"messages2Render_messages2ChooseDialog__JKbif\",\"messages2RenderMessages\":\"messages2Render_messages2RenderMessages__Ebe0U\",\"messages2PrintMessage\":\"messages2Render_messages2PrintMessage__dhozP\",\"MobileMessagesLeft\":\"messages2Render_MobileMessagesLeft__6JOQ+\",\"DesktopMessagesLeft\":\"messages2Render_DesktopMessagesLeft__rsM5T\",\"Msg2HeaderName\":\"messages2Render_Msg2HeaderName__Mw++x\",\"Msg2Headerid\":\"messages2Render_Msg2Headerid__UXsSw\",\"Msg2HeaderPhoto\":\"messages2Render_Msg2HeaderPhoto__XGI9W\",\"Msg2HeaderActivityDate\":\"messages2Render_Msg2HeaderActivityDate__ZWTOr\"};","import React from \"react\";\r\n\r\ntype Messages2ItemType = {\r\n   id: string// \"cde7821a-6981-4f49-8b12-faf681cb1621\",\r\n   body: string// \"555\",\r\n    addedAt: string// \"2023-05-01T07:13:00.54\",\r\n    senderId:number// 25528,\r\n    senderName:string// \"evgeniysazonov1983\",\r\n    recipientId: number//27045,\r\n    recipientName:string// \"evgeniysazonov\",\r\n    viewed: boolean// false,\r\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\r\n\r\n}\r\nconst Messages2Item: React.FC<Messages2ItemType> = (\r\n    {id, body, Msg2DeleteMessage, addedAt, senderId, senderName, recipientId, recipientName, viewed })=>{\r\n    console.log(\"Messages2Item\")\r\n    return <div>\r\n        <span onClick={()=>{\r\n            Msg2DeleteMessage(id)\r\n        }}>{body}</span> {\"- \"}\r\n        <span>{recipientId}</span>\r\n\r\n    </div>\r\n}\r\n//React.memo(\r\nexport default React.memo(Messages2Item)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"legendStyle\":\"MessagesFormik_legendStyle__Vv1lX\",\"fieldSetStyle\":\"MessagesFormik_fieldSetStyle__2ectG\",\"sendSwg\":\"MessagesFormik_sendSwg__TECWd\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\nimport sendSwg from \"../../../assets/images/swg/send-svg2.svg\"\nimport classes from \"./MessagesFormik.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype DialogFormikType = {\n    Msg2SendMessage: (messageBody: string) =>void,\n    MSG2ScrollBottom: () => void // колбек прокрутки вниз сообщений после отправки нового сообщения\n\n}\ntype valuesType = {\n    newMessage:string\n}\nconst Msg2SendMessageRender:React.FC<DialogFormikType> = ({Msg2SendMessage, MSG2ScrollBottom}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:valuesType, {resetForm}:any) => { // действия по сабмиту\n        Msg2SendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n        MSG2ScrollBottom()\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n                {({\n                      handleReset,// обнуление полей\n                    values,\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form>\n                        <div className='d-flex d-inline-block justify-content-center align-items-center'>\n                            <div  className='col-9'>\n                                <MyTextInput // сообщение в MyPostsBS\n                                    label=\"\"\n                                    autoFocus={false}\n                                    name='newMessage'\n                                    type='text'\n                                    placeholder='Введите ваше сообщение'\n                                    leftLabelLength={\"\"}\n                                   // autoFocus={true}\n                                />\n                            </div>\n                            <div>\n                                <Button variant={\"light\"} className={\"mx-2\"}\n                                        type=\"submit\" //кнопка отправить форму\n                                        disabled={!values.newMessage} //скрыть кнопку отправки если нет текста на отправку\n                                >\n\n                                    <Image src={sendSwg} className={classes.sendSwg} alt={'Отправить сообщение'}\n                                           title={'Отправить сообщение'}/>\n                                </Button>\n                            </div>\n                        </div>\n                        {/*   <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default React.memo(Msg2SendMessageRender)\n\n","import React from \"react\";\r\nimport {getDialog2AllType, newMessagesItem} from \"../../api/apiTypes\";\r\nimport classes from \"./messages2Render.module.scss\"\r\nimport userPhoto from \"../../../assets/images/no-image3.png\";\r\n\r\ntype Msg2HeaderNamePhotoType = {\r\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\r\n    userId: number, // id пользователя из URL\r\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\r\n\r\n}\r\nconst Msg2HeaderNamePhoto:React.FC<Msg2HeaderNamePhotoType> = ({Dialog2All, userId, D2Item}) => {\r\n    const photoSrc = D2Item&&D2Item.photos&& D2Item.photos.small? D2Item.photos.small : userPhoto // фото с сервера или заглушка\r\n    return <div>\r\n        {D2Item && <div>\r\n            <div className={classes.Msg2HeaderName}>{D2Item && D2Item.userName}</div>\r\n            <div className={classes.Msg2Headerid}>{D2Item && D2Item.id}</div>\r\n            <img className={classes.Msg2HeaderPhoto} src={photoSrc} alt=\"photoSrc\"/>\r\n            <div className={classes.Msg2HeaderActivityDate} >Был(а): {\" \"}\r\n                {D2Item && D2Item.lastUserActivityDate && D2Item.lastUserActivityDate.slice(0, 10)}\r\n            </div>\r\n        </div>}\r\n   </div>\r\n}\r\nexport default React.memo(Msg2HeaderNamePhoto) // сокращаем число ререндеров\r\n","import React, {useEffect} from \"react\";\nimport classes from \"./messages2Render.module.scss\"\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../../api/apiTypes\";\nimport Messages2Item from \"./Messages2Item\";\nimport Msg2SendMessageRender from \"./Msg2SendMessageRender\";\nimport Msg2HeaderNamePhoto from \"./Msg2HeaderNamePhoto\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    userId: number, // id пользователя из URL\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody: string) => void // отправить сообщение указанному пользователю\n    MSG2ScrollBottom: () => void // колбек прокрутки вниз сообщений после отправки нового сообщения\n\n}\nconst Messages2Render: React.FC<Dialog2RenderType> = (\n    {PageWidth, MobileWidth, patch, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, Dialog2All, userId,\n        D2Item, MSG2ScrollBottom}) => {\n\n    return <div>\n        {patch === \"dialog2\" && PageWidth > MobileWidth && <div\n            //- предложение выбрать диалог.Fixed все остальное поле справа.\n            // эта часть отображается только на странице dialog и только в десктопной версии\n            className={`${classes.Fixed} ${classes.messages2ChooseDialog}`}\n        > Выберите диалог\n        </div>}\n\n        {patch === \"messages\" &&\n        <div // эта часть компоненты Messages2Render отрисовывается на странице messages всегда.\n        >\n            <div\n                //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2NameAndProfileLink} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2HeaderNamePhoto Dialog2All={Dialog2All} userId={userId} D2Item={D2Item}/>\n\n            </div>\n            <div //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2RenderMessages} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                {MessagesNewerThen.map( m2 => { // отрисовка всех сообщений\n                    const {\n                        id, body, addedAt, senderId, senderName, recipientId, recipientName, viewed,\n                        //  deletedBySender, deletedByRecipient, isSpam\n                    } = m2\n                    return <Messages2Item key={id} id={id} body={body} Msg2DeleteMessage={Msg2DeleteMessage}\n                                          addedAt={addedAt} senderId={senderId}\n                                          senderName={senderName} recipientId={recipientId}\n                                          recipientName={recipientName} viewed={viewed}\n                    />\n                } )}\n                <br/>\n                <div className=\"second-block\"></div> {/* метка прокуртки сообщений при каждом обновлении списка сообщений*/}\n            </div>\n            <div//fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2PrintMessage} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                <Msg2SendMessageRender Msg2SendMessage={Msg2SendMessage} MSG2ScrollBottom={MSG2ScrollBottom}/>\n            </div>\n        </div>\n        }\n\n    </div>\n\n}\nexport default Messages2Render\n","import React from \"react\";\nimport classesCommon from \"./dialog2Messages2COM.module.scss\";\nimport Dialog2Render from \"./Dialog2/Dialog2Render\";\nimport Messages2Render from \"./Messages2/Messages2Render\";\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../api/apiTypes\";\n\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    userId: number, // id пользователя из URL\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    D2Item: newMessagesItem, // отфильтрованый  из Dialog2All выбранный пользователь по userId\n    Msg2DeleteMessage: (message2Id: string) => void // удаление сообщения по его id\n    Msg2SendMessage: (messageBody:string) => void // отправить сообщение указанному пользователю\n    MSG2ScrollBottom: () => void // колбек прокрутки вниз сообщений после отправки нового сообщения\n}\n\nconst Dialog2Messages2COM: React.FC<Dialog2RenderType> = (\n    {patch, PageWidth, MobileWidth, Dialog2All, MessagesNewerThen, Msg2DeleteMessage, Msg2SendMessage, userId,\n        D2Item, MSG2ScrollBottom}\n    ) => {\n    return <div className={classesCommon.dialog2Messages2Common}>\n        {/*Отрисовка поля диалогов*/}\n        <Dialog2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch} Dialog2All={Dialog2All}/>\n\n        <Messages2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch}\n                         MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n                         Msg2SendMessage={Msg2SendMessage} Dialog2All={Dialog2All} userId={userId} D2Item={D2Item}\n                         MSG2ScrollBottom={MSG2ScrollBottom}\n        />\n    </div>\n}\nexport default Dialog2Messages2COM\n","import React, {useCallback, useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {\n    deleteDialog2MessageIdThCr,\n    getDialog2MessageIdViewedThCr, getDialog2MessagesNewerThenThCr,\n    getDialog2AllThCr, postDialog2MessageIdToSpamThCr,\n    postDialog2MessageThCr, putDialog2MessageIdRestoreThCr,\n    putDialog2StartThCr, getDailog2UnreadMessagesThCr, Dialog2Actions\n} from \"../../redux/dialog2-reducer\";\nimport Dialog2Messages2COM from \"./Dialog2Messages2COM\";\nimport {getDialog2AllType, newMessagesItem, sendMessageType} from \"../api/apiTypes\";\nimport {compose} from \"redux\";\nimport withRouter2 from \"../hoc/withRouter2\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\n\ntype DialogContainerType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    userId: number, // id пользователя из URL (withRouter2)\n    MessagesNewerThen: Array<sendMessageType> // сообщения выбранного диалога, новее заданной даты\n    d2UserId: number // ID пользователя, записанный в стейт из URL\n    D2Item: newMessagesItem // отфильтрованый  из Dialog2All выбранный пользователь по userId\n\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,// получить список всех диалогов\n    setD2UserId: (d2UserId:number) => void, // задать userId из URL в стейт\n    setD2Item: (d2UserId:number) => void, // задать и отфильтровать из Dialog2All выбранного пользователя по userId\n\n    putDialog2StartThCr: (currentDialogId: number) => void,\n    postDialog2MessageThCr: (userId: number, body: string, date: string) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string) => void,\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n\n}\nconst Dialog2Messages2Container: React.FC<DialogContainerType> = (\n    {\n        putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n        getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n        putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n        patch, PageWidth, MobileWidth, Dialog2All, userId, MessagesNewerThen, setD2UserId, d2UserId, setD2Item, D2Item\n    }\n) => {\n    //cde7821a-6981-4f49-8b12-faf681cb1621 от \"555\"\n    // 84ac68ee-73d0-43c4-82bb-0fd0273d4808 (привет андрей)\n    // 25528  | 27045 | 1079\n\n    const Msg2DeleteMessage = useCallback((message2Id: string) => {\n        deleteDialog2MessageIdThCr(message2Id, d2UserId, \"2022-04-30T19:10:31.843\") // - удалить сообщение (только у себя) по ID сообщения\n    },[d2UserId])\n    const Msg2SendMessage = (messageBody: string) => {\n        postDialog2MessageThCr( d2UserId, messageBody, \"2022-04-30T19:10:31.843\" )// отправить сообщение указав ID пользователя\n    }\n\n    useEffect(()=>{\n        if (userId!==0) {\n            console.log(\"записать из URL в стейт userId\")\n            setD2UserId(userId) // записать из URL в стейт userId\n        }\n    },[userId])\n\n    useEffect(()=>{\n        if (d2UserId!==0 && (D2Item.id!==d2UserId)) {\n            console.log(\"Отфильтровать setD2Item при смене d2UserId\")\n            setD2Item(d2UserId) // отфильтровать из стейта Dialog2All по d2UserId чтобы получить D2Item\n        }\n    },[d2UserId, setD2Item])\n\n    useEffect(()=>{\n        if (!D2Item ) {\n            console.log(\"Отфильтровать setD2Item если !D2Item\")\n            setD2Item(d2UserId) // отфильтровать из стейта Dialog2All по d2UserId чтобы получить D2Item\n        }\n    },[D2Item, d2UserId,Dialog2All, setD2Item])\n\n    useEffect( () => {\n        if (patch === \"dialog2\") {\n            console.log(\"useEffect получить список всех диалогов при загрузке страницы dialog\")\n            getDialog2AllThCr( d2UserId, 1, 10 )\n        }\n    }, [patch] )\n\n    useEffect(()=>{\n        if (patch===\"messages\") {\n            console.log(\"useEffect получить сообщения при смене d2UserId\")\n            getDialog2MessagesNewerThenThCr( d2UserId, \"2022-04-30T19:10:31.843\" )\n        }\n    },[d2UserId, patch])\n\n    useEffect(()=>{\n        if (patch===\"messages\") {\n            console.log(\"useEffect начать диалог при прямой ссылке и первой загрузке\")\n            putDialog2StartThCr(userId)\n        }\n    },[])\n\n    const secondBlock = document.querySelector( '.second-block' ) // ссылка на прокрутку вниз\n\n/*    useEffect( () => {\n        secondBlock && secondBlock.scrollIntoView( true )\n    }, [MessagesNewerThen] ) // при обновлении списка сообщений - прокрутка вниз.*/\n\n    const MSG2ScrollBottom = () => {\n        secondBlock && secondBlock.scrollIntoView( true )\n    }\n    //Сама метка className=\"second-block\" находится в дочерней Messages2Render\n\n    //  getDialog2MessageIdViewedThCr(\"84ac68ee-73d0-43c4-82bb-0fd0273d4808\") // проверить прочитано ли сообщение по его ID\n    // postDialog2MessageIdToSpamThCr(\"cde7821a-6981-4f49-8b12-faf681cb1621\") // пометить как спам сообщение по его ID\n    // putDialog2MessageIdRestoreThCr(\"826de61e-76e6-4fe4-b9c9-5bee8fc16d12\") // - восстановить сообщение из спама и удаленных\n    // getDailog2UnreadMessagesThCr() // - вернуть количество непрочтенных сообщений\n    // putDialog2StartThCr(userId)\n    return <div>\n        <Dialog2Messages2COM\n            patch={patch} PageWidth={PageWidth} MobileWidth={MobileWidth} Dialog2All={Dialog2All}\n            MessagesNewerThen={MessagesNewerThen} Msg2DeleteMessage={Msg2DeleteMessage}\n            Msg2SendMessage={Msg2SendMessage} userId={userId} D2Item={D2Item} MSG2ScrollBottom={MSG2ScrollBottom}\n        />\n\n    </div>\n}\nconst mapStateToProps = (state: GlobalStateType) => {\n    return {\n        patch: state.app.patch,\n        PageWidth: state.app.PageWidth,\n        MobileWidth: state.app.MobileWidth,\n        Dialog2All: state.dialog2.Dialog2All,\n        MessagesNewerThen: state.dialog2.MessagesNewerThen,\n        d2UserId: state.dialog2.d2UserId,\n        D2Item: state.dialog2.D2Item\n    }\n}\ntype mapStateToPropsType = {\n    patch: string,\n    PageWidth: number,\n    MobileWidth: number,\n    Dialog2All: getDialog2AllType,\n    MessagesNewerThen: Array<sendMessageType>,\n    d2UserId: number,\n    D2Item: newMessagesItem\n\n}\ntype mapDispatchToPropsType = {\n    putDialog2StartThCr: (currentDialogId: number) => void,\n    getDialog2AllThCr: (userId: number, page: number, count: number) => void,\n    postDialog2MessageThCr: (userId: number, body: string, date: string) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string) => void,\n    deleteDialog2MessageIdThCr: (messageId: string, userId: number, date: string) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date: string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n    setD2UserId: (d2UserId:number) => void,\n    setD2Item: (d2UserId:number) => void,\n}\nconst {setD2UserId, setD2Item} = Dialog2Actions // получить экшены\n\nexport default compose<any>(\n    connect<mapStateToPropsType,\n        mapDispatchToPropsType,\n        unknown,\n        GlobalStateType>( mapStateToProps,\n        {\n            putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n            getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n            putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n            setD2UserId, setD2Item\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2\n)\n( Dialog2Messages2Container );\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nlet NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n"],"names":["Dialog2Item","_ref","userName","hasNewMessages","photos","lastDialogActivityDate","newMessagesCount","id","_jsx","className","classes","children","NavLink","to","_jsxs","src","small","userPhoto","alt","slice","React","Dialog2Render","PageWidth","MobileWidth","patch","Dialog2All","hasRendered","concat","map","d2","includes","push","Messages2Item","body","Msg2DeleteMessage","recipientId","addedAt","senderId","senderName","recipientName","viewed","console","log","onClick","myInitialValues","newMessage","myValidationSchema","Yup","Msg2SendMessageRender","Msg2SendMessage","MSG2ScrollBottom","_Fragment","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","Button","variant","disabled","Image","sendSwg","title","Msg2HeaderNamePhoto","userId","D2Item","photoSrc","lastUserActivityDate","MessagesNewerThen","m2","classesCommon","Messages2Render","setD2UserId","Dialog2Actions","setD2Item","compose","connect","state","app","dialog2","d2UserId","putDialog2StartThCr","getDialog2AllThCr","postDialog2MessageThCr","getDialog2MessageIdViewedThCr","postDialog2MessageIdToSpamThCr","deleteDialog2MessageIdThCr","putDialog2MessageIdRestoreThCr","getDialog2MessagesNewerThenThCr","getDailog2UnreadMessagesThCr","withRouter2","NavigateToLoginHoc2","useCallback","message2Id","useEffect","secondBlock","document","querySelector","Dialog2Messages2COM","messageBody","scrollIntoView","CommonInputTextArea","props","_objectWithoutProperties","_excluded","_useField","useField","meta","_slicedToArray","touched","error","_excluded2","_useField3","_useField4","field","InputGroup","size","style","width","_objectSpread","as","undefined","MyCheckbox","_excluded3","_useField5","_useField6","mapStateToProps","isAuth","auth","Component","Navigate","Children","aaa","params","useParams","Number"],"sourceRoot":""}