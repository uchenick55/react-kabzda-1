{"version":3,"file":"static/js/469.660bb37a.chunk.js","mappings":"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","sources":["components/Info/LoginInfoShort.jsx","webpack://my-app/./src/components/Login/Login.module.css?3530","components/-Dark_light_theme/-globalStyles.js","components/Login/LoginFormikBS.jsx","components/Login/LoginContainer.jsx"],"sourcesContent":["let LoginInfoShort = () => {\r\n    return (<div>\r\n        Данные для тестового входа:\r\n        <p>Аккаунт 1: Email: evgeniysazonov1983@gmail.com <br/>\r\n            Password: 12qwaszx</p>\r\n        <p>Аккаунт 2 : Email: evgeniysazonov1983@googlemail.com <br/>\r\n            Password: 12qwaszx</p>\r\n        <p>Аккаунт 3: Email: free@samuraijs.com <br/>\r\n            Password: free</p>\r\n        <p>В случае проблем с авторизацией, попробуйте сначала войти по указанным парам логин/пароль на <br/>\r\n            <a href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a>\r\n        </p>\r\n    </div>)\r\n}\r\n\r\nexport default LoginInfoShort\r\n","// extracted by mini-css-extract-plugin\nexport default {\"LoginForm\":\"Login_LoginForm__s2klG\",\"legendStyle\":\"Login_legendStyle__SOIpE\",\"fieldSetStyle\":\"Login_fieldSetStyle__1oKJz\",\"errorText\":\"Login_errorText__kahI9\"};","import { createGlobalStyle } from \"styled-components\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n/*\r\n body {\r\n  font-family: sans-serif;\r\n  font-size: 5;\r\n  background:${({ theme }) => theme.body};\r\n  color: ${({ theme }) => theme.text};\r\n  transition: all 0.5s linear;\r\n  padding: 0px;\r\n}\r\na {\r\n    color: ${({ theme }) => theme.a_color};\r\n}\r\na:visited {\r\n    color: ${({ theme }) => theme.a_visited};\r\n}\r\n*/\r\n\r\n\r\n\r\n`;\r\nexport const PointerCursor = styled.span`\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./Login.module.css\"\nimport {MyTextInput, MyCheckbox} from \"../common/formikCommon/MyFieldsBS\"\nimport {PointerCursor} from \"../-Dark_light_theme/-globalStyles\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n//import DisplayFormikState from \"../common/formikCommon/DisplayFormikState\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Col from \"react-bootstrap/Col\";\nimport LoginInfoShort from \"../Info/LoginInfoShort\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport commonClasses from \"../common/CommonClasses/common.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    email: \"\",\n    password: \"\",\n    captcha: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    password: Yup.string()\n        .required('Required'),\n})\n\nconst LoginFormik = ({postLogin, captchaURL, updateCaptcha, loginError}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\n        postLogin(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    const loginForm = <Formik\n        initialValues={myInitialValues}\n        validationSchema={myValidationSchema}\n        onSubmit={myOnSubmit}\n    >\n\n        {({\n              handleReset,// обнуление полей\n          }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n            <Form> {/*className={classes.LoginForm}*/}\n                <Col> {/*lg={6} md={12}*/}\n\n                    <MyTextInput // email\n                        label=\"Email Address\"\n                        name='email'\n                        type='email'\n                        placeholder='email'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyTextInput // password\n                        label=\"Password\"\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder='password'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyCheckbox name='rememberme'>  {/*чекбокс */}\n                        запомнить меня\n                    </MyCheckbox>\n\n                    {captchaURL && <div>\n                        <PointerCursor>\n                            <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"></img>\n                        </PointerCursor>\n                        {/*<label htmlFor=\"captcha\">Captcha</label> {/*альтернатива написания input с обработкой ошибок*/}\n\n                        <MyTextInput // email\n                            label=\"\"\n                            name='captcha'\n                            type='text'\n                            placeholder='captcha'\n                        />\n                    </div>\n\n                    }\n                    <ButtonGroup aria-label=\"Basic example\">\n                        <Button variant=\"warning\" type='button' onClick={handleReset}>Reset</Button>\n                        <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                            Submit\n                        </Button>\n                    </ButtonGroup>\n\n                    {/*кнопка сброса к значениям по умолчанию*/}\n                    <div className={classes.errorText}>{loginError && loginError}</div>\n                    <div/>\n\n                    {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                </Col>\n            </Form>\n        )}\n    </Formik>\n    return (\n        <>\n            <Container className=\"d-inline-block\">\n                <h2 className={commonClasses.pageHeader}>Login</h2>\n\n                <Row >\n                    <Col>{loginForm}</Col>\n                    <Col><LoginInfoShort/></Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default LoginFormik\n\n","import React from \"react\";\r\nimport Login from \"./LoginFormikBS\";\r\nimport {connect} from \"react-redux\";\r\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    postLogin = ({email, password, rememberme, captcha}) => { // email, password, rememberme берем из формы login\r\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\r\n        this.props.postLoginThunkCreator(email, password, rememberme, captcha);\r\n    }\r\n\r\n    updateCaptcha = () => {\r\n        this.props.getCaptchaThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isAuth) { // условие что я авторизован\r\n            this.props.getFriendsThunkCreator( // получить список друзей\r\n                this.props.friendsCurrentPage,\r\n                this.props.friendsPageSize,\r\n                this.props.friendsTerm,\r\n                this.props.friend);\r\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Login postLogin={this.postLogin}\r\n                       captchaURL={this.props.captchaURL}\r\n                       updateCaptcha={this.updateCaptcha}\r\n                       dispatch = {this.props.dispatch}\r\n                       loginError = {this.props.loginError}\r\n                /> {/*Возврат целевой компоненты*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\r\n        friendsPageSize: state.sideBar.friendsPageSize,\r\n        friendsTerm: state.sideBar.friendsTerm,\r\n        friend: state.sideBar.friend,\r\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\r\n        loginError: state.auth.loginError // ошибка авторизации\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        postLoginThunkCreator: (email, password, rememberme, captchaURL) => { // отправить сообщение\r\n            dispatch(postLoginThunkCreator(email, password, rememberme, captchaURL))\r\n        },\r\n        getFriendsThunkCreator: (currentPage, pageSize, term, friend) => { // отправить сообщение\r\n            dispatch(getFriendsThunkCreator(currentPage, pageSize, term, friend))\r\n        },\r\n        getCaptchaThunkCreator: () => { // отправить сообщение\r\n            dispatch(getCaptchaThunkCreator())\r\n        },\r\n        dispatch: dispatch\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\r\n"],"names":["href","PointerCursor","createGlobalStyle","theme","body","text","a_color","a_visited","styled","myInitialValues","email","password","captcha","myValidationSchema","Yup","required","postLogin","captchaURL","updateCaptcha","loginError","loginForm","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","Col","label","name","type","placeholder","leftLabelLength","src","onClick","alt","ButtonGroup","Button","variant","className","classes","Container","commonClasses","Row","LoginInfoShort","LoginContainer","rememberme","props","postLoginThunkCreator","getCaptchaThunkCreator","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","to","dispatch","React","connect","state","auth","sideBar","currentPage","pageSize","term"],"sourceRoot":""}