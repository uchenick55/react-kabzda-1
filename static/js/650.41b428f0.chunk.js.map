{"version":3,"file":"static/js/650.41b428f0.chunk.js","mappings":"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","sources":["components/Info/LoginInfoShort.tsx","webpack://my-app/./src/components/Login/Login.module.css?3530","../node_modules/react-bootstrap/esm/ButtonGroup.js","components/Login/LoginFormikBS.tsx","components/Login/LoginContainer.tsx","webpack://my-app/./src/components/common/formikCommon/formik1.module.css?c850","components/common/formikCommon/MyFieldsBS.jsx","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React from \"react\";\n\ntype LoginInfoShortType = {}\nconst LoginInfoShort:React.FC<LoginInfoShortType> = () => {\n    return (<div>\n        Страницы Profile и Dialogs доступны только после авторизации.\n        <p>Данные для тестового входа:</p>\n        <p>Аккаунт 1: Email: evgeniysazonov1983@gmail.com <br/>\n            Password: 12qwaszx</p>\n        <p>Аккаунт 2 : Email: evgeniysazonov1983@googlemail.com <br/>\n            Password: 12qwaszx</p>\n        <p>Аккаунт 3: Email: free@samuraijs.com <br/>\n            Password: free</p>\n        <p>В случае проблем с авторизацией, попробуйте сначала войти по указанным парам логин/пароль на <br/>\n            <a href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a>\n        </p>\n    </div>)\n}\n\nexport default LoginInfoShort\n","// extracted by mini-css-extract-plugin\nexport default {\"LoginForm\":\"Login_LoginForm__tY6-C\",\"legendStyle\":\"Login_legendStyle__-tuTd\",\"fieldSetStyle\":\"Login_fieldSetStyle__LTe39\",\"errorText\":\"Login_errorText__E5Dby\"};","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./Login.module.css\"\nimport {MyTextInput, MyCheckbox} from \"../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n//import DisplayFormikState from \"../common/formikCommon/DisplayFormikState\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Col from \"react-bootstrap/Col\";\nimport LoginInfoShort from \"../Info/LoginInfoShort\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport commonClasses from \"../common/CommonClasses/common.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    email: \"\",\n    password: \"\",\n    captcha: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    password: Yup.string()\n        .required('Required'),\n})\n\ntype LoginFormikType = {\n    captchaURL: string, // URL каптчи после 5 неправильных вводов\n    loginError: string // ошибка авторизации\n    postLogin: (values: { email:string, password:string, rememberme?:boolean, captcha?:string }) => void,\n    updateCaptcha: () => void,\n}\ntype ValuesType = {\n    email: string,\n    password: string,\n    rememberme?: boolean\n    captcha?: string\n}\nconst LoginFormik:React.FC<LoginFormikType> = ({postLogin, captchaURL, updateCaptcha, loginError}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:ValuesType, {resetForm}:any) => { // действия по сабмиту\n        postLogin(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    const loginForm = <Formik\n        initialValues={myInitialValues}\n        validationSchema={myValidationSchema}\n        onSubmit={myOnSubmit}\n    >\n\n        {({\n              handleReset,// обнуление полей\n          }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n            <Form> {/*className={classes.LoginForm}*/}\n                <Col> {/*lg={6} md={12}*/}\n\n                    <MyTextInput // email\n                        label=\"Email Address\"\n                        autoFocus={false}\n                        name='email'\n                        type='email'\n                        placeholder='email'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyTextInput // password\n                        label=\"Password\"\n                        autoFocus={false}\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder='password'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyCheckbox name='rememberme'>  {/*чекбокс */}\n                        запомнить меня\n                    </MyCheckbox>\n\n                    {captchaURL && <div>\n                        <div>\n                            <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"/>\n                        </div>\n                        {/*<label htmlFor=\"captcha\">Captcha</label> {/*альтернатива написания input с обработкой ошибок*/}\n\n                        <MyTextInput // email\n                            label=\"Captcha\"\n                            autoFocus={false}\n                            name='captcha'\n                            type='text'\n                            placeholder='captcha'\n                            leftLabelLength='7rem'\n                        />\n                    </div>\n\n                    }\n                    <ButtonGroup aria-label=\"Basic example\">\n                        <Button variant=\"warning\" type='button' onClick={handleReset}>Reset</Button>\n                        <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                            Submit\n                        </Button>\n                    </ButtonGroup>\n\n                    {/*кнопка сброса к значениям по умолчанию*/}\n                    <div className={classes.errorText}>{loginError && loginError}</div>\n\n                    {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                </Col>\n            </Form>\n        )}\n    </Formik>\n    return (\n        <>\n            <Container className=\"d-inline-block\">\n                <h2 className={commonClasses.pageHeader}>Login</h2>\n\n                <Row >\n                    <Col>{loginForm}</Col>\n                    <Col><LoginInfoShort/></Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default LoginFormik\n\n","import React from \"react\";\nimport Login from \"./LoginFormikBS\";\nimport {connect} from \"react-redux\";\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\nimport {Navigate} from \"react-router-dom\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\n\ntype LoginContainerPropsType = {\n    isAuth: boolean\n    captchaURL: string, // URL каптчи после 5 неправильных вводов\n    loginError: string // ошибка авторизации\n    postLoginThunkCreator:(email:string, password:string, rememberme?:boolean, captcha?:string)=>void,\n    getCaptchaThunkCreator: () => void\n}\nclass LoginContainer extends React.Component<LoginContainerPropsType> {\n\n    postLogin = (values: { email:string, password:string, rememberme?:boolean, captcha?:string }) => { // email, password, rememberme берем из формы login\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\n        this.props.postLoginThunkCreator( values.email, values.password, values.rememberme, values.captcha );\n    }\n\n    updateCaptcha = () => {\n        this.props.getCaptchaThunkCreator()\n    }\n\n    render() {\n        if (this.props.isAuth) { // условие что я авторизован\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\n        }\n\n        return (\n            <div>\n                <Login postLogin={this.postLogin}\n                       captchaURL={this.props.captchaURL}\n                       updateCaptcha={this.updateCaptcha}\n                       loginError={this.props.loginError}\n                /> {/*Возврат целевой компоненты*/}\n            </div>\n        )\n    }\n}\ntype mapStateToPropsType = {\n    isAuth: boolean\n    captchaURL: string, // URL каптчи после 5 неправильных вводов\n    loginError: string // ошибка авторизации\n}\n\nlet mapStateToProps = (state:GlobalStateType) => { // флаги isAuth - \"я авторизован?\"\n    return {\n        isAuth: state.auth.isAuth,\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\n        loginError: state.auth.loginError // ошибка авторизации\n    }\n}\ntype mapDispatchToPropsType = {\n    postLoginThunkCreator:(email:string, password:string, rememberme?:boolean, captcha?:string)=>void,\n    getCaptchaThunkCreator: () => void\n\n}\n\nexport default connect<\n    mapStateToPropsType, mapDispatchToPropsType, unknown, GlobalStateType\n    >( mapStateToProps, {postLoginThunkCreator, getCaptchaThunkCreator } )( LoginContainer )\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInputTextArea\":\"formik1_errorInputTextArea__vpmAv\",\"errorText\":\"formik1_errorText__eDWui\",\"labelWidth\":\"formik1_labelWidth__cwal9\"};","import {useField} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport classes from \"./formik1.module.css\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport const CommonInputTextArea = ({label, children, ...props}) => {\r\n    const [meta] = useField(props.props)  // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <>\r\n            {/*<label\r\n                htmlFor={props.props.id || props.props.name}>{label}</label> лейб либо с props.id (которого пока нет), либо с props.name*/}\r\n            {children} {/*input или textarea*/}\r\n            {meta.touched && meta.error && // если поле тронутот и вышла ошибка поля\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*красным цветом текст*/}\r\n        </>\r\n    )\r\n}\r\nexport const MyTextInput = ({label, autoFocus, type, leftLabelLength, ...props}) => {  // вынесенная общая часть для тесктового поля\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n\r\n    return (\r\n        <CommonInputTextArea label={label} props={props}> {/*композиция выод общей части InputTextArea*/}\r\n\r\n            <InputGroup className=\"my-1\" size=\"sm\"> {/*Инпут, отступ 1 уе по вертикали, маленький*/}\r\n                {leftLabelLength && // если параметр leftLabelLength не пустой, то рисуем лейбл сдева от input с label\r\n                <InputGroup.Text id={label} className={classes.labelWidth} style={{width: leftLabelLength}}\r\n                >{label}:</InputGroup.Text>}\r\n                <Form.Control  as={type===\"textarea\"?type:\"input\"} type={type===\"password\"?type:undefined}\r\n                               className={meta.touched && meta.error ? classes.errorInputTextArea : classes.inputTextArea}\r\n                    {...field}\r\n                    {...props}\r\n                    autoFocus={autoFocus}\r\n                />\r\n            </InputGroup>\r\n            <div className={classes.errorText}>{meta.touched && meta.error}</div>\r\n        </CommonInputTextArea>\r\n    )\r\n}\r\n\r\nexport const MyCheckbox = ({children, ...props}) => {\r\n    const [field, meta] = useField({...props, type: 'checkbox'}) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label className='checkbox-input'>\r\n                <input type='checkbox' {...field} {...props}/> {/*чекбокс */}\r\n                {children}{/* текст I accept the terms and conditions*/}\r\n            </label>\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MySelect = ({label, ...props}) => {\r\n    const [field, meta] = useField(props) // данные onBlur и meta для обработки ошибок\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id || props.name}>{label}</label> {/*заголовок select*/}\r\n            <select {...field} {...props}/>{/* вывод select с option*/}\r\n            {meta.touched && meta.error && // поле тронуто и есть ошибка\r\n            <div className={classes.errorText}>{meta.error}</div>} {/*вывод текста ошибки*/}\r\n        </div>\r\n    )\r\n}\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["_jsxs","children","_jsx","href","ButtonGroup","React","_ref","ref","bsPrefix","size","vertical","className","_ref$as","as","Component","rest","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","baseClass","concat","_objectSpread","classNames","displayName","defaultProps","role","myInitialValues","email","password","captcha","myValidationSchema","Yup","required","postLogin","captchaURL","updateCaptcha","loginError","loginForm","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","Col","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","MyCheckbox","src","onClick","alt","Button","variant","classes","_Fragment","Container","commonClasses","Row","LoginInfoShort","LoginContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","props","postLoginThunkCreator","rememberme","getCaptchaThunkCreator","_createClass","key","value","this","isAuth","Navigate","to","Login","connect","state","auth","CommonInputTextArea","_useField","useField","meta","_slicedToArray","touched","error","_excluded2","_useField3","_useField4","field","InputGroup","id","style","width","undefined","_excluded3","_useField5","_useField6","decoratedBsPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","forEach","brkPoint","cols","propValue","infix","push"],"sourceRoot":""}