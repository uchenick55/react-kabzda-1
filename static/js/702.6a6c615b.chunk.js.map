{"version":3,"file":"static/js/702.6a6c615b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusUseReducer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/EditProfile/EditProfile.module.css?6ed4","components/Profile/ProfileInfo/EditProfile/EditProfileFormikBS.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ShowProfile.tsx","components/Profile/ProfileInfo/ProfileInfoBS.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://my-app/./src/components/Profile/MyPosts/Post/MyPostsFormik/MyPosts.module.css?8e75","components/Profile/MyPosts/Post/MyPostsFormik/MyPostsFormikBS.tsx","components/Profile/MyPosts/MyPostsBS.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainerFC.tsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx","../node_modules/react-bootstrap/esm/createUtilityClasses.js","../node_modules/react-bootstrap/esm/Stack.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__G-3+o\",\"posts\":\"Profile_posts__ne6BS\",\"toCenter\":\"Profile_toCenter__wCKFF\",\"FileUploadInt\":\"Profile_FileUploadInt__di9LB\",\"posRelative\":\"Profile_posRelative__iO7VR\",\"editProfileStatus\":\"Profile_editProfileStatus__274H9\",\"profilePhotoIMG\":\"Profile_profilePhotoIMG__w2wQ+\"};","import React, {ChangeEvent, memo, useReducer} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\n\n\ntype ProfileStatusUseReducerType = {\n    myId:number, // мой id для модификации статуса\n    userId: number, // id отображаемого пользователя\n    status:string, // статус из BLL\n    putStatusThunkCreator: (statusTmpInput:string)=>void, // санкреатор для обновления сатуса\n}\nconst ProfileStatusUseReducer:React.FC<ProfileStatusUseReducerType> = memo( ({status, userId, myId, putStatusThunkCreator}) => {\n    const initialState = {\n        modifyStatus2: false,// локальная переменная-флаг модификации статуса\n        statusTmpInput2: \"\" // локальный статус до отправки на сервер (поле input)\n    }\n    type initialStateType = typeof initialState\n\n    const SET_MODIFY_STATUS_TRUE = \"SET_MODIFY_STATUS_TRUE\"; // константа (modify true)\n    const SET_MODIFY_STATUS_FALSE = \"SET_MODIFY_STATUS_FALSE\";// константа (modify false)\n    const SET_STATUS_TMP_INPUT = \"SET_STATUS_TMP_INPUT\";// константа (временный статус input)\n\n    type setModifyStatusTrue = {type:typeof SET_MODIFY_STATUS_TRUE}\n    type setModifyStatusFalse = {type:typeof SET_MODIFY_STATUS_FALSE}\n    type setStatusTmpInput = {type:typeof SET_STATUS_TMP_INPUT, text: string}\n\n    type ActionTypes = setModifyStatusTrue | setModifyStatusFalse | setStatusTmpInput\n\n    const localReducer = (localState:initialStateType, action:ActionTypes):initialStateType => {\n        let stateCopy; // копия стейта для дебага\n        switch (action.type) {\n            case SET_MODIFY_STATUS_TRUE: // если мы открываем поле input (модификацию стьатуса)\n                stateCopy = {\n                    ...localState,\n                    modifyStatus2: true, // флаг модификации в true\n                    statusTmpInput2: status// локальный статус для input берем из стейта\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            case SET_MODIFY_STATUS_FALSE: // если мы закрываем модификацию стьатуса\n                stateCopy = {\n                    ...localState,\n                    modifyStatus2: false // флаг модификации в false\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            case 'SET_STATUS_TMP_INPUT':\n                stateCopy = {\n                    ...localState,\n                    statusTmpInput2: action.text // задаем локальный статус из value input\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            default:\n                throw new Error(); // заглушка обработчика ошибок\n        }\n    }\n\n    const [localState, dispatch] = useReducer(localReducer, initialState)// меняем отдельные useState на useReducer\n\n    type checkIfICanModifyStatusType = () => void\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\n        if (userId === myId) { // если ID открытого пользователя равен моему\n            dispatch({type: SET_MODIFY_STATUS_TRUE})// смена текстового отображения статуса на поле input\n        }\n    }\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\n        dispatch({type: SET_MODIFY_STATUS_FALSE})// смена текстового отображения статуса на поле input\n\n        putStatusThunkCreator(localState.statusTmpInput2)// санкреатор на обновление статуса на сервере\n    }\n    const onChangeStatus = (event:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const text = event.target.value;// вынимаем значение введенное в поле ввода input\n        dispatch({type: SET_STATUS_TMP_INPUT, text: text})// присваиваем переменной временного статуса из локального стейта введенное значение в поле\n    }\n    const checkEnterPressed = (e: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (e.charCode === 13) {\n            setMyStatus()//задание статуса при нажатии Enter\n        }\n    }\n\n    type CommonInputGroupType = {\n        isDisabled: boolean,\n        onClickMethod: checkIfICanModifyStatusType,\n        value:string\n    }\n    const CommonInputGroup:React.FC<CommonInputGroupType>  = ({isDisabled, onClickMethod, value}) => {\n        if (!value) {\n            value=\"\";\n        }\n        // общий метод (компонента) редактирования и отображения статуса\n        return <InputGroup className=\"my-3\" onClick={onClickMethod}> {/*отступ и метод по клику*/}\n            <InputGroup.Text id=\"basic-addon1\">Статус:</InputGroup.Text> {/* текст слева от поля*/}\n            <Form.Control\n                title={value}\n                onClick={onClickMethod}\n                value={value} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\n                onChange={(e)=>onChangeStatus(e)} // задание временного локального статуса\n                onBlur={setMyStatus}// задание стейта при потере фокуса input\n                autoFocus // фокусировка на поле ввода текста\n                placeholder={\"задайте статус\"}// текст при пустом поле ввода\n                onKeyPress={(e)=>checkEnterPressed(e)} // проверка нажатия Enter\n                disabled={isDisabled}\n            />\n        </InputGroup>\n    }\n    return (<div>\n        {!localState.modifyStatus2 // отображение или модификация статуса\n            ? <CommonInputGroup isDisabled={true} onClickMethod={checkIfICanModifyStatus} value={status}/>\n            : <CommonInputGroup isDisabled={false} onClickMethod={setMyStatus} value={localState.statusTmpInput2}/>\n        }\n    </div>)\n})\nexport default ProfileStatusUseReducer\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"HeaderEditProfileForm\":\"EditProfile_HeaderEditProfileForm__+ggeL\",\"EditProfile\":\"EditProfile_EditProfile__KCw4z\",\"EditProfileContactsFields\":\"EditProfile_EditProfileContactsFields__9QV1r\",\"errorText\":\"EditProfile_errorText__piK3h\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from './EditProfile.module.css'\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\nimport {MyCheckbox, MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport {ProfileType} from \"../../../common/types/commonTypes\";\nimport {getProfileType} from \"../../../api/apiTypes\";\n\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype EditProfileFormikType = {\n    putProfile: (putProfile2: ProfileType) =>void,\n    setEditMode: (editMode: boolean)=> void\n    profile: getProfileType,\n    editProfileStatus:Array<string>,\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\n\n}\nconst EditProfileFormik:React.FC<EditProfileFormikType> = (\n    {putProfile, setEditMode, profile, editProfileStatus, setEditProfileStatus}\n    ) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n\n    const myInitialValues = { // начальные зачения форм\n        FullName: profile.fullName,\n        AboutMe: profile.aboutMe,\n        LookingForAJob: profile.lookingForAJob,\n        LookingForAJobDescription: profile.lookingForAJobDescription,\n        contacts: profile.contacts, // остальные данные с контактов профиля\n    }\n\n    const myOnSubmit = (values:ProfileType, {resetForm}:any) => { // действия по сабмиту\n        putProfile(values) // колбек, который принимает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n\n    }\n\n    return (\n        React.createElement(Formik, {\n            initialValues: myInitialValues, // начальные значения форм\n            validationSchema: myValidationSchema, // схема валидации\n            // @ts-ignore\n            onSubmit: myOnSubmit // действия по сабмиту\n        }, ({\n                // @ts-ignore\n                handleReset,// обнуление полей\n            }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n        React.createElement(Form, {className: classes.MyPosts},\n\n            React.createElement('div', {},\n                React.createElement('div', //Редактирование профиля\n                        {className: classes.HeaderEditProfileForm},\n                        'Редактирование профиля'\n                    ),\n                React.createElement(MyTextInput, //Полное имя:\n                        {\n                            label: \"Имя\",\n                            autoFocus: false,\n                            name: 'FullName',\n                            type: 'text',\n                            placeholder: 'Имя',\n                            leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\n                        }\n                    ),\n\n                React.createElement(MyTextInput,//Обо мне\n                        {label: \"Обо мне\", autoFocus: false, name: 'AboutMe', type: 'text', placeholder: 'Обо мне', leftLabelLength: \"5rem\"}, // слева в input появляется label указанной длины\n                    ),\n\n                // @ts-ignore\n                React.createElement(MyCheckbox, {name: 'LookingForAJob'}, //чекбокс ищу работу\n                        \"в поисках работы\"\n                    ),\n\n                React.createElement(MyTextInput, { //Описание поиска работы\n                            label: \"Описание\", autoFocus: false, name: 'LookingForAJobDescription',\n                            type: 'textarea', placeholder: 'Описание', leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\n                        }\n                    ),\n\n                React.createElement('h4', {},// вывод всех полей подобъекта контакты\n                        \"Контакты:\"\n                    ),\n\n                React.createElement('div', {className: classes.EditProfileContactsFields},\n                    Object.keys(profile.contacts).map((c) => { // вывод списка контактов, мапим\n                            return React.createElement('div', {key: c},\n                                React.createElement(\n                                    MyTextInput,\n                                    {\n                                        label: c,\n                                        autoFocus: false,\n                                        name: 'contacts[' + c + ']',\n                                        type: 'text',\n                                        placeholder: c,\n                                        leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\n                                    },\n                                ),\n                                React.createElement('div', {}, //ошибки редактирования профиля с сервера\n                                    editProfileStatus.map(err => {// прогоняем весь массив ошибок с сервера на обновление профиля\n                                        if (err.toLowerCase().includes(c.toLowerCase())) { // если имя отрисовываемого поля \"с\" соджержится в сообщении об ошибке\n                                            return React.createElement('div', {key: err, className: classes.errorText}, err )// выводим сообщение об ошибке рядом с полем\n                                        }\n                                        return null\n                                    })\n                                ),\n                            )\n                        })\n                    ),\n                React.createElement('br'), //перенос строки\n\n                    //кнопка сброса к значениям по умолчанию\n                React.createElement(Button, {\n                        type: 'button',\n                        variant: \"warning\",\n                        onClick: () => { // при клике по кнопке сброс\n                            handleReset();// занулить поля ввода по умолчанию\n                            setEditProfileStatus([]); // сбросить сообщение об ошибке с сервера\n                        }\n                    }, 'Сброс'),\n\n                    \" \", //отступ между кнопками\n\n                    //кнопка отправить форму\n                React.createElement(Button, {type: 'submit'}, 'Применить'),\n\n                    \" \", //отступ между кнопками\n\n                    //отмена\n                React.createElement(Button, {\n                        variant: \"secondary\",\n                        onClick: () => { // при клике по кнопке отмена\n                            setEditMode(false)// переключиться с режима редактирования профиля на просмотр\n                            setEditProfileStatus([]) // сбросить сообщение об ошибке с сервера\n                        }\n                    }, 'Отмена'),\n                )\n            )\n        ))\n    )\n}\n\nexport default EditProfileFormik\n\n","import React from \"react\";\n\ntype ContactType = {\n    key1:string,\n    Value:string\n}\nconst Contact:React.FC<ContactType> = ({key1, Value}) => { /*простая функция вывода отдельного элемента contacts из profile*/\n    return <div >\n        <b>{key1}: </b > <span title={Value}>{Value}</span>\n    </div>\n}\nexport default Contact\n","import {getProfileType} from \"../../api/apiTypes\";\nimport React, {memo} from \"react\";\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Contact from \"./Contact\";\n\ntype ShowProfileType = {\n    profile: getProfileType,\n    setEditMode: (editMode: boolean )=> void,\n    userId: number,\n    myId: number\n}\n\nconst ShowProfile: React.FC<ShowProfileType> =memo( ({profile, setEditMode, userId, myId}) => {\n    // вынес отдельно отображение профиля\n\n\n    return (<div\n            className={`${commonClasses.textMaxWidthCommon} ${commonClasses.textMaxWidth18rem}`}>\n\n            <h3 title={profile.fullName}>{profile.fullName}</h3>\n            <div ><b>Обо мне</b>: <span title={profile.aboutMe}> {profile.aboutMe}</span></div>\n            <div><b>В поиске работы?</b> <span title={profile.lookingForAJob ? \"Да\" : \"Нет\"}>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</span></div>\n            <div ><b>Описание:</b> <span title={profile.lookingForAJobDescription}>{profile.lookingForAJobDescription}</span></div>\n            <div><b>userId:</b> <span title={profile.userId.toString()}>{profile.userId}</span> </div>\n\n            <ul>\n                {profile && Object.keys(profile.contacts).map((key1, ind) => { // ключи contacts\n                    const Value:string = Object.values(profile.contacts)[ind] // значения contacts\n                    return (<li key={key1}>\n                            <Contact key1={key1} Value={Value} /> {/*вывод ключ + значение*/}\n                        </li>\n                    )\n                })}\n            </ul>\n\n            {(userId === 0) && <Button onClick={() => {\n                setEditMode(true)\n            }}>Редактировать профиль </Button>}\n\n        </div>\n    )\n})\n\nexport default ShowProfile\n","import React, {memo, useEffect, useState} from 'react';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusUseReducer from \"./ProfileStatus/ProfileStatusUseReducer\"; //ProfileStatusClass | ProfileStatusUseState\nimport userPhoto1 from \"../../../assets/images/no-image3.png\";\nimport EditProfileFormikBS from \"./EditProfile/EditProfileFormikBS\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Image from 'react-bootstrap/Image'\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport {getProfileType} from \"../../api/apiTypes\";\nimport {NulableType, ProfileType} from \"../../common/types/commonTypes\";\nimport ShowProfile from \"./ShowProfile\";\nimport Form from 'react-bootstrap/Form';\nimport classes from \"../Profile.module.css\"\n\ntype ProfileInfoType2 = {\n    profile: NulableType<getProfileType>,\n    status: string,\n    myId: number,\n    userId: number,\n    putProfile: (putProfile2: ProfileType) => void,\n    putStatusThunkCreator: (statusTmpInput: string) => void,\n    uploadImage: (profilePhoto: File) => void,\n    editProfileStatus: Array<string>,\n    setEditProfileStatus: (editProfileStatus: Array<string>) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoType2> = memo( ({\n                                                           profile, myId, status, putStatusThunkCreator, uploadImage,\n                                                           userId, putProfile, editProfileStatus, setEditProfileStatus\n                                                       }) => {\n    console.log( \"ProfileInfo\" )\n    const [editMode, setEditMode] = useState<boolean>( false ) // флаг режима редактирования профиля\n\n    const editedSuccessfully: boolean = editProfileStatus.length > 0 // если сообщение об ошибке/обновлении существует\n        && editProfileStatus[0] === \"Edited successfully!\" // и успешный статус обновления с сервера\n\n    useEffect( () => {\n        if (editedSuccessfully) { // если успешно обновлен профиль на сервере\n            setEditMode( false ) // закрыть режим редактирования профиля\n            // желательно здесь сделать прокрутку до верха профиля\n            setTimeout( () => {\n                setEditProfileStatus( [] ) // убирание сообщения ответа от сервера по таймеру\n            }, 2000 )\n        }\n    }, [editProfileStatus, editedSuccessfully, setEditProfileStatus] ) // переключение режима редактирования зависит от ответа с сервера\n\n\n    if (!profile) { // если профиль еще не загружен\n        return <Preloader/> // отобразить предзагрузку\n    }\n\n    const profileStatus = <ProfileStatusUseReducer // можно еще использовать ProfileStatusUseState и ProfileStatusClass\n        myId={myId} // мой id для модификации статуса\n        userId={profile.userId} // id отображаемого пользователя\n        status={status} // статус из BLL\n        putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n    />\n\n    const showProfile =  <ShowProfile profile={profile} setEditMode={setEditMode} userId={userId} myId={myId}/>\n\n    const editProfile =  <EditProfileFormikBS\n                putProfile={putProfile} setEditMode={setEditMode} profile={profile}\n                editProfileStatus={editProfileStatus} setEditProfileStatus={setEditProfileStatus}/>\n\n    const onChangeLocal = (e: any) => {\n        uploadImage( e.target.files[0] )// загрузка файла картинки на сервер\n    }\n    const editMyPhoto = (userId === 0) &&// если мы перешли на свой профиль (в браузере нет ID возле profile)\n        <div className={classes.toCenter}>\n            <Form.Control type=\"file\" onChange={onChangeLocal} className={classes.FileUploadInt}/>\n        </div>\n\n\n    const showUserPhoto = <div className={classes.toCenter}>\n        <Image fluid={true}\n               alt={\"userPhoto\"}\n               className={`${classes.profilePhotoIMG} `}\n            // если это мой профиль (userId === 0) и мышкой навели на картинку, добавить ImgHover класс (альтернатива псевдокласса :hover)\n               src={profile.photos.large ? profile.photos.large : userPhoto1}/>\n    </div>\n\n    return <div>\n        <Container fluid=\"sm\">\n            <h2 className={commonClasses.pageHeader}>Profile</h2> {/*Заголовок*/}\n\n            <Row>\n                <Col xs={12} md={5} >\n                    {showUserPhoto} {/*показать фото пользователя*/}\n                    {editMyPhoto} {/* сменить фото, если это мой профиль*/}\n\n                </Col>\n                <Col xs={12} md={7} >\n                    {!editMode && <div className={classes.posRelative}>\n                        {showProfile} {/*показать профиль*/}\n                        {editedSuccessfully // если успешно обновлен профиль на сервере\n                        && <div className={classes.editProfileStatus}>\n                            {editProfileStatus[0]} {/* вывести сообщение успешного обновления*/}\n                        </div>\n                        }\n                    </div>}\n\n                    {editMode && editProfile} {/*редактировать профиль*/}\n\n                    {/* Если длина больше нуля, то выводим сообщение.\n                        Если сообщение sucessully, то закрываем режим редактирования, выводим успех редактирования и по сеттаймауту зануляем стейт с ошибками\n                        Если не саксесфулли, то выводим ошибки и не закрываем редактирование*/}\n                    {profileStatus} {/*отображение моего статуса*/}\n                </Col>\n            </Row>\n        </Container>\n    </div>\n} )\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__v8PmM\",\"postsBlock\":\"MyPosts_postsBlock__Vokae\",\"newPostFormTextArea\":\"MyPosts_newPostFormTextArea__Ehj-D\",\"legendStyle\":\"MyPosts_legendStyle__kuSLI\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__U+szP\",\"item\":\"Post_item__yvb5C\",\"posts\":\"Post_posts__8VASs\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\ntype PostType = {\r\n    message:string, like: number\r\n}\r\nconst Post: React.FC<PostType> = ({message, like}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img alt={\"Мистер бин на прогулке\"}  src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\r\n            {message}\r\n            <div>\r\n                <span>Like {like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"MyPosts\":\"MyPosts_MyPosts__FZcZt\",\"legendStyle\":\"MyPosts_legendStyle__E67pa\",\"fieldSetStyle\":\"MyPosts_fieldSetStyle__0EG1i\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./MyPosts.module.css\"\n//import DisplayFormikState from \"../../../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../../../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport Stack from \"react-bootstrap/Stack\";\n\nconst myInitialValues = { // начальные зачения форм\n    newPost: \"\",\n}\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\ntype MyPostsFormikType = {\n    addPost: (newPostData: string) => void\n\n}\ntype ValuesType = {\n    newPost: string\n}\nconst MyPostsFormik:React.FC<MyPostsFormikType> = ({addPost}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:ValuesType, {resetForm}:any) => { // действия по сабмиту\n        addPost(values.newPost) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form className={classes.MyPosts}>\n                        <div>\n                            <MyTextInput // сообщение в MyPostsBS\n                                label=\"Пост\"\n                                autoFocus={false}\n                                name='newPost'\n                                type='text'\n                                placeholder='Введите ваше сообщение'\n                                leftLabelLength={\"\"}\n                            />\n\n                            {/*кнопка сброса к значениям по умолчанию*/}\n                            <Stack direction=\"vertical\" gap={1} className={'mt-2'}>\n                                <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                                    Submit\n                                </Button>\n                                <Button\n                                    variant=\"warning\"\n                                    type='button'\n                                    onClick={handleReset}\n                                >Reset\n                                </Button>\n                            </Stack>\n\n                        </div>\n                        <div/>\n                        {/*  <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n\n                )}\n\n            </Formik>\n        </>\n    )\n}\n\nexport default MyPostsFormik\n","import React from 'react'; // импорт реакта\nimport classes from './MyPosts.module.css' // css обработка\nimport Post from \"./Post/Post\"; // подкомпонента отрисовки постов через map\nimport MyPostsFormik from \"./Post/MyPostsFormik/MyPostsFormikBS\";\nimport Container from \"react-bootstrap/Container\";\nimport {postsType} from \"../../common/types/commonTypes\"; // reduxForm для ввода новых постов\n\ntype MyPostsBSType = {\n    userId: number,\n    posts: Array<postsType>,\n    addPost: (newPostData:string)=>void\n}\nconst MyPostsBS:React.FC<MyPostsBSType> = ({userId, posts, addPost}) => { // основная компонента отрисовки постов\n\n    const postElements = posts.map((p, ind) => // подкомпонента отрисовки всех постов через map\n        <Post key={ind} message={p.message} like={p.like}/>);\n\n    return (\n        <div className={classes.postsBlock} /*стиль*/ >\n            <Container>\n                {(userId === 0) && // если мы перешли на свой профиль (в браузере нет ID возле profile)\n                <div>\n                    <fieldset>\n                        <legend>\n                            <div className={classes.legendStyle}>Мои посты</div>\n                        </legend>\n                        <MyPostsFormik\n                            addPost={addPost}/> {/*вызов формы постов с отсылкой на локальный обработчик сабмита*/}\n                        <div className={classes.posts}>\n                            {postElements} {/*отрисовка постов*/}\n                        </div>\n                    </fieldset>\n                </div>\n                }\n            </Container>\n\n        </div>\n    )\n}\nexport default MyPostsBS;\n","import MyPostsBS from \"./MyPostsBS\";\nimport {profileActions} from \"../../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {postsType} from \"../../common/types/commonTypes\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\n\nconst {addPostActionCreator} = profileActions\n\ntype ownPropsType = {\n    userId: number,\n}\n\nconst MyPostsContainer: React.FC<mapStateToPropsType & mapDispatchToPropsType & ownPropsType> =\n    ({posts, addPostActionCreator, userId}) => {\n\n        type addPostType = (newPostData: string) => void\n        const addPost: addPostType = (newPostData: string) => {\n            addPostActionCreator( newPostData )\n        }\n        return <MyPostsBS userId={userId} posts={posts} addPost={addPost}/>\n    }\n\nconst mapStateToProps = (state: GlobalStateType) => {\n    return {\n        posts: state.profilePage.posts as Array<postsType>, // мои посты (пока заглушка)\n    }\n}\ntype mapDispatchToPropsType = {\n    addPostActionCreator: (newPostData: string) => void\n}\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>\n\nexport default connect<mapStateToPropsType, // тип mapStateToProps\n    mapDispatchToPropsType, // тип mapDispatchToProps\n    ownPropsType, // тип входящих пропсов от родителя\n    GlobalStateType // глобальный стейт из стора\n    >( mapStateToProps, {addPostActionCreator} )( MyPostsContainer );\n\n\n\n","import React, {memo} from 'react';\nimport classes from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfoBS\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {getProfileType} from \"../api/apiTypes\";\nimport {NulableType, ProfileType} from \"../common/types/commonTypes\";\n\ntype ProfileType2 = {\n    profile: NulableType<getProfileType>,\n    status: string,\n    myId: number,\n    userId: number,\n    putProfile: (putProfile2: ProfileType) =>void,\n    putStatusThunkCreator: (statusTmpInput:string)=>void,\n    uploadImage: (profilePhoto: File)=>void,\n    editProfileStatus:Array<string>,\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\n}\n\nconst Profile: React.FC<ProfileType2> = memo ( ({\n                     profile, status, myId, putStatusThunkCreator, uploadImage,\n                     userId, putProfile, editProfileStatus, setEditProfileStatus\n                 }) => {\n\n    const ProfileRender = <div className={classes.ProfileRender}>\n        <ProfileInfo // Отображение данных выбранного пользователя\n            profile={profile} // профиль выбранного пользователя\n            status={status} // статус из BLL\n            myId={myId} // мой id для модификации статуса\n            putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n            uploadImage={uploadImage} // колбек загрузки фото профиля на сервер\n            userId={userId} // id выбранного пользователя, берется из URL\n            putProfile={putProfile}\n            editProfileStatus={editProfileStatus} // список ошибок правки формы профиля с сервера\n            setEditProfileStatus={setEditProfileStatus}\n        />\n\n    </div>\n    return <div>\n        {ProfileRender} {/*Отрисовка данных профиля с картинкой, и статусом*/}\n\n        <MyPostsContainer // контейнер отображения постов (пока заглушка из стейта BLL)\n            userId={userId} // id выбранного пользователя, берется из URL\n        />\n    </div>\n})\nexport default Profile;\n","import {getProfileType} from \"../api/apiTypes\";\nimport {NulableType, ProfileType} from \"../common/types/commonTypes\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\nimport {compose} from \"redux\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getProfileThunkCreator,\n    profileActions, putMyProfileThunkCreator, putStatusThunkCreator, setprofilePhotoThunkCreator\n} from \"../../redux/profile-reducer\";\nimport withRouter2 from \"../hoc/withRouter2\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport React, {useEffect} from \"react\";\nimport Profile from \"./Profile\";\nimport Preloader from \"../common/Preloader/Preloader\";\n\ntype OwnPropsType = {\n    userId: number // id пользователя\n}\n\nconst ProfileContainerFC: React.FC<OwnPropsType> = ({userId}) => {\n\n    const profile: NulableType<getProfileType> = useSelector( (state: GlobalStateType) => state.profilePage.profile )\n    const editProfileStatus: Array<string> = useSelector( (state: GlobalStateType) => state.profilePage.editProfileStatus )\n    const isFetching: boolean = useSelector( (state: GlobalStateType) => state.app.isFetching )\n\n    const myId: number = useSelector( (state: GlobalStateType) => state.auth.myId )\n    const status: string = useSelector( (state: GlobalStateType) => state.profilePage.status )\n\n    const dispatch = useDispatch()\n\n    const {setEditProfileStatus} = profileActions\n\n    const setEditProfileStatusLocal = (editProfileStatus: Array<string>) => {\n        dispatch( setEditProfileStatus(editProfileStatus) )\n    }\n    const uploadImage = (profilePhoto: File) => {\n        dispatch( setprofilePhotoThunkCreator( profilePhoto ) )\n    }\n\n    const putStatusThunkCreatorLocal = (status: string) => {\n        dispatch( putStatusThunkCreator( status ) )\n    }\n\n    const putProfile = (putProfile2: ProfileType) => { // обновить данные профиля просле правки\n        // добавить в данные после изменения формы мой ID для чтения результата обновления с сервера\n        const MyProfile = Object.assign( {}, {userId: myId}, putProfile2 );\n        dispatch( putMyProfileThunkCreator( MyProfile ) )// обновить данные профиля просле правки\n    }\n\n    useEffect( () => {\n        dispatch( getProfileThunkCreator( userId ) );// обновить профиль в зависомости от ID\n    }, [userId, dispatch] )\n\n    return <div>\n        {isFetching && <Preloader/>}\n        <Profile\n            status={status} //статус\n            myId={myId}// мой ID\n            userId={userId}// id пользователя (может совпадать с myId если смотрим свой профиль)\n\n            profile={profile} // профиль\n            editProfileStatus={editProfileStatus}// список ошибок правки формы профиля с сервера\n\n            putProfile={putProfile }// задание профиля на сервер после ввода данных\n            uploadImage={uploadImage}// загрузка картинки\n            putStatusThunkCreator={putStatusThunkCreatorLocal}\n            setEditProfileStatus={ setEditProfileStatusLocal }// экшн креатор задания ошибки с сервера в стейт после правки профиля\n        />\n    </div>\n}\n\nexport default compose<React.ComponentType>(\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2// проверка, залогинен ли я\n)( ProfileContainerFC )\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nconst NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nconst withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n","import PropTypes from 'prop-types';\nimport { DEFAULT_BREAKPOINTS, DEFAULT_MIN_BREAKPOINT } from './ThemeProvider';\nexport function responsivePropType(propType) {\n  return PropTypes.oneOfType([propType, PropTypes.shape({\n    xs: propType,\n    sm: propType,\n    md: propType,\n    lg: propType,\n    xl: propType,\n    xxl: propType\n  })]);\n}\nexport default function createUtilityClassName(utilityValues, breakpoints = DEFAULT_BREAKPOINTS, minBreakpoint = DEFAULT_MIN_BREAKPOINT) {\n  const classes = [];\n  Object.entries(utilityValues).forEach(([utilName, utilValue]) => {\n    if (utilValue != null) {\n      if (typeof utilValue === 'object') {\n        breakpoints.forEach(brkPoint => {\n          const bpValue = utilValue[brkPoint];\n          if (bpValue != null) {\n            const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n            classes.push(`${utilName}${infix}-${bpValue}`);\n          }\n        });\n      } else {\n        classes.push(`${utilName}-${utilValue}`);\n      }\n    }\n  });\n  return classes;\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport createUtilityClassName, { responsivePropType } from './createUtilityClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Stack = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  direction,\n  gap,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, direction === 'horizontal' ? 'hstack' : 'vstack');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    ref: ref,\n    className: classNames(className, bsPrefix, ...createUtilityClassName({\n      gap\n    }, breakpoints, minBreakpoint))\n  });\n});\nStack.displayName = 'Stack';\nexport default Stack;"],"names":["memo","_ref","status","userId","myId","putStatusThunkCreator","SET_MODIFY_STATUS_TRUE","SET_MODIFY_STATUS_FALSE","_useReducer","useReducer","localState","action","type","_objectSpread","modifyStatus2","statusTmpInput2","text","Error","_useReducer2","_slicedToArray","dispatch","setMyStatus","CommonInputGroup","_ref2","isDisabled","onClickMethod","value","_jsxs","InputGroup","className","onClick","children","_jsx","id","Form","title","onChange","e","event","target","onChangeStatus","onBlur","autoFocus","placeholder","onKeyPress","charCode","checkEnterPressed","disabled","myValidationSchema","Yup","putProfile","setEditMode","profile","editProfileStatus","setEditProfileStatus","myInitialValues","FullName","fullName","AboutMe","aboutMe","LookingForAJob","lookingForAJob","LookingForAJobDescription","lookingForAJobDescription","contacts","React","Formik","initialValues","validationSchema","onSubmit","values","resetForm","_ref3","handleReset","classes","MyTextInput","label","name","leftLabelLength","MyCheckbox","Object","keys","map","c","key","err","toLowerCase","includes","Button","variant","key1","Value","concat","commonClasses","toString","ind","Contact","uploadImage","console","log","_useState","useState","_useState2","editMode","editedSuccessfully","length","useEffect","setTimeout","Preloader","profileStatus","ProfileStatusUseReducer","showProfile","ShowProfile","editProfile","EditProfileFormikBS","editMyPhoto","files","showUserPhoto","Image","fluid","alt","src","photos","large","userPhoto1","Container","Row","Col","xs","md","message","like","newPost","addPost","_Fragment","Stack","direction","gap","posts","postElements","p","Post","MyPostsFormik","addPostActionCreator","profileActions","connect","state","profilePage","MyPostsBS","newPostData","ProfileRender","ProfileInfo","MyPostsContainer","compose","withRouter2","NavigateToLoginHoc2","useSelector","isFetching","app","auth","useDispatch","getProfileThunkCreator","Profile","putProfile2","MyProfile","assign","putMyProfileThunkCreator","profilePhoto","setprofilePhotoThunkCreator","mapStateToProps","isAuth","Component","props","Navigate","to","Children","aaa","params","useParams","Number","createUtilityClassName","utilityValues","breakpoints","arguments","undefined","DEFAULT_BREAKPOINTS","minBreakpoint","DEFAULT_MIN_BREAKPOINT","entries","forEach","utilName","utilValue","brkPoint","bpValue","infix","push","ref","_ref$as","as","bsPrefix","_objectWithoutProperties","_excluded","useBootstrapPrefix","useBootstrapBreakpoints","useBootstrapMinBreakpoint","classNames","_toConsumableArray","displayName"],"sourceRoot":""}