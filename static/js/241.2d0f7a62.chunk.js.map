{"version":3,"file":"static/js/241.2d0f7a62.chunk.js","mappings":"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","sources":["components/Info/LoginInfoShort.tsx","webpack://my-app/./src/components/Login/Login.module.css?3530","../node_modules/react-bootstrap/esm/ButtonGroup.js","components/Login/LoginFormikBS.jsx","components/Login/LoginContainer.jsx"],"sourcesContent":["import React from \"react\";\n\ntype LoginInfoShortType = {}\nconst LoginInfoShort:React.FC<LoginInfoShortType> = () => {\n    return (<div>\n        Данные для тестового входа:\n        <p>Аккаунт 1: Email: evgeniysazonov1983@gmail.com <br/>\n            Password: 12qwaszx</p>\n        <p>Аккаунт 2 : Email: evgeniysazonov1983@googlemail.com <br/>\n            Password: 12qwaszx</p>\n        <p>Аккаунт 3: Email: free@samuraijs.com <br/>\n            Password: free</p>\n        <p>В случае проблем с авторизацией, попробуйте сначала войти по указанным парам логин/пароль на <br/>\n            <a href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a>\n        </p>\n    </div>)\n}\n\nexport default LoginInfoShort\n","// extracted by mini-css-extract-plugin\nexport default {\"LoginForm\":\"Login_LoginForm__tY6-C\",\"legendStyle\":\"Login_legendStyle__-tuTd\",\"fieldSetStyle\":\"Login_fieldSetStyle__LTe39\",\"errorText\":\"Login_errorText__E5Dby\"};","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./Login.module.css\"\nimport {MyTextInput, MyCheckbox} from \"../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n//import DisplayFormikState from \"../common/formikCommon/DisplayFormikState\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Col from \"react-bootstrap/Col\";\nimport LoginInfoShort from \"../Info/LoginInfoShort\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport commonClasses from \"../common/CommonClasses/common.module.css\"\n\nlet myInitialValues = { // начальные зачения форм\n    email: \"\",\n    password: \"\",\n    captcha: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    password: Yup.string()\n        .required('Required'),\n})\n\nconst LoginFormik = ({postLogin, captchaURL, updateCaptcha, loginError}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\n        postLogin(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    const loginForm = <Formik\n        initialValues={myInitialValues}\n        validationSchema={myValidationSchema}\n        onSubmit={myOnSubmit}\n    >\n\n        {({\n              handleReset,// обнуление полей\n          }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n            <Form> {/*className={classes.LoginForm}*/}\n                <Col> {/*lg={6} md={12}*/}\n\n                    <MyTextInput // email\n                        label=\"Email Address\"\n                        name='email'\n                        type='email'\n                        placeholder='email'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyTextInput // password\n                        label=\"Password\"\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder='password'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyCheckbox name='rememberme'>  {/*чекбокс */}\n                        запомнить меня\n                    </MyCheckbox>\n\n                    {captchaURL && <div>\n                        <div>\n                            <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"/>\n                        </div>\n                        {/*<label htmlFor=\"captcha\">Captcha</label> {/*альтернатива написания input с обработкой ошибок*/}\n\n                        <MyTextInput // email\n                            label=\"\"\n                            name='captcha'\n                            type='text'\n                            placeholder='captcha'\n                        />\n                    </div>\n\n                    }\n                    <ButtonGroup aria-label=\"Basic example\">\n                        <Button variant=\"warning\" type='button' onClick={handleReset}>Reset</Button>\n                        <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                            Submit\n                        </Button>\n                    </ButtonGroup>\n\n                    {/*кнопка сброса к значениям по умолчанию*/}\n                    <div className={classes.errorText}>{loginError && loginError}</div>\n\n                    {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                </Col>\n            </Form>\n        )}\n    </Formik>\n    return (\n        <>\n            <Container className=\"d-inline-block\">\n                <h2 className={commonClasses.pageHeader}>Login</h2>\n\n                <Row >\n                    <Col>{loginForm}</Col>\n                    <Col><LoginInfoShort/></Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default LoginFormik\n\n","import React from \"react\";\nimport Login from \"./LoginFormikBS\";\nimport {connect} from \"react-redux\";\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\nimport {Navigate} from \"react-router-dom\";\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\n\nclass LoginContainer extends React.Component {\n\n    postLogin = ({email, password, rememberme, captcha}) => { // email, password, rememberme берем из формы login\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\n        this.props.postLoginThunkCreator(email, password, rememberme, captcha);\n    }\n\n    updateCaptcha = () => {\n        this.props.getCaptchaThunkCreator()\n    }\n\n    render() {\n        if (this.props.isAuth) { // условие что я авторизован\n            this.props.getFriendsThunkCreator( // получить список друзей\n                this.props.friendsCurrentPage,\n                this.props.friendsPageSize,\n                this.props.friendsTerm,\n                this.props.friend);\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\n        }\n\n        return (\n            <div>\n                <Login postLogin={this.postLogin}\n                       captchaURL={this.props.captchaURL}\n                       updateCaptcha={this.updateCaptcha}\n                       dispatch = {this.props.dispatch}\n                       loginError = {this.props.loginError}\n                /> {/*Возврат целевой компоненты*/}\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\n    return {\n        isAuth: state.auth.isAuth,\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\n        friendsPageSize: state.sideBar.friendsPageSize,\n        friendsTerm: state.sideBar.friendsTerm,\n        friend: state.sideBar.friend,\n        captchaURL: state.auth.captchaURL, // URL каптчи при неправильном вводе 5 раз логина\n        loginError: state.auth.loginError // ошибка авторизации\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n\n        postLoginThunkCreator: (email, password, rememberme, captchaURL) => { // отправить сообщение\n            dispatch(postLoginThunkCreator(email, password, rememberme, captchaURL))\n        },\n        getFriendsThunkCreator: (currentPage, pageSize, term, friend) => { // отправить сообщение\n            dispatch(getFriendsThunkCreator(currentPage, pageSize, term, friend))\n        },\n        getCaptchaThunkCreator: () => { // отправить сообщение\n            dispatch(getCaptchaThunkCreator())\n        },\n        dispatch: dispatch\n\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\n"],"names":["_jsxs","children","_jsx","href","ButtonGroup","React","_ref","ref","bsPrefix","size","vertical","className","_ref$as","as","Component","rest","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","baseClass","concat","_objectSpread","classNames","displayName","defaultProps","role","myInitialValues","email","password","captcha","myValidationSchema","Yup","required","postLogin","captchaURL","updateCaptcha","loginError","loginForm","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","Col","MyTextInput","label","name","type","placeholder","leftLabelLength","MyCheckbox","src","onClick","alt","Button","variant","classes","_Fragment","Container","commonClasses","Row","LoginInfoShort","LoginContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","rememberme","props","postLoginThunkCreator","getCaptchaThunkCreator","_createClass","key","value","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","Navigate","to","Login","dispatch","connect","state","auth","sideBar","currentPage","pageSize","term"],"sourceRoot":""}