{"version":3,"file":"static/js/136.25adf81c.chunk.js","mappings":"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","sources":["components/ChatPage/ChatPage.tsx","components/ChatPage/ChatPageContainer.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\n\ntype ChatMessageType = { // тип сообщений чата\n    message: string,\n    photo: string,\n    userId: number,\n    userName: string\n}\n\ntype WebSocketType = WebSocket | null // тип объекта вебсокет\n\nconst Messages: React.FC<{ wsChannel: WebSocketType }> = ({wsChannel}) => {\n    const [messages, setMessages] = useState<Array<ChatMessageType>>( [] ) // массив сообщений чата с сервера\n\n    useEffect( () => {\n        const messageHandler = (e: MessageEvent) => { // обработчик новых сообщений\n            const newMessages = JSON.parse( e.data ) // получить массив новых сообщений\n            setMessages( (prevState => [...prevState, ...newMessages]) ) // добавить новые сообщения к ранее загруженным\n        }\n        wsChannel?.removeEventListener( 'message', messageHandler ) // перед добавлением нового слушателя, удалить старый\n\n        wsChannel?.addEventListener( 'message', messageHandler ) // добавить слушатель события новых сообщений\n        return () => {\n            wsChannel?.removeEventListener( 'message', messageHandler )// при закрытии useEffect удалить открытые ранее слушатели\n        }\n    }, [wsChannel] )\n\n    return <div style={{height: \"400px\", overflowY: \"auto\"}}> {/*отрисовка списка сообщений*/}\n        {messages.map( (m, index) => <Message key={index} message={m}/> )}\n    </div>\n}\n\nconst Message: React.FC<{ message: ChatMessageType }> = ({message}) => {//отрисовка списка сообщений\n    return <div>\n        <img src={message.photo} style={{width: \"30px\"}}/> {/*аватарка собеседника*/}\n        <b>{message.userName}</b> {/* его имя*/}\n        <br/>\n        {message.message} {/*само сообщение*/}\n        <hr/>\n    </div>\n}\n\n\nconst AddMessages: React.FC<{ wsChannel: WebSocketType }> = ({wsChannel}) => {\n    const [message, setMessage] = useState<string>( \"\" )\n    const [readyStatus, setReadyStatus] = useState<'pending' | \"ready\">( \"pending\" )\n\n    useEffect( () => {\n        const openHandler = () => { // обработчик при открытии канала websocket\n            setReadyStatus( \"ready\" ) // добавить флаг доступности кнопки и поля ввода\n            console.log( 'open' )\n        }\n\n        if (!wsChannel) {// если нет канала websocket\n            setReadyStatus(\"pending\") // убрать флаг доступности кнопки и поля ввода\n\n        }\n        wsChannel?.removeEventListener('open', openHandler)// перед добавлением нового слушателя, удалить старый\n\n        wsChannel?.addEventListener( 'open', openHandler )// добавить слушатель события открытого канала websocket\n\n        return () => {\n            wsChannel?.removeEventListener('open', openHandler)// при закрытии useEffect удалить открытые ранее слушатели\n            setReadyStatus(\"pending\")\n        }\n    }, [wsChannel] )\n\n    const sendMessage = () => { // ввод новых сообщений\n        message && wsChannel?.send( message ) // если поле ввода не пустое, отправить новое сообщение\n        setMessage( \"\" ) // занулить поле воода\n    }\n    const isDisabled = readyStatus !== 'ready' // флаг доступности кнопки и поля ввода\n    return <div >\n        <input\n            disabled={isDisabled} // доступность поля ввода\n            value={message} // значение из локального стейта\n            onChange={(e) => { // при изменении поля ввода\n                setMessage( e.currentTarget.value ) // записать значение в локальный стейт\n            }}\n        />\n       <button onClick={sendMessage} disabled={isDisabled} >Send</button> {/* кнопка отправки сообщений*/}\n    </div>\n}\n\n\n\nconst Chat: React.FC = () => { // основная страница чата\n    const [wsChannel, setWsChannel] = useState<WebSocketType>( null ) // хранилище канала websocket\n\n    useEffect( () => {\n        let ws: WebSocket // временная переменная канала websocket\n\n        const closeHandler = () => { // обработчик закрытия канала websocket\n            console.log( \"CLOSE WS\" )\n            setWsChannel(null) // зануляем канал, если прило событие close\n            setTimeout(()=>createChannel(),3000) // пересоздаем новый канал при закрытии старого\n        }\n\n        const createChannel = () => { // обработчик создания нового канала websocket\n            ws?.removeEventListener('close', closeHandler)// перед добавлением нового слушателя, удалить старый\n\n            ws = new WebSocket( 'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx' ) // создать новый канал\n            ws.addEventListener( 'close', closeHandler )// добавить слушатель события закрытия канала websocket\n            setWsChannel( ws ) // записать в локальное хранилище объект канала websocket\n        }\n\n        createChannel()\n        return () => {\n            ws.removeEventListener('close', closeHandler)// при закрытии useEffect удалить открытые ранее слушатели\n            ws.close() // закрыть канал при завершении useEffect\n        }\n    }, [] )\n\n    return <div>\n        <Messages wsChannel={wsChannel}/> {/*отрисовка сообщений чата из websocket*/}\n        <AddMessages wsChannel={wsChannel}/> {/*добавить сообщения в чат websocket*/}\n    </div>\n}\nexport default Chat\n\n\n","import React from \"react\";\nimport Chat from \"./ChatPage\";\n\nconst ChatPageContainer:React.FC = () => {\n    return <div>\n        <Chat/>\n    </div>\n}\nexport default ChatPageContainer\n"],"names":["Messages","_ref","wsChannel","_useState","useState","_useState2","_slicedToArray","messages","setMessages","useEffect","messageHandler","e","newMessages","JSON","parse","data","prevState","concat","_toConsumableArray","removeEventListener","addEventListener","_jsxs","style","height","overflowY","children","map","m","index","_jsx","Message","message","_ref2","src","photo","width","userName","AddMessages","_ref3","_useState3","_useState4","setMessage","_useState5","_useState6","readyStatus","setReadyStatus","openHandler","console","log","isDisabled","disabled","value","onChange","currentTarget","onClick","send","_useState7","_useState8","setWsChannel","ws","closeHandler","setTimeout","createChannel","_ws","WebSocket","close","Chat"],"sourceRoot":""}