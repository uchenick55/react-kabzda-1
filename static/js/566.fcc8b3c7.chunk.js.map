{"version":3,"file":"static/js/566.fcc8b3c7.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/common/Dialog2Messages2/dialog2Messages2Common.module.scss?0031","webpack://my-app/./src/components/common/Dialog2Messages2/Dialog2/dialog2Render.module.css?4812","components/common/Dialog2Messages2/Dialog2/Dialog2Item.tsx","components/common/Dialog2Messages2/Dialog2/Dialog2Render.tsx","webpack://my-app/./src/components/common/Dialog2Messages2/Messages2/messages2Render.module.scss?f5af","components/common/Dialog2Messages2/Messages2/Messages2Render.tsx","components/common/Dialog2Messages2/Dialog2Messages2Common.tsx","components/common/Dialog2Messages2/Dialog2Messages2Container.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog2Messages2Common\":\"dialog2Messages2Common_dialog2Messages2Common__LEsM3\",\"Fixed\":\"dialog2Messages2Common_Fixed__5Py7s\"};","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"dialog2Render_Fixed__rE64i\",\"dialog2HeaderCommon\":\"dialog2Render_dialog2HeaderCommon__f7w22\",\"dialog2ListCommon\":\"dialog2Render_dialog2ListCommon__SwCdx\",\"MobileDialogWidth\":\"dialog2Render_MobileDialogWidth__SduIv\",\"DesktopDialogWidth\":\"dialog2Render_DesktopDialogWidth__13maI\",\"Dialog2ItemCardExt\":\"dialog2Render_Dialog2ItemCardExt__bKaop\",\"Dialog2ItemCardInt\":\"dialog2Render_Dialog2ItemCardInt__p01Y7\",\"Dialog2ItemCardName\":\"dialog2Render_Dialog2ItemCardName__LpHFJ\",\"Dialog2ItemCardPhoto\":\"dialog2Render_Dialog2ItemCardPhoto__xyJN8\",\"Dialog2ItemCardNewMsgCnt\":\"dialog2Render_Dialog2ItemCardNewMsgCnt__WZGAn\",\"Dialog2ItemCardMsgTime\":\"dialog2Render_Dialog2ItemCardMsgTime__13-am\"};","import React from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport userPhoto from \"../../../../assets/images/no-image3.png\";\nimport {NavLink} from \"react-router-dom\";\n\ntype Dialog2ItemType = {\n    userName: string, //\"evgeniysazonov\"\n    hasNewMessages: boolean,\n    lastDialogActivityDate: string, //\"2023-04-30T19:10:31.843\"\n    newMessagesCount: number, //0\n    photos: {\n        small: string,// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user-small.jpg?v=1\",\n        large: string// \"https://social-network.samuraijs.com/activecontent/images/users/27045/user.jpg?v=1\"\n    },\n    id: number\n}\nconst Dialog2Item: React.FC<Dialog2ItemType> = (\n    {userName, hasNewMessages, photos, lastDialogActivityDate, newMessagesCount, id}) => {\n    return <div className={classes.Dialog2ItemCardExt}>\n        <NavLink to={'/messages/' + id}>\n            <div className={classes.Dialog2ItemCardInt}>\n                <div className={classes.Dialog2ItemCardName}>{userName}</div>\n                {/*Имя пользователя*/}\n                {hasNewMessages && <div\n                    className={classes.Dialog2ItemCardNewMsgCnt}>{newMessagesCount}</div>} {/*вывод количества новых сообщений*/}\n                <img src={photos.small ? photos.small : userPhoto} className={classes.Dialog2ItemCardPhoto}\n                     alt=\"CardPhoto\"/> {/*Фото*/}\n                <div className={classes.Dialog2ItemCardMsgTime}>{lastDialogActivityDate.slice( 11, 16 )}</div>\n                {/*Время*/}\n            </div>\n        </NavLink>\n    </div>\n}\nexport default Dialog2Item\n","import React, {useState} from \"react\";\nimport classes from \"./dialog2Render.module.css\"\nimport {getDialog2AllType} from \"../../../api/apiTypes\";\nimport Dialog2Item from \"./Dialog2Item\";\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n}\nconst Dialog2Render: React.FC<Dialog2RenderType> = (\n    {PageWidth, MobileWidth, patch, Dialog2All}\n    ) => {\n    const hasRendered: Array<number> = [] // массив, какие диалоги в списке уже были отрисованы\n    return <div>\n        { // Компонента Dialog2Render отрисовывается на странице dialog всегда.\n            // На странице messages только при десктопной версии\n            (patch === \"messages\" && PageWidth > MobileWidth || patch === \"dialog2\")\n            && <div>\n                <div  //Fixed слева вверху.\n                    // Поле остается на странице dialog2 всегда.\n                    // На странице messages только при десктопной версии\n                    className={`${classes.Fixed} ${classes.dialog2HeaderCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\n                    /*поиск по именам списка диалогов, с задержкой после ввода, без кнопки отправить*/\n\n                > поиск, без кнопки отправить, с задержкой после ввода.\n                </div>\n                <div // Fixed слева внизу + прокрутка. Поле остается на странице dialog2 всегда\n                    className={`${classes.Fixed} ${classes.dialog2ListCommon} ${PageWidth < MobileWidth ? classes.MobileDialogWidth : classes.DesktopDialogWidth}`}\n                >\n                    {Dialog2All.map(d2=>{\n                        const {id, userName, hasNewMessages, lastDialogActivityDate, newMessagesCount, photos} = d2\n                        if (hasRendered.includes(id)) { //был глюк с записью двух одинаковых диалогов на сервер.\n                            // Исправил проверкой, что уже отрисовано\n                            return\n                        }\n                        hasRendered.push(id)\n                        return <Dialog2Item\n                            key={id} userName={userName} hasNewMessages={hasNewMessages} photos={photos}\n                            lastDialogActivityDate={lastDialogActivityDate} newMessagesCount={newMessagesCount} id={id} />\n                    })}\n\n                    {/*список диалогов с фильтрацией по имени из заголовка. */}\n                </div>\n            </div>}\n\n    </div>\n}\nexport default Dialog2Render\n","// extracted by mini-css-extract-plugin\nexport default {\"Fixed\":\"messages2Render_Fixed__1zkg8\",\"messages2NameAndProfileLink\":\"messages2Render_messages2NameAndProfileLink__3EOgp\",\"messages2ChooseDialog\":\"messages2Render_messages2ChooseDialog__mrA0X\",\"messages2RenderMessages\":\"messages2Render_messages2RenderMessages__7xQD2\",\"messages2PrintMessage\":\"messages2Render_messages2PrintMessage__vep6F\",\"MobileMessagesLeft\":\"messages2Render_MobileMessagesLeft__ubesZ\",\"DesktopMessagesLeft\":\"messages2Render_DesktopMessagesLeft__y1s8a\"};","import React from \"react\";\nimport classes from \"./messages2Render.module.scss\"\n\ntype Dialog2RenderType = {\n    PageWidth: number\n    MobileWidth: number\n    patch: string\n}\nconst Messages2Render: React.FC<Dialog2RenderType> = ({PageWidth, MobileWidth, patch}) => {\n    return <div>\n        {patch === \"dialog2\" && PageWidth > MobileWidth && <div\n            //- предложение выбрать диалог\n            // эта часть отображается только на странице dialog и только в десктопной версии\n            //  Fixed все остальное поле справа.\n            className={`${classes.Fixed} ${classes.messages2ChooseDialog}`}\n        > Выберите диалог\n        </div>}\n\n        {patch === \"messages\" &&\n        <div // эта часть компоненты Messages2Render отрисовывается на странице messages всегда.\n        >\n            <div\n                //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2NameAndProfileLink} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                имя собеседника и ссылка картинка на его профиль\n            </div>\n            <div //fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2RenderMessages} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n                отрисовка всех сообщений\n            </div>\n            <div//fixed справа вверху - имя собеседника и ссылка картинка на его профиль\n                // отображается всегда на странице messages\n                className={`${classes.Fixed} ${classes.messages2PrintMessage} ${PageWidth < MobileWidth ?\n                    classes.MobileMessagesLeft : classes.DesktopMessagesLeft}`}\n            >\n               здесь печатаем новые сообщения\n            </div>\n        </div>\n        }\n\n    </div>\n\n}\nexport default Messages2Render\n","import React from \"react\";\nimport classesCommon from \"./dialog2Messages2Common.module.scss\";\nimport Dialog2Render from \"./Dialog2/Dialog2Render\";\nimport Messages2Render from \"./Messages2/Messages2Render\";\nimport {getDialog2AllType} from \"../../api/apiTypes\";\n\n\ntype Dialog2RenderType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n}\n\n\nconst Dialog2Messages2Common: React.FC<Dialog2RenderType> = (\n    {patch, PageWidth, MobileWidth, Dialog2All}\n    ) => {\n    return <div className={classesCommon.dialog2Messages2Common}>\n        {/*Отрисовка поля диалогов*/}\n        <Dialog2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch} Dialog2All={Dialog2All}/>\n\n        <Messages2Render PageWidth={PageWidth} MobileWidth={MobileWidth} patch={patch}/>\n\n    </div>\n}\nexport default Dialog2Messages2Common\n","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport {\n    deleteDialog2MessageIdThCr,\n    getDialog2MessageIdViewedThCr, getDialog2MessagesNewerThenThCr,\n    getDialog2AllThCr, postDialog2MessageIdToSpamThCr,\n    postDialog2MessageThCr, putDialog2MessageIdRestoreThCr,\n    putDialog2StartThCr, getDailog2UnreadMessagesThCr\n} from \"../../../redux/dialog2-reducer\";\nimport Dialog2Messages2Common from \"./Dialog2Messages2Common\";\nimport {getDialog2AllType} from \"../../api/apiTypes\";\n\ntype DialogContainerType = {\n    patch: string,// имя страницы из URL\n    PageWidth: number, // ширина страницы\n    MobileWidth: number, // ширина страницы, считающаяся мобильной версткой\n    Dialog2All: getDialog2AllType, // список всех диалогов для левой колонки\n    getDialog2AllThCr: (userId: number, page:number, count:number) => void,// получить список всех диалогов\n\n    putDialog2StartThCr: (currentDialogId:number) => void,\n    postDialog2MessageThCr: (userId: number, body:string) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string) => void,\n    deleteDialog2MessageIdThCr: (messageId: string) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date:string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n\n}\nconst Dialog2Messages2Container:React.FC<DialogContainerType> = (\n    {putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n        getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n        putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr,\n        patch, PageWidth, MobileWidth, Dialog2All}\n    ) => {\n    //cde7821a-6981-4f49-8b12-faf681cb1621 от \"555\"\n    // 84ac68ee-73d0-43c4-82bb-0fd0273d4808 (привет андрей)\n    // 25528  | 27045 | 1079\n    useEffect(()=>{\n        getDialog2AllThCr(9999999999, 1, 10) // получить список всех диалогов\n\n        //putDialog2StartThCr(1079)\n       // postDialog2MessageThCr(27045, \"to 27045_3\")// отправить сообщение указав ID пользователя\n        //  getDialog2MessageIdViewedThCr(\"84ac68ee-73d0-43c4-82bb-0fd0273d4808\") // проверить прочитано ли сообщение по его ID\n        // postDialog2MessageIdToSpamThCr(\"cde7821a-6981-4f49-8b12-faf681cb1621\") // пометить как спам сообщение по его ID\n        // deleteDialog2MessageIdThCr(\"69751d6f-8624-4867-83ac-999b1ff5f651\") // - удалить сообщение (только у себя) по ID сообщения\n        // putDialog2MessageIdRestoreThCr(\"cde7821a-6981-4f49-8b12-faf681cb1621\") // - восстановить сообщение из спама и удаленных\n        //getDialog2MessagesNewerThenThCr(25528, \"2023-04-30T19:10:31.843\") // получить все сообщения от указанного ID пользователя новее чем указанная дата\n        // getDailog2UnreadMessagesThCr() // - вернуть количество непрочтенных сообщений\n    },[])\n    return <div>\n        <Dialog2Messages2Common\n            patch={patch} PageWidth={PageWidth} MobileWidth={MobileWidth} Dialog2All={Dialog2All}\n        />\n\n    </div>\n}\nconst mapStateToProps = (state:GlobalStateType) => {\n    return {\n        patch: state.app.patch,\n        PageWidth: state.app.PageWidth,\n        MobileWidth: state.app.MobileWidth,\n        Dialog2All: state.dialog2.Dialog2All\n    }\n}\ntype mapStateToPropsType = {\n    patch: string,\n    PageWidth: number,\n    MobileWidth: number,\n    Dialog2All: getDialog2AllType,\n\n}\ntype mapDispatchToPropsType = {\n    putDialog2StartThCr: (currentDialogId:number) => void,\n    getDialog2AllThCr: (userId: number, page:number, count:number) => void,\n    postDialog2MessageThCr: (userId: number, body:string) => void,\n    getDialog2MessageIdViewedThCr: (messageId: string) => void,\n    postDialog2MessageIdToSpamThCr: (messageId: string) => void,\n    deleteDialog2MessageIdThCr: (messageId: string) => void,\n    putDialog2MessageIdRestoreThCr: (messageId: string) => void,\n    getDialog2MessagesNewerThenThCr: (userId: number, date:string) => void,\n    getDailog2UnreadMessagesThCr: () => void,\n\n}\nexport default connect<\n    mapStateToPropsType,\n    mapDispatchToPropsType,\n    unknown,\n    GlobalStateType\n    >(mapStateToProps,{\n    putDialog2StartThCr, getDialog2AllThCr, postDialog2MessageThCr,\n    getDialog2MessageIdViewedThCr, postDialog2MessageIdToSpamThCr, deleteDialog2MessageIdThCr,\n    putDialog2MessageIdRestoreThCr, getDialog2MessagesNewerThenThCr, getDailog2UnreadMessagesThCr\n})(Dialog2Messages2Container)\n"],"names":["_ref","userName","hasNewMessages","photos","lastDialogActivityDate","newMessagesCount","id","_jsx","className","classes","children","NavLink","to","_jsxs","src","small","userPhoto","alt","slice","PageWidth","MobileWidth","patch","Dialog2All","hasRendered","concat","map","d2","includes","push","Dialog2Item","classesCommon","Dialog2Render","Messages2Render","connect","state","app","dialog2","putDialog2StartThCr","getDialog2AllThCr","postDialog2MessageThCr","getDialog2MessageIdViewedThCr","postDialog2MessageIdToSpamThCr","deleteDialog2MessageIdThCr","putDialog2MessageIdRestoreThCr","getDialog2MessagesNewerThenThCr","getDailog2UnreadMessagesThCr","useEffect","Dialog2Messages2Common"],"sourceRoot":""}