{"version":3,"file":"static/js/955.be26818a.chunk.js","mappings":"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","sources":["components/Rest/Krestiki-Noliki/KrestikiNoliki.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./krestiki-noliki.css\";\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport Button from \"react-bootstrap/Button\";\n\ntype SquareType = {\n    value: \"X\" | \"O\" | null, // значение X, O или пусто (null)\n    handleSquare: (i: number) => void, // обработчик кликов по кнопке, пришел сверху из пропсов\n    i: number// номер текущей клетки\n}\n\nconst Square: React.FC<SquareType> = ({value, handleSquare, i}) => {\n    // отрисовка квадрата (отдельной клетки)\n    return (\n        <button\n            className=\"square\" // класс кнопки/клетки\n            onClick={() => {\n                // по клику\n                handleSquare( i ); // выполнить функцию из пропсов сверху\n            }}\n        >\n            {value} {/* значение внутри клетки X, O или пустота (null)*/}\n        </button>\n    );\n};\ntype squaresType = Array<\"X\" | \"O\" | null> // пропсами передаем вглубь текущий массив клеток\ntype historyType = [\n    {\n        \"squaresNew\": squaresType\n    }\n]\n\ntype BoardPropsType = {\n    squares:squaresType // пропсами передаем вглубь текущий массив клеток\n    xIsNext: boolean// статус кто ходит\n    handleSquare:(i: number) => void // обработчик кликов\n    history:historyType\n}\n\nclass Board extends React.Component<BoardPropsType> {\n    // все игровое поле из 9 клеток\n    renderSquare(i:number) {\n        // обращение к отрисовке отдельной клетки Square\n        return (\n            <Square // отрисовать Square отдельную клетку\n                value={this.props.squares[i]} // значение X, O или пусто (null)\n                handleSquare={this.props.handleSquare} // обработчик кликов по кнопке, пришел сверху из пропсов\n                i={i} // номер текущей клетки\n            />\n        );\n    }\n\n    render() {\n        let status; // существует переменная status\n        const Winner = calculateWinner( this.props.squares ); // проверка, появился ли победитель\n        if (this.props.history.length < 10) {\n            status = this.props.xIsNext ? \"Сейчас ходит: X \" : \"Сейчас ходит: O \";\n            // задать статусу кто ходит следующим X или O\n        }\n        if (Winner) {// определен победитель\n            status = \"Победитель: \" + Winner; // вывести победителя\n        }\n        if (this.props.history.length >= 10 && !Winner) {\n            status = \"Ничья\"; // заполнены все клетки и нет победителя\n        }\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {/*вывести статус в отрисовке*/}\n                <div className=\"board-row\">\n                    {this.renderSquare( 0 )} {/*задание 3 клеток с порядковым номером i*/}\n                    {this.renderSquare( 1 )}\n                    {this.renderSquare( 2 )}\n                </div>\n                <div className=\"board-row\">\n                    {/*перенос строки, задание еще 3 клеток*/}\n                    {this.renderSquare( 3 )}\n                    {this.renderSquare( 4 )}\n                    {this.renderSquare( 5 )}\n                </div>\n                <div className=\"board-row\">\n                    {/*перенос строки, задание еще 3 клеток*/}\n                    {this.renderSquare( 6 )}\n                    {this.renderSquare( 7 )}\n                    {this.renderSquare( 8 )}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares:squaresType) {\n    // функция определения победителя (squares - весь текущий массив клеток)\n    const lines = [\n        [0, 1, 2], // задание комбинаций a, b, c при которых определяется победитель\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let n = 0; n < lines.length; n = n + 1) {\n        // перебор элементов squares\n        const [a, b, c] = lines[n]; // переменным a, b, с присваивают поочередно\n        // комбинации возможной победы\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            // если комбинации победы совпадают с текущим расположением на поле\n            return squares[a]; // выводится текущий игрок (X или O) как победитель\n        }\n    }\n    return null; // если комбинации победы не совпадают, победитель не определен\n}\n\ntype KrestikiNolikiStateType = {\n    xIsNext: boolean, // что вводим X или O (true/false)\n    history: historyType // массив объектов - истории ходов\n}\nclass KrestikiNoliki extends React.Component<unknown, KrestikiNolikiStateType> {\n    constructor(props:unknown) {\n        super( props );\n        this.state = {\n            xIsNext: true, // что вводим X или O (true/false)\n            history: [{squaresNew: Array( 9 ).fill( null )}] // массив объектов - истории ходов\n        };\n    }\n\n    handleSquare = (i:number) => {\n        // обработчик кликов\n        let currentStep = this.state.history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\n        let squaresNew = this.state.history[currentStep].squaresNew.slice(); // делаем копию текущего массива\n\n        const Winner = calculateWinner( squaresNew ); // попытка определения победитея\n\n        if (squaresNew[i] || Winner) {\n            //если текущая кнопка ранее была заполнена, или победитель уже определен\n            return; // ничего не делаем\n        }\n        squaresNew[i] = this.state.xIsNext ? \"X\" : \"O\";\n        // заносим в массив текущего хода X или O в зависимости от xIsNext\n        this.setState( {xIsNext: !this.state.xIsNext} );\n        // передаем ход следующему игроку\n\n        const historyNew2 = this.state.history.concat( {squaresNew} );\n        // добавить в локальный массив historyNew2 данные из основного массива history и новый массив squaresNew\n\n       // @ts-ignore\n        this.setState( {history: historyNew2} ); // внести в history обновленный  historyNew2\n    };\n\n    newGame = () => {\n        this.setState( {\n            xIsNext: true,\n            history: [{squaresNew: Array( 9 ).fill( null )}]\n        } );\n\n    }\n\n    render() {\n        let currentStep = this.state.history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\n        let squaresNew = this.state.history[currentStep].squaresNew.slice(); // делаем копию текущего массива\n        return (\n            <div>\n                <h2 className={commonClasses.pageHeader}>Крестики нолики</h2>\n                <div>\n                    <Board\n                        squares={squaresNew} // пропсами передаем вглубь текущий массив клеток\n                        xIsNext={this.state.xIsNext} // статус кто ходит\n                        handleSquare={this.handleSquare} // обработчик кликов\n                        history={this.state.history}\n                    />\n\n                </div>\n                <div>\n                    <Button className=\"new-game-button\" onClick={this.newGame}>Начать заново</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default KrestikiNoliki;\n\n\n"],"names":["Square","_ref","value","handleSquare","i","_jsxs","className","onClick","children","Board","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","_jsx","this","props","squares","status","Winner","calculateWinner","history","length","xIsNext","renderSquare","React","lines","n","_lines$n","_slicedToArray","a","b","c","_React$Component2","KrestikiNoliki","_super2","_this","call","currentStep","state","squaresNew","slice","setState","historyNew2","concat","newGame","Array","fill","commonClasses","Button"],"sourceRoot":""}