{"version":3,"file":"static/js/842.04498667.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","components/Login/LoginContainer.jsx","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginCommon\":\"Login_loginCommon__6FyBi\",\"loginForm\":\"Login_loginForm__36Xmy\"};","import React from \"react\"; // импорт реакта\r\nimport {Field, reduxForm} from \"redux-form\";// reduxForm для ввода новых постов\r\nimport classes from './Login.module.css'\r\nimport styles from './../common/Validation/customFields.module.css'\r\nimport {Input} from \"../common/Validation/customFields\";\r\nimport {email, Required} from \"../common/Validation/validationField\";\r\n\r\nconst LoginForm = ({handleSubmit, error}) => { // компонента формы\r\n    return (\r\n        <form onSubmit={handleSubmit}/*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\r\n            <div>\r\n                <div>\r\n                    <Field\r\n                        name=\"email\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}// компонент - ввод\r\n                        placeholder=\"email\" // текст подсказка при пустом поле\r\n                        validate={[Required, email]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        name=\"password\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}// компонент - ввод\r\n                        placeholder=\"password\"// текст подсказка при пустом поле\r\n                        validate={[Required]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        name=\"rememberme\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component=\"input\"// компонент - ввод\r\n                        type=\"checkbox\"// тип - чекбокс\r\n                    />\r\n                    <label> запомнить меня</label>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">Submit</button>\r\n                    {/*кнопка*/}\r\n                </div>\r\n                <div className={styles.commonError}>\r\n                    {/*стилизация красным сообщение об общей ошибке с сервера при неверном логине или пароле*/}\r\n                    {error} {/*вывод сообщения ошибки после диспатча stopSubmit из auth-reducer.jsx */}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// оберточная компонента формы, задает имя подстейта \"LoginForm\"\r\nlet LoginReduxForm = reduxForm({form: 'loginForm'})(LoginForm)\r\n\r\nlet Login = ({postLogin}) => {\r\n    let onSubmit = (formData) => { // функция реакции на сабмит формы с данными от формы formData\r\n        const rememberme = !formData.rememberme ? false : formData.rememberme // если галочка rememberme не стоит, то false\r\n        postLogin(formData.email, formData.password, rememberme)//вызов postLoginThunkCreator выше из LoginContainer\r\n    }\r\n    return (\r\n        <div className={classes.loginCommon}/*стиль*/ >\r\n            <h3>Войдите в аккаунт</h3>{/*h3 заголовок*/}\r\n            <div className={classes.loginForm}>\r\n                <div><LoginReduxForm\r\n                    onSubmit={onSubmit}/>{/*вызов формы логина с отсылкой на локальный обработчик сабмита*/}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {postLoginThunkCreator} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {getFriendsThunkCreator} from \"../../redux/sidebar-reducer\";\r\n\r\nclass LoginContainer extends React.Component {\r\n\r\n    postLogin = (email, password, rememberme) => { // email, password, rememberme берем из формы login\r\n        //метод для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\r\n        this.props.postLoginThunkCreator(email, password, rememberme);\r\n    }\r\n\r\n    render () {\r\n        if (this.props.isAuth) { // условие что я авторизован\r\n            this.props.getFriendsThunkCreator( // получить список друзей\r\n                this.props.friendsCurrentPage,\r\n                this.props.friendsPageSize,\r\n                this.props.friendsTerm,\r\n                this.props.friend);\r\n            return <Navigate to='../profile'/>; // редирект на страницу Profile\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Login postLogin={this.postLogin}/> {/*Возврат целевой компоненты*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        friendsCurrentPage: state.sideBar.friendsCurrentPage,\r\n        friendsPageSize: state.sideBar.friendsPageSize,\r\n        friendsTerm: state.sideBar.friendsTerm,\r\n        friend: state.sideBar.friend,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {postLoginThunkCreator, getFriendsThunkCreator})(LoginContainer)\r\n","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","name","component","Input","placeholder","validate","Required","email","type","className","styles","postLogin","classes","formData","rememberme","password","LoginContainer","props","postLoginThunkCreator","this","isAuth","getFriendsThunkCreator","friendsCurrentPage","friendsPageSize","friendsTerm","friend","to","React","connect","state","auth","sideBar","Textarea","input","meta","restProps","isError","touched","value","maxLengthCreator","maxLength","length","test","undefined"],"sourceRoot":""}