{"version":3,"file":"static/js/955.3e56fdf1.chunk.js","mappings":"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","sources":["components/Rest/Krestiki-Noliki/KrestikiNoliki.tsx","webpack://my-app/./src/components/common/CommonClasses/common.module.css?ffe7"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./krestiki-noliki.css\";\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport Button from \"react-bootstrap/Button\";\n\ntype SquareType = {\n    value: \"X\" | \"O\" | null, // значение X, O или пусто (null)\n    handleSquare: (i: number) => void, // обработчик кликов по кнопке, пришел сверху из пропсов\n    i: number// номер текущей клетки\n}\n\nconst Square: React.FC<SquareType> = ({value, handleSquare, i}) => {\n    // отрисовка квадрата (отдельной клетки)\n    return (\n        <button\n            className=\"square\" // класс кнопки/клетки\n            onClick={() => {\n                // по клику\n                handleSquare( i ); // выполнить функцию из пропсов сверху\n            }}\n        >\n            {value} {/* значение внутри клетки X, O или пустота (null)*/}\n        </button>\n    );\n};\ntype SquaresType = Array<\"X\" | \"O\" | null> // пропсами передаем вглубь текущий массив клеток\n\nconst xIsNextInitialState = true // начальное значение кто ходит\nconst historyInitialState = [{squaresNew: Array( 9 ).fill( null )}] // начальное значение массива History\n\ntype BoardPropsType = {\n    squares: SquaresType // пропсами передаем вглубь текущий массив клеток\n    xIsNext: boolean// статус кто ходит\n    handleSquare: (i: number) => void // обработчик кликов\n    history: typeof historyInitialState\n}\n\nconst Board: React.FC<BoardPropsType> = ({squares, xIsNext, handleSquare, history}) => {\n    // все игровое поле из 9 клеток\n    const renderSquare = (i: number) => {\n        // обращение к отрисовке отдельной клетки Square\n        return (\n            <Square // отрисовать Square отдельную клетку\n                value={squares[i]} // значение X, O или пусто (null)\n                handleSquare={handleSquare} // обработчик кликов по кнопке, пришел сверху из пропсов\n                i={i} // номер текущей клетки\n            />\n        );\n    }\n\n    let status; // определеили переменную\n    const winner = calculateWinner( squares ); // проверка, появился ли победитель\n    if (history.length < 10) {\n        status = xIsNext ? \"Сейчас ходит: X \" : \"Сейчас ходит: O \";\n        // задать статусу кто ходит следующим X или O\n    }\n    if (winner) {// определен победитель\n        status = \"Победитель: \" + winner; // вывести победителя\n    }\n    if (history.length >= 10 && !winner) {\n        status = \"Ничья\"; // заполнены все клетки и нет победителя\n    }\n    return (\n        <div>\n            <div className=\"status\">{status}</div>\n            {/*вывести статус в отрисовке*/}\n            <div className=\"board-row\">\n                {renderSquare( 0 )} {/*задание 3 клеток с порядковым номером i*/}\n                {renderSquare( 1 )}\n                {renderSquare( 2 )}\n            </div>\n            <div className=\"board-row\">\n                {/*перенос строки, задание еще 3 клеток*/}\n                {renderSquare( 3 )}\n                {renderSquare( 4 )}\n                {renderSquare( 5 )}\n            </div>\n            <div className=\"board-row\">\n                {/*перенос строки, задание еще 3 клеток*/}\n                {renderSquare( 6 )}\n                {renderSquare( 7 )}\n                {renderSquare( 8 )}\n            </div>\n        </div>\n    );\n}\n\nfunction calculateWinner(squares: SquaresType) {\n    // функция определения победителя (squares - весь текущий массив клеток)\n    const lines = [\n        [0, 1, 2], // задание комбинаций a, b, c при которых определяется победитель\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let n = 0; n < lines.length; n = n + 1) {\n        // перебор элементов squares\n        const [a, b, c] = lines[n]; // переменным a, b, с присваивают поочередно\n        // комбинации возможной победы\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            // если комбинации победы совпадают с текущим расположением на поле\n            return squares[a]; // выводится текущий игрок (X или O) как победитель\n        }\n    }\n    return null; // если комбинации победы не совпадают, победитель не определен\n}\n\nconst KrestikiNoliki: React.FC = () => {\n\n    const [history, setHistory] = useState<typeof historyInitialState>( historyInitialState )// массив объектов - истории ходов\n\n    const [xIsNext, setXisNext] = useState<boolean>( xIsNextInitialState ) // что вводим X или O (true/false)\n\n    const handleSquare = (i: number) => {\n        // обработчик кликов\n        const currentStep = history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\n        const squaresNew = history[currentStep].squaresNew.slice(); // делаем копию текущего массива\n\n        const winner = calculateWinner( squaresNew ); // попытка определения победитея\n\n        if (squaresNew[i] || winner) {\n            //если текущая кнопка ранее была заполнена, или победитель уже определен\n            return; // ничего не делаем\n        }\n        squaresNew[i] = xIsNext ? \"X\" : \"O\";\n        // заносим в массив текущего хода X или O в зависимости от xIsNext\n        setXisNext( !xIsNext );  // передаем ход следующему игроку\n\n        const historyNew2 = history.concat( {squaresNew} );\n        // добавить в локальный массив historyNew2 данные из основного массива history и новый массив squaresNew\n\n        setHistory( historyNew2 )\n    };\n\n    const newGame = () => { // нажатие кнопки \"новая игра\"\n        setXisNext( xIsNextInitialState ) // начальное значение кто ходит\n        setHistory( historyInitialState )// начальное значение массива истории\n    }\n\n    const currentStep = history.length - 1; // текущий ход в массиве ходов (-1 поскольку счет идет с 0)\n    const squaresNew = history[currentStep].squaresNew.slice(); // делаем копию текущего массива\n    return (\n        <div>\n            <h2 className={commonClasses.pageHeader}>Крестики нолики</h2>\n            <div className={commonClasses.center}>\n                <Board\n                    squares={squaresNew} // пропсами передаем вглубь текущий массив клеток\n                    xIsNext={xIsNext} // статус кто ходит\n                    handleSquare={handleSquare} // обработчик кликов\n                    history={history}\n                />\n\n            </div>\n            <div className={commonClasses.center}>\n                <Button className=\"new-game-button\" onClick={newGame}>Начать заново</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default KrestikiNoliki;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"pageHeader\":\"common_pageHeader__q6GZ3\",\"center\":\"common_center__il3qC\",\"textMaxWidthCommon\":\"common_textMaxWidthCommon__Sc3Hi\",\"textMaxWidthShort\":\"common_textMaxWidthShort__X1+BN\",\"textMaxWidth18rem\":\"common_textMaxWidth18rem__Vv4xN\",\"minwidth\":\"common_minwidth__MMj4g\",\"cursorPointer\":\"common_cursorPointer__nfAEV\",\"toCenter\":\"common_toCenter__rOaC2\"};"],"names":["Square","_ref","value","handleSquare","i","_jsxs","className","onClick","children","historyInitialState","squaresNew","Array","fill","Board","_ref2","status","squares","xIsNext","history","renderSquare","_jsx","winner","calculateWinner","length","lines","n","_lines$n","_slicedToArray","a","b","c","_useState","useState","_useState2","setHistory","_useState3","_useState4","setXisNext","currentStep","slice","commonClasses","historyNew2","concat","Button"],"sourceRoot":""}