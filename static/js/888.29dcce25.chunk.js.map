{"version":3,"file":"static/js/888.29dcce25.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Photo/photo.module.css?7058","components/Profile/Photo/PhotoRender.tsx","components/Profile/Photo/PhotoContainer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/EditProfile/EditProfile.module.css?6ed4","components/Profile/ProfileInfo/EditProfile/EditProfileFormikBS.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ShowProfile.tsx","components/Profile/ProfileInfo/ProfileInfoBS.tsx","components/Profile/ProfileInfo/ProfileInfoContainer.tsx","components/Profile/Status/ProfileStatus/ProfileStatusUseState.tsx","components/Profile/Status/StatusContainer.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/PostItem.tsx","components/Profile/MyPosts/MyPosts/MyPostsInput.tsx","components/Profile/MyPosts/MyPostsBS.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileContainerFC.tsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx","../node_modules/react-bootstrap/esm/Row.js","webpack://my-app/./src/components/common/CommonClasses/common.module.css?ffe7"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profilePhotoIMG\":\"photo_profilePhotoIMG__mxxH2\",\"FileUploadInt\":\"photo_FileUploadInt__yz31V\"};","import React, {ChangeEvent} from \"react\";\nimport classes from \"./photo.module.css\";\nimport classesCommon from \"../../common/CommonClasses/common.module.css\"\nimport Image from \"react-bootstrap/Image\";\nimport Form from \"react-bootstrap/Form\";\n\ntype PhotoRenderType = {\n    photo: string,\n    isMyProfile: boolean\n    onChangeLocal: (e: ChangeEvent<HTMLInputElement>) => void\n}\nconst PhotoRender: React.FC<PhotoRenderType> = ({photo, isMyProfile, onChangeLocal}) => {\n    //console.log('PhotoRender')\n    return <div>\n        <div className={classesCommon.toCenter}>\n            <Image fluid={true}\n                   alt={\"userPhoto\"}\n                   className={`${classes.profilePhotoIMG} `}\n                   src={photo}/>\n        </div>\n\n        {isMyProfile && // если мы перешли на свой профиль\n        <div >\n            <Form.Control type=\"file\" onChange={onChangeLocal} className={classes.FileUploadInt}/>\n        </div>}\n    </div>\n}\nexport default PhotoRender\n","import React, {ChangeEvent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setprofilePhotoThunkCreator} from \"../../../redux/profile-reducer\";\nimport {NulableType} from \"../../common/types/commonTypes\";\nimport {GetProfileType} from \"../../api/apiTypes\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport PhotoRender from \"./PhotoRender\";\nimport userPhoto1 from \"../../../assets/images/no-image3.png\";\n\nconst PhotoContainer: React.FC = () => {\n  //  console.log(\"PhotoContainer\")\n    const dispatch = useDispatch()\n    const profile: NulableType<GetProfileType> = useSelector( (state: GlobalStateType) => state.profilePage.profile )\n    const myId: number | undefined = useSelector( (state: GlobalStateType) => state.auth.myId ) // мой id\n\n    const onChangeLocal = (e: ChangeEvent<HTMLInputElement>) => {\n        e.target && e.target.files && e.target.files.length > 0 &&\n        dispatch( setprofilePhotoThunkCreator( e.target.files[0] ) )// загрузка файла картинки на сервер\n    }\n    const photo = profile?.photos?.large\n            ? profile.photos.large\n            : userPhoto1\n\n    const isMyProfile: boolean = profile?.userId === myId\n    return <div>\n        {profile?.userId && <PhotoRender\n            photo={photo}\n            isMyProfile={isMyProfile}\n            onChangeLocal={onChangeLocal}\n        />}\n    </div>\n}\nexport default PhotoContainer\n","// extracted by mini-css-extract-plugin\nexport default {\"HeaderEditProfileForm\":\"EditProfile_HeaderEditProfileForm__+ggeL\",\"EditProfile\":\"EditProfile_EditProfile__KCw4z\",\"EditProfileContactsFields\":\"EditProfile_EditProfileContactsFields__9QV1r\",\"errorText\":\"EditProfile_errorText__piK3h\"};","import React from \"react\";\r\nimport {Formik, Form, FormikHelpers} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\r\nimport classes from './EditProfile.module.css'\r\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\r\nimport {MyCheckbox, MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {NulableType, ProfileType} from \"../../../common/types/commonTypes\";\r\nimport {GetProfileType} from \"../../../api/apiTypes\";\r\n\r\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\r\n})\r\n\r\ntype EditProfileFormikType = {\r\n    putProfile: (putProfile2: ProfileType) =>void,\r\n    setEditMode: (editMode: boolean)=> void\r\n    profile: NulableType<GetProfileType>,\r\n    editProfileStatus:Array<string>,\r\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\r\n\r\n}\r\nconst EditProfileFormik:React.FC<EditProfileFormikType> = (\r\n    {putProfile, setEditMode, profile, editProfileStatus, setEditProfileStatus}\r\n    ) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\r\n\r\n    const myInitialValues = { // начальные зачения форм\r\n        FullName: profile?.fullName,\r\n        AboutMe: profile?.aboutMe,\r\n        LookingForAJob: profile?.lookingForAJob,\r\n        LookingForAJobDescription: profile?.lookingForAJobDescription,\r\n        contacts: profile?.contacts, // остальные данные с контактов профиля\r\n    }\r\n\r\n    const myOnSubmit = (values:ProfileType, {resetForm}:FormikHelpers<{}>) => { // действия по сабмиту\r\n        putProfile(values) // колбек, который принимает результат ввода формы\r\n        resetForm()// сбросить значение формы после ввода\r\n\r\n    }\r\n\r\n    return (\r\n        React.createElement(Formik, {\r\n            initialValues: myInitialValues, // начальные значения форм\r\n            validationSchema: myValidationSchema, // схема валидации\r\n            // @ts-ignore\r\n            onSubmit: myOnSubmit // действия по сабмиту\r\n        }, ({\r\n                // @ts-ignore\r\n                handleReset,// обнуление полей\r\n            }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\r\n        React.createElement(Form, {className: classes.MyPosts},\r\n\r\n            React.createElement('div', {},\r\n                React.createElement('div', //Редактирование профиля\r\n                        {className: classes.HeaderEditProfileForm},\r\n                        'Редактирование профиля'\r\n                    ),\r\n                React.createElement(MyTextInput, //Полное имя:\r\n                        {\r\n                            label: \"Имя\",\r\n                            autoFocus: false,\r\n                            name: 'FullName',\r\n                            type: 'text',\r\n                            placeholder: 'Имя',\r\n                            leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\r\n                        }\r\n                    ),\r\n\r\n                React.createElement(MyTextInput,//Обо мне\r\n                        {label: \"Обо мне\", autoFocus: false, name: 'AboutMe', type: 'text', placeholder: 'Обо мне', leftLabelLength: \"5rem\"}, // слева в input появляется label указанной длины\r\n                    ),\r\n\r\n                // @ts-ignore\r\n                React.createElement(MyCheckbox, {name: 'LookingForAJob'}, //чекбокс ищу работу\r\n                        \"в поисках работы\"\r\n                    ),\r\n\r\n                React.createElement(MyTextInput, { //Описание поиска работы\r\n                            label: \"Описание\", autoFocus: false, name: 'LookingForAJobDescription',\r\n                            type: 'textarea', placeholder: 'Описание', leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\r\n                        }\r\n                    ),\r\n\r\n                React.createElement('h4', {},// вывод всех полей подобъекта контакты\r\n                        \"Контакты:\"\r\n                    ),\r\n\r\n                React.createElement('div', {className: classes.EditProfileContactsFields},\r\n                    profile?.contacts && Object.keys(profile?.contacts).map((c) => { // вывод списка контактов, мапим\r\n                            return React.createElement('div', {key: c},\r\n                                React.createElement(\r\n                                    MyTextInput,\r\n                                    {\r\n                                        label: c,\r\n                                        autoFocus: false,\r\n                                        name: 'contacts[' + c + ']',\r\n                                        type: 'text',\r\n                                        placeholder: c,\r\n                                        leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\r\n                                    },\r\n                                ),\r\n                                React.createElement('div', {}, //ошибки редактирования профиля с сервера\r\n                                    editProfileStatus.map(err => {// прогоняем весь массив ошибок с сервера на обновление профиля\r\n                                        if (err.toLowerCase().includes(c.toLowerCase())) { // если имя отрисовываемого поля \"с\" соджержится в сообщении об ошибке\r\n                                            return React.createElement('div', {key: err, className: classes.errorText}, err )// выводим сообщение об ошибке рядом с полем\r\n                                        }\r\n                                        return null\r\n                                    })\r\n                                ),\r\n                            )\r\n                        })\r\n                    ),\r\n                React.createElement('br'), //перенос строки\r\n\r\n                    //кнопка сброса к значениям по умолчанию\r\n                React.createElement(Button, {\r\n                        type: 'button',\r\n                        variant: \"warning\",\r\n                        onClick: () => { // при клике по кнопке сброс\r\n                            handleReset();// занулить поля ввода по умолчанию\r\n                            setEditProfileStatus([]); // сбросить сообщение об ошибке с сервера\r\n                        }\r\n                    }, 'Сброс'),\r\n\r\n                    \" \", //отступ между кнопками\r\n\r\n                    //кнопка отправить форму\r\n                React.createElement(Button, {type: 'submit'}, 'Применить'),\r\n\r\n                    \" \", //отступ между кнопками\r\n\r\n                    //отмена\r\n                React.createElement(Button, {\r\n                        variant: \"secondary\",\r\n                        onClick: () => { // при клике по кнопке отмена\r\n                            setEditMode(false)// переключиться с режима редактирования профиля на просмотр\r\n                            setEditProfileStatus([]) // сбросить сообщение об ошибке с сервера\r\n                        }\r\n                    }, 'Отмена'),\r\n                )\r\n            )\r\n        ))\r\n    )\r\n}\r\n\r\nexport default EditProfileFormik\r\n\r\n","import React from \"react\";\r\n\r\ntype ContactType = {\r\n    key1:string,\r\n    Value:string\r\n}\r\nconst Contact:React.FC<ContactType> = ({key1, Value}) => { /*простая функция вывода отдельного элемента contacts из profile*/\r\n    return <div >\r\n        <b>{key1}: </b > <span title={Value}>{Value}</span>\r\n    </div>\r\n}\r\nexport default Contact\r\n","import {GetProfileType} from \"../../api/apiTypes\";\r\nimport React, {memo} from \"react\";\r\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Contact from \"./Contact\";\r\nimport {NulableType} from \"../../common/types/commonTypes\";\r\n\r\ntype ShowProfileType = {\r\n    profile:  NulableType<GetProfileType>,\r\n    setEditMode: (editMode: boolean )=> void,\r\n    isMyProfile: boolean\r\n}\r\n\r\nconst ShowProfile: React.FC<ShowProfileType> =memo( ({profile, setEditMode, isMyProfile}) => {\r\n    // вынес отдельно отображение профиля\r\n\r\n\r\n    return (<div\r\n            className={`${commonClasses.textMaxWidthCommon} `}> {/*${commonClasses.textMaxWidth18rem}*/}\r\n\r\n            <h3 title={profile?.fullName}>{profile?.fullName}</h3>\r\n            <div ><b>Обо мне</b>: <span title={profile?.aboutMe}> {profile?.aboutMe}</span></div>\r\n            <div><b>В поиске работы?</b> <span title={profile?.lookingForAJob ? \"Да\" : \"Нет\"}>{profile?.lookingForAJob ? \"Да\" : \"Нет\"}</span></div>\r\n            <div ><b>Описание:</b> <span title={profile?.lookingForAJobDescription}>{profile?.lookingForAJobDescription}</span></div>\r\n            <div><b>userId:</b> <span title={profile?.userId.toString()}>{profile?.userId}</span> </div>\r\n\r\n            <ul>\r\n                {profile && Object.keys(profile.contacts).map((key1, ind) => { // ключи contacts\r\n                    const Value:string = Object.values(profile.contacts)[ind] // значения contacts\r\n                    return (<li key={key1}>\r\n                            <Contact key1={key1} Value={Value} /> {/*вывод ключ + значение*/}\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n            {isMyProfile && <Button onClick={() => {\r\n                setEditMode(true)\r\n            }}>Редактировать профиль </Button>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ShowProfile\r\n","import React, {memo, useEffect, useState} from 'react';\nimport EditProfileFormikBS from \"./EditProfile/EditProfileFormikBS\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\nimport {GetProfileType} from \"../../api/apiTypes\";\nimport {NulableType, ProfileType} from \"../../common/types/commonTypes\";\nimport ShowProfile from \"./ShowProfile\";\n\ntype ProfileInfoType2 = {\n    profile: NulableType<GetProfileType>,\n    isMyProfile: boolean\n    putProfile: (putProfile2: ProfileType) => void,\n    editProfileStatus: Array<string>,\n    isProfileEditedSuccesssfully: boolean\n    setEditProfileStatus: (editProfileStatus: Array<string>) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoType2> = memo( (\n    {profile, isMyProfile, putProfile, editProfileStatus, setEditProfileStatus, isProfileEditedSuccesssfully}) => {\n\n    //console.log( \"ProfileInfo\" )\n\n    const [editMode, setEditMode] = useState<boolean>( false ) // флаг режима редактирования профиля\n\n    useEffect( () => {\n        if (isProfileEditedSuccesssfully) { // если успешно обновлен профиль на сервере\n            setEditMode( false ) // закрыть режим редактирования профиля\n            // желательно здесь сделать прокрутку до верха профиля\n            setTimeout( () => {\n                setEditProfileStatus( [] ) // убирание сообщения ответа от сервера по таймеру\n            }, 2000 )\n        }\n    }, [editProfileStatus, isProfileEditedSuccesssfully, setEditProfileStatus] ) // переключение режима редактирования зависит от ответа с сервера\n\n\n    const showProfile = <ShowProfile profile={profile} setEditMode={setEditMode} isMyProfile={isMyProfile}/>\n\n    const editProfile = <EditProfileFormikBS\n        putProfile={putProfile} setEditMode={setEditMode} profile={profile}\n        editProfileStatus={editProfileStatus} setEditProfileStatus={setEditProfileStatus}\n    />\n\n    return <div>\n        <h2 className={commonClasses.pageHeader}>Profile</h2> {/*Заголовок*/}\n\n        {!editMode && showProfile} {/*показать профиль*/}\n\n        {editMode && editProfile} {/*редактировать профиль*/}\n    </div>\n} )\nexport default ProfileInfo;\n","import ProfileInfo from \"./ProfileInfoBS\";\nimport React from \"react\";\nimport {NotifyType, NulableType, ProfileType} from \"../../common/types/commonTypes\";\nimport {GetProfileType} from \"../../api/apiTypes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport {profileActions, putMyProfileThunkCreator} from \"../../../redux/profile-reducer\";\n\nconst ProfileInfoContainer = () => {\n   // console.log( \"ProfileInfoContainer\" )\n\n    const {setEditProfileStatus} = profileActions\n    const dispatch = useDispatch()\n\n    const profile: NulableType<GetProfileType> = useSelector( (state: GlobalStateType) => state.profilePage.profile )\n    const myId: number = useSelector( (state: GlobalStateType) => state.auth.myId )\n    const userId: number | undefined = useSelector( (state: GlobalStateType) => state.profilePage?.profile?.userId ) // id пользователя\n    const editProfileStatus: Array<string> = useSelector( (state: GlobalStateType) => state.profilePage.editProfileStatus )\n    const notify: Array<NotifyType> = useSelector( (state: GlobalStateType) => state.app.notify ) // массив уведомлений\n\n    const putProfile = (putProfile2: ProfileType) => { // обновить данные профиля просле правки\n        // добавить в данные после изменения формы мой ID для чтения результата обновления с сервера\n        const MyProfile = Object.assign( {}, {userId: myId}, putProfile2 );\n        dispatch( putMyProfileThunkCreator( MyProfile ) )// обновить данные профиля просле правки\n    }\n\n    const isMyProfile: boolean = userId === myId\n\n    let isProfileEditedSuccesssfully: boolean = false\n    notify.forEach( (item: NotifyType) => {\n            if (item.message === \"Edited successfully!\") {\n                isProfileEditedSuccesssfully = true\n            }\n        }\n    )\n    return <ProfileInfo // Отображение данных выбранного пользователя\n        profile={profile} // профиль выбранного пользователя\n        isMyProfile={isMyProfile} // id выбранного пользователя, берется из URL\n        putProfile={putProfile}\n        editProfileStatus={editProfileStatus} // список ошибок правки формы профиля с сервера\n        setEditProfileStatus={setEditProfileStatus}\n        isProfileEditedSuccesssfully={isProfileEditedSuccesssfully}\n    />\n}\nexport default ProfileInfoContainer\n","import React, {ChangeEvent, useState} from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\n\ntype ProfileStatusUseStateType = {\n    myId: number, // мой id для модификации статуса\n    userId: number | undefined, // id отображаемого пользователя\n    status: string, // статус из BLL\n    putStatusThunkCreator: (statusTmpInput: string) => void, // санкреатор для обновления сатуса\n}\n\nconst ProfileStatusUseState: React.FC<ProfileStatusUseStateType> = ({userId, myId, status, putStatusThunkCreator}) => {\n    const [modifyStatus, setModifyStatus] = useState<boolean>( false ) // локальная переменная-флаг модификации статуса\n    const [statusTmpInput, setStatusTmpInput] = useState<string>( \"\" ) // локальный статус до отправки на сервер (поле input)\n\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\n        if (userId === myId) { // если ID открытого пользователя равен моему\n            setModifyStatus( true )// смена текстового отображения статуса на поле input\n            setStatusTmpInput( status )// временное значение статуса на время ввода поля input. Изначально берем из статуса BLL\n        }\n    }\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\n        setModifyStatus( false ) // переключение с поля ввода статуса на простой текст\n        putStatusThunkCreator( statusTmpInput )\n    }\n    const onChangeStatus = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const text = event.currentTarget.value;// вынимаем значение введенное в поле ввода input\n        setStatusTmpInput( text );// присваиваем переменной временного статуса из локального стейта введенное значение в поле\n    }\n\n    const checkEnterPressed = (event: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (event.charCode === 13) {\n            setMyStatus()//задание статуса при нажатии Enter\n        }\n    }\n\n    return <InputGroup className=\"my-3\" onClick={checkIfICanModifyStatus}>\n        <InputGroup.Text id=\"basic-addon1\">Статус:</InputGroup.Text> {/* текст слева от поля*/}\n        <Form.Control\n            value={!modifyStatus ? status : statusTmpInput} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\n            title={!modifyStatus ? \"Клик для - правки\" : \"Клик/смена фокуса/enter - для сохранения\"}\n            onChange={onChangeStatus} // задание временного локального статуса\n            autoFocus={true}\n            onBlur={setMyStatus}// задание стейта при потере фокуса input\n            placeholder={!modifyStatus ? \"нет статуса\" : \"задайте статус\"}// текст при пустом поле ввода\n            onKeyPress={checkEnterPressed} // проверка нажатия Enter\n            disabled={!modifyStatus ? true : false}\n        />\n    </InputGroup>\n}\n\nexport default ProfileStatusUseState\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport {putStatusThunkCreator} from \"../../../redux/profile-reducer\";\nimport ProfileStatusUseState from \"./ProfileStatus/ProfileStatusUseState\";\n\nconst StatusContainer:React.FC = () => {\n   // console.log(\"StatusContainer\")\n    const dispatch = useDispatch()\n    const myId: number = useSelector( (state: GlobalStateType) => state.auth.myId ) // мой id\n    const userId: number | undefined = useSelector( (state: GlobalStateType) => state.profilePage.profile?.userId ) // id пользователя\n    const status: string = useSelector( (state: GlobalStateType) => state.profilePage.status )//текущий статус\n    const putStatusThunkCreatorLocal = (status: string) => {\n        dispatch( putStatusThunkCreator( status ) ) // обновление статуса\n    }\n\n    return <div>\n        <ProfileStatusUseState // можно еще использовать ProfileStatusUseState и ProfileStatusClass\n            myId={myId} // мой id для модификации статуса\n            userId={userId} // id отображаемого пользователя\n            status={status} // статус из BLL\n            putStatusThunkCreator={putStatusThunkCreatorLocal} // санкреатор для обновления сатуса\n        />\n    </div>\n}\nexport default StatusContainer\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__v8PmM\",\"postsBlock\":\"MyPosts_postsBlock__Vokae\",\"newPostFormTextArea\":\"MyPosts_newPostFormTextArea__Ehj-D\",\"legendStyle\":\"MyPosts_legendStyle__kuSLI\",\"content\":\"MyPosts_content__lZSb5\",\"item\":\"MyPosts_item__No0HI\"};","import React from 'react';\nimport classes from './MyPosts.module.css' // css обработка\n\ntype PostType = {\n    message:string, like: number\n}\nconst PostItem: React.FC<PostType> = ({message, like}) => {\n    return (\n        <div className={classes.item}>\n            <img alt={\"Мистер бин на прогулке\"}\n                 src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\n            {message}\n            <div>\n                <span>Like {like}</span>\n            </div>\n        </div>\n    )\n}\nexport default PostItem;\n","import React, {useState} from \"react\";\nimport {InputGroup, Form} from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n\ntype MyPostsInputType = {\n    addPost: any\n}\n\nconst MyPostsInput:React.FC<MyPostsInputType> = ({addPost}) => {\n    const [inputOnChange, setInputOnchange] = useState<string>(\"\")\n    const checkEnterPressed = (event: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (event.charCode === 13) {\n            inputOnChange && addPost(inputOnChange)//отправка поста при нажатии Enter\n            setInputOnchange(\"\") // зануление поля\n\n        }\n    }\n    return <div>\n        <InputGroup>\n            <Form.Control\n                value={inputOnChange}\n                onChange={(e)=>setInputOnchange(e.target.value)}\n                placeholder={\"введите сообщение...\"}\n                onKeyPress={checkEnterPressed} // проверка нажатия Enter\n            />\n            <Button\n                disabled={!inputOnChange}\n                onClick={()=>{\n                    inputOnChange && addPost(inputOnChange)\n                    setInputOnchange(\"\")// зануление поля\n                }}\n            > {/*кнопка отправить форму*/}\n                Submit\n            </Button>\n            <Button\n                disabled={!inputOnChange}\n                variant=\"warning\"\n                type='button'\n                onClick={()=>setInputOnchange(\"\")}\n            >Reset\n            </Button>\n        </InputGroup>\n    </div>\n}\nexport default MyPostsInput\n","import React from 'react'; // импорт реакта\nimport classes from './MyPosts.module.css' // css обработка\nimport PostItem from \"./PostItem\"; // подкомпонента отрисовки постов через map\nimport Container from \"react-bootstrap/Container\";\nimport {PostsType} from \"../../common/types/commonTypes\";\nimport MyPostsInput from \"./MyPosts/MyPostsInput\"; // reduxForm для ввода новых постов\n\ntype MyPostsBSType = {\n    posts: Array<PostsType>,\n    addPost: (newPostData: string) => void\n}\nconst MyPostsBS: React.FC<MyPostsBSType> = ({posts, addPost}) => { // основная компонента отрисовки постов\n\n    return <Container>\n        <div className={classes.legendStyle}>Мои посты</div>\n        <MyPostsInput //вызов формы постов с отсылкой на локальный обработчик сабмита\n            addPost={addPost}/>\n        <div className={classes.posts}>\n            {posts.map( (p, ind) => // подкомпонента отрисовки всех постов через map\n                <PostItem key={ind} message={p.message} like={p.like}/> )} {/*отрисовка постов*/}\n        </div>\n    </Container>\n}\nexport default MyPostsBS;\n","import MyPostsBS from \"./MyPostsBS\";\nimport {profileActions} from \"../../../redux/profile-reducer\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {PostsType} from \"../../common/types/commonTypes\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\n\nconst {addPostActionCreator} = profileActions\n\nconst MyPostsContainer: React.FC = () => {\n\n    //console.log( \"MyPostsContainer\" )\n\n    const dispatch = useDispatch()\n\n    const posts: Array<PostsType> = useSelector( (state: GlobalStateType) => state.profilePage.posts )\n\n    type AddPostType = (newPostData: string) => void\n    const addPost: AddPostType = (newPostData: string) => {\n        dispatch( addPostActionCreator( newPostData ) ) // добавить пост с новыми данными\n    }\n    return <MyPostsBS posts={posts} addPost={addPost}/>\n}\n\nexport default MyPostsContainer\n\n\n\n","import {compose} from \"redux\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getProfileThunkCreator,\r\n} from \"../../redux/profile-reducer\";\r\nimport withRouter2 from \"../hoc/withRouter2\";\r\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\r\nimport React, {useEffect, useMemo} from \"react\";\r\nimport PhotoContainer from \"./Photo/PhotoContainer\";\r\nimport ProfileInfoContainer from \"./ProfileInfo/ProfileInfoContainer\";\r\nimport StatusContainer from \"./Status/StatusContainer\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {Col, Row} from \"react-bootstrap\";\r\nimport {GlobalStateType} from \"../../redux/store-redux\";\r\nimport {NulableType} from \"../common/types/commonTypes\";\r\nimport {GetProfileType} from \"../api/apiTypes\";\r\n\r\ntype OwnPropsType = {\r\n    userId: number // id пользователя из withRouter\r\n}\r\n\r\nconst ProfileContainerFC: React.FC<OwnPropsType> = ({userId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const profile: NulableType<GetProfileType> = useSelector( (state: GlobalStateType) => state.profilePage.profile )\r\n\r\n    useEffect( () => {\r\n        if (userId !== profile?.userId)\r\n        dispatch( getProfileThunkCreator( userId ) );// обновить профиль в зависомости от ID\r\n    }, [userId, dispatch] )\r\n\r\n    const isMyPrifile: boolean = userId === 0 //это мой аккаунт в профиле? (пустой userId в URL на моем аккаунте)\r\n\r\n    const myPostsRender = useMemo( () => <MyPostsContainer/>, [] )\r\n\r\n    const photoContainer = useMemo( () => <PhotoContainer/>, [] )\r\n\r\n    const profileInfoContainer = useMemo( () => <ProfileInfoContainer/>, [] )\r\n\r\n    const statusContainer = useMemo( () => <StatusContainer/>, [] )\r\n\r\n    return <div>\r\n        { (userId === profile?.userId // отрисовать профиль если профиль пользователя загружен\r\n        || userId === 0) // или это мой профиль\r\n\r\n        && <div>\r\n            <Row>\r\n                <Col lg={6} md={6} sm={12}>\r\n                    {photoContainer} {/*Отрисовка фото выбранного профиля с возможностью редактирования на моей странице*/}\r\n                </Col>\r\n                <Col lg={6} md={6} sm={12}>\r\n                    {profileInfoContainer} {/*Отрисовка данных выбранного профиля и возможность редактировать свой профиль*/}\r\n                </Col>\r\n            </Row>\r\n\r\n            {statusContainer}{/* отобразить статус*/}\r\n\r\n            {isMyPrifile && myPostsRender} {/* для моего аккаункт отобразить мои посты*/}\r\n        </div>}\r\n\r\n    </div>\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\r\n    NavigateToLoginHoc2// проверка, залогинен ли я\r\n)( ProfileContainerFC )\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nconst NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nconst withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","// extracted by mini-css-extract-plugin\nexport default {\"pageHeader\":\"common_pageHeader__q6GZ3\",\"center\":\"common_center__il3qC\",\"textMaxWidthCommon\":\"common_textMaxWidthCommon__Sc3Hi\",\"textMaxWidthShort\":\"common_textMaxWidthShort__X1+BN\",\"textMaxWidth18rem\":\"common_textMaxWidth18rem__Vv4xN\",\"minwidth\":\"common_minwidth__MMj4g\",\"cursorPointer\":\"common_cursorPointer__nfAEV\",\"toCenter\":\"common_toCenter__rOaC2\"};"],"names":["_ref","photo","isMyProfile","onChangeLocal","_jsxs","children","_jsx","className","classesCommon","Image","fluid","alt","concat","classes","src","Form","type","onChange","_profile$photos","dispatch","useDispatch","profile","useSelector","state","profilePage","myId","auth","photos","large","userPhoto1","userId","PhotoRender","e","target","files","length","setprofilePhotoThunkCreator","myValidationSchema","Yup","putProfile","setEditMode","editProfileStatus","setEditProfileStatus","myInitialValues","FullName","fullName","AboutMe","aboutMe","LookingForAJob","lookingForAJob","LookingForAJobDescription","lookingForAJobDescription","contacts","React","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","MyTextInput","label","autoFocus","name","placeholder","leftLabelLength","MyCheckbox","Object","keys","map","c","key","err","toLowerCase","includes","Button","variant","onClick","key1","Value","title","memo","commonClasses","toString","ind","Contact","isProfileEditedSuccesssfully","_useState","useState","_useState2","_slicedToArray","editMode","useEffect","setTimeout","showProfile","ShowProfile","editProfile","EditProfileFormikBS","profileActions","_state$profilePage","_state$profilePage$pr","notify","app","forEach","item","message","ProfileInfo","putProfile2","MyProfile","assign","putMyProfileThunkCreator","status","putStatusThunkCreator","modifyStatus","setModifyStatus","_useState3","_useState4","statusTmpInput","setStatusTmpInput","setMyStatus","InputGroup","id","value","event","text","currentTarget","onBlur","onKeyPress","charCode","disabled","ProfileStatusUseState","like","addPost","inputOnChange","setInputOnchange","posts","Container","MyPostsInput","p","PostItem","addPostActionCreator","MyPostsBS","newPostData","compose","withRouter2","NavigateToLoginHoc2","getProfileThunkCreator","isMyPrifile","myPostsRender","useMemo","MyPostsContainer","photoContainer","PhotoContainer","profileInfoContainer","ProfileInfoContainer","statusContainer","StatusContainer","Row","Col","lg","md","sm","mapStateToProps","isAuth","Component","connect","props","_objectSpread","Navigate","to","Children","aaa","params","useParams","Number","ref","bsPrefix","_ref$as","as","_objectWithoutProperties","_excluded","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","brkPoint","cols","propValue","infix","push","classNames","displayName"],"sourceRoot":""}