{"version":3,"file":"static/js/888.5523ab5a.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Photo/photo.module.css?7058","components/Profile/Photo/PhotoRender.tsx","components/Profile/Photo/PhotoContainer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/EditProfile/EditProfile.module.css?6ed4","components/Profile/ProfileInfo/EditProfile/EditProfileFormikBS.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ShowProfile.tsx","components/Profile/ProfileInfo/ProfileInfoBS.tsx","components/Profile/ProfileInfo/ProfileInfoContainer.tsx","components/Profile/Status/ProfileStatus/ProfileStatusUseState.tsx","components/Profile/Status/StatusContainer.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/PostItem.tsx","components/Profile/MyPosts/MyPosts/MyPostsInput.tsx","components/Profile/MyPosts/MyPostsBS.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileContainerFC.tsx","components/hoc/NavigateToLoginHoc2.jsx","components/hoc/withRouter2.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profilePhotoIMG\":\"photo_profilePhotoIMG__mxxH2\",\"FileUploadInt\":\"photo_FileUploadInt__yz31V\"};","import React, {ChangeEvent} from \"react\";\nimport classes from \"./photo.module.css\";\nimport classesCommon from \"../../common/CommonClasses/common.module.css\"\nimport Image from \"react-bootstrap/Image\";\nimport Form from \"react-bootstrap/Form\";\n\ntype PhotoRenderType = {\n    photo: string,\n    isMyProfile: boolean\n    onChangeLocal: (e: ChangeEvent<HTMLInputElement>) => void\n}\nconst PhotoRender: React.FC<PhotoRenderType> = ({photo, isMyProfile, onChangeLocal}) => {\n    return <div>\n        <div className={classesCommon.toCenter}>\n            <Image fluid={true}\n                   alt={\"userPhoto\"}\n                   className={`${classes.profilePhotoIMG} `}\n                   src={photo}/>\n        </div>\n\n        {isMyProfile && // если мы перешли на свой профиль\n        <div >\n            <Form.Control type=\"file\" onChange={onChangeLocal} className={classes.FileUploadInt}/>\n        </div>}\n    </div>\n}\nexport default PhotoRender\n","import React, {ChangeEvent} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setprofilePhotoThunkCreator} from \"../../../redux/profile-reducer\";\nimport {NulableType} from \"../../common/types/commonTypes\";\nimport {GetProfileType} from \"../../api/apiTypes\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport PhotoRender from \"./PhotoRender\";\nimport userPhoto1 from \"../../../assets/images/no-image3.png\";\n\n\nconst PhotoContainer: React.FC = () => {\n    console.log(\"PhotoContainer\")\n    const dispatch = useDispatch()\n    const profile: NulableType<GetProfileType> = useSelector( (state: GlobalStateType) => state.profilePage.profile )\n    const userId: number | undefined = useSelector( (state: GlobalStateType) => state.profilePage.profile?.userId ) // id пользователя\n    const myId: number | undefined = useSelector( (state: GlobalStateType) => state.auth.myId ) // мой id\n\n    const onChangeLocal = (e: ChangeEvent<HTMLInputElement>) => {\n        e.target && e.target.files && e.target.files.length > 0 &&\n        dispatch( setprofilePhotoThunkCreator( e.target.files[0] ) )// загрузка файла картинки на сервер\n    }\n    const photo = profile?.photos?.large\n            ? profile.photos.large\n            : userPhoto1\n\n    const isMyProfile: boolean = userId === myId\n    return <PhotoRender\n        photo={photo}\n        isMyProfile={isMyProfile}\n        onChangeLocal={onChangeLocal}\n    />\n}\nexport default PhotoContainer\n","// extracted by mini-css-extract-plugin\nexport default {\"HeaderEditProfileForm\":\"EditProfile_HeaderEditProfileForm__+ggeL\",\"EditProfile\":\"EditProfile_EditProfile__KCw4z\",\"EditProfileContactsFields\":\"EditProfile_EditProfileContactsFields__9QV1r\",\"errorText\":\"EditProfile_errorText__piK3h\"};","import React from \"react\";\r\nimport {Formik, Form, FormikHelpers} from \"formik\"; //формик с компонентами и пользовательским хуком\r\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\r\nimport classes from './EditProfile.module.css'\r\n//import DisplayFormikState from \"../../../common/formikCommon/DisplayFormikState\"\r\nimport {MyCheckbox, MyTextInput} from \"../../../common/formikCommon/MyFieldsBS\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {NulableType, ProfileType} from \"../../../common/types/commonTypes\";\r\nimport {GetProfileType} from \"../../../api/apiTypes\";\r\n\r\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\r\n})\r\n\r\ntype EditProfileFormikType = {\r\n    putProfile: (putProfile2: ProfileType) =>void,\r\n    setEditMode: (editMode: boolean)=> void\r\n    profile: NulableType<GetProfileType>,\r\n    editProfileStatus:Array<string>,\r\n    setEditProfileStatus: (editProfileStatus: Array<string>)=> void\r\n\r\n}\r\nconst EditProfileFormik:React.FC<EditProfileFormikType> = (\r\n    {putProfile, setEditMode, profile, editProfileStatus, setEditProfileStatus}\r\n    ) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\r\n\r\n    const myInitialValues = { // начальные зачения форм\r\n        FullName: profile?.fullName,\r\n        AboutMe: profile?.aboutMe,\r\n        LookingForAJob: profile?.lookingForAJob,\r\n        LookingForAJobDescription: profile?.lookingForAJobDescription,\r\n        contacts: profile?.contacts, // остальные данные с контактов профиля\r\n    }\r\n\r\n    const myOnSubmit = (values:ProfileType, {resetForm}:FormikHelpers<{}>) => { // действия по сабмиту\r\n        putProfile(values) // колбек, который принимает результат ввода формы\r\n        resetForm()// сбросить значение формы после ввода\r\n\r\n    }\r\n\r\n    return (\r\n        React.createElement(Formik, {\r\n            initialValues: myInitialValues, // начальные значения форм\r\n            validationSchema: myValidationSchema, // схема валидации\r\n            // @ts-ignore\r\n            onSubmit: myOnSubmit // действия по сабмиту\r\n        }, ({\r\n                // @ts-ignore\r\n                handleReset,// обнуление полей\r\n            }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\r\n        React.createElement(Form, {className: classes.MyPosts},\r\n\r\n            React.createElement('div', {},\r\n                React.createElement('div', //Редактирование профиля\r\n                        {className: classes.HeaderEditProfileForm},\r\n                        'Редактирование профиля'\r\n                    ),\r\n                React.createElement(MyTextInput, //Полное имя:\r\n                        {\r\n                            label: \"Имя\",\r\n                            autoFocus: false,\r\n                            name: 'FullName',\r\n                            type: 'text',\r\n                            placeholder: 'Имя',\r\n                            leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\r\n                        }\r\n                    ),\r\n\r\n                React.createElement(MyTextInput,//Обо мне\r\n                        {label: \"Обо мне\", autoFocus: false, name: 'AboutMe', type: 'text', placeholder: 'Обо мне', leftLabelLength: \"5rem\"}, // слева в input появляется label указанной длины\r\n                    ),\r\n\r\n                // @ts-ignore\r\n                React.createElement(MyCheckbox, {name: 'LookingForAJob'}, //чекбокс ищу работу\r\n                        \"в поисках работы\"\r\n                    ),\r\n\r\n                React.createElement(MyTextInput, { //Описание поиска работы\r\n                            label: \"Описание\", autoFocus: false, name: 'LookingForAJobDescription',\r\n                            type: 'textarea', placeholder: 'Описание', leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\r\n                        }\r\n                    ),\r\n\r\n                React.createElement('h4', {},// вывод всех полей подобъекта контакты\r\n                        \"Контакты:\"\r\n                    ),\r\n\r\n                React.createElement('div', {className: classes.EditProfileContactsFields},\r\n                    profile?.contacts && Object.keys(profile?.contacts).map((c) => { // вывод списка контактов, мапим\r\n                            return React.createElement('div', {key: c},\r\n                                React.createElement(\r\n                                    MyTextInput,\r\n                                    {\r\n                                        label: c,\r\n                                        autoFocus: false,\r\n                                        name: 'contacts[' + c + ']',\r\n                                        type: 'text',\r\n                                        placeholder: c,\r\n                                        leftLabelLength: \"5rem\" // слева в input появляется label указанной длины\r\n                                    },\r\n                                ),\r\n                                React.createElement('div', {}, //ошибки редактирования профиля с сервера\r\n                                    editProfileStatus.map(err => {// прогоняем весь массив ошибок с сервера на обновление профиля\r\n                                        if (err.toLowerCase().includes(c.toLowerCase())) { // если имя отрисовываемого поля \"с\" соджержится в сообщении об ошибке\r\n                                            return React.createElement('div', {key: err, className: classes.errorText}, err )// выводим сообщение об ошибке рядом с полем\r\n                                        }\r\n                                        return null\r\n                                    })\r\n                                ),\r\n                            )\r\n                        })\r\n                    ),\r\n                React.createElement('br'), //перенос строки\r\n\r\n                    //кнопка сброса к значениям по умолчанию\r\n                React.createElement(Button, {\r\n                        type: 'button',\r\n                        variant: \"warning\",\r\n                        onClick: () => { // при клике по кнопке сброс\r\n                            handleReset();// занулить поля ввода по умолчанию\r\n                            setEditProfileStatus([]); // сбросить сообщение об ошибке с сервера\r\n                        }\r\n                    }, 'Сброс'),\r\n\r\n                    \" \", //отступ между кнопками\r\n\r\n                    //кнопка отправить форму\r\n                React.createElement(Button, {type: 'submit'}, 'Применить'),\r\n\r\n                    \" \", //отступ между кнопками\r\n\r\n                    //отмена\r\n                React.createElement(Button, {\r\n                        variant: \"secondary\",\r\n                        onClick: () => { // при клике по кнопке отмена\r\n                            setEditMode(false)// переключиться с режима редактирования профиля на просмотр\r\n                            setEditProfileStatus([]) // сбросить сообщение об ошибке с сервера\r\n                        }\r\n                    }, 'Отмена'),\r\n                )\r\n            )\r\n        ))\r\n    )\r\n}\r\n\r\nexport default EditProfileFormik\r\n\r\n","import React from \"react\";\r\n\r\ntype ContactType = {\r\n    key1:string,\r\n    Value:string\r\n}\r\nconst Contact:React.FC<ContactType> = ({key1, Value}) => { /*простая функция вывода отдельного элемента contacts из profile*/\r\n    return <div >\r\n        <b>{key1}: </b > <span title={Value}>{Value}</span>\r\n    </div>\r\n}\r\nexport default Contact\r\n","import {GetProfileType} from \"../../api/apiTypes\";\r\nimport React, {memo} from \"react\";\r\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Contact from \"./Contact\";\r\nimport {NulableType} from \"../../common/types/commonTypes\";\r\n\r\ntype ShowProfileType = {\r\n    profile:  NulableType<GetProfileType>,\r\n    setEditMode: (editMode: boolean )=> void,\r\n    isMyProfile: boolean\r\n}\r\n\r\nconst ShowProfile: React.FC<ShowProfileType> =memo( ({profile, setEditMode, isMyProfile}) => {\r\n    // вынес отдельно отображение профиля\r\n\r\n\r\n    return (<div\r\n            className={`${commonClasses.textMaxWidthCommon} `}> {/*${commonClasses.textMaxWidth18rem}*/}\r\n\r\n            <h3 title={profile?.fullName}>{profile?.fullName}</h3>\r\n            <div ><b>Обо мне</b>: <span title={profile?.aboutMe}> {profile?.aboutMe}</span></div>\r\n            <div><b>В поиске работы?</b> <span title={profile?.lookingForAJob ? \"Да\" : \"Нет\"}>{profile?.lookingForAJob ? \"Да\" : \"Нет\"}</span></div>\r\n            <div ><b>Описание:</b> <span title={profile?.lookingForAJobDescription}>{profile?.lookingForAJobDescription}</span></div>\r\n            <div><b>userId:</b> <span title={profile?.userId.toString()}>{profile?.userId}</span> </div>\r\n\r\n            <ul>\r\n                {profile && Object.keys(profile.contacts).map((key1, ind) => { // ключи contacts\r\n                    const Value:string = Object.values(profile.contacts)[ind] // значения contacts\r\n                    return (<li key={key1}>\r\n                            <Contact key1={key1} Value={Value} /> {/*вывод ключ + значение*/}\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n            {isMyProfile && <Button onClick={() => {\r\n                setEditMode(true)\r\n            }}>Редактировать профиль </Button>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ShowProfile\r\n","import React, {memo, useEffect, useState} from 'react';\r\nimport EditProfileFormikBS from \"./EditProfile/EditProfileFormikBS\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport commonClasses from \"../../common/CommonClasses/common.module.css\";\r\nimport {GetProfileType} from \"../../api/apiTypes\";\r\nimport {NulableType, ProfileType} from \"../../common/types/commonTypes\";\r\nimport ShowProfile from \"./ShowProfile\";\r\n\r\ntype ProfileInfoType2 = {\r\n    profile: NulableType<GetProfileType>,\r\n    isMyProfile: boolean\r\n    putProfile: (putProfile2: ProfileType) => void,\r\n    editProfileStatus: Array<string>,\r\n    isProfileEditedSuccesssfully: boolean\r\n    setEditProfileStatus: (editProfileStatus: Array<string>) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType2> = memo( (\r\n    {profile, isMyProfile, putProfile, editProfileStatus, setEditProfileStatus, isProfileEditedSuccesssfully}) => {\r\n\r\n    console.log( \"ProfileInfo\" )\r\n\r\n    const [editMode, setEditMode] = useState<boolean>( false ) // флаг режима редактирования профиля\r\n\r\n    useEffect( () => {\r\n        if (isProfileEditedSuccesssfully) { // если успешно обновлен профиль на сервере\r\n            setEditMode( false ) // закрыть режим редактирования профиля\r\n            // желательно здесь сделать прокрутку до верха профиля\r\n            setTimeout( () => {\r\n                setEditProfileStatus( [] ) // убирание сообщения ответа от сервера по таймеру\r\n            }, 2000 )\r\n        }\r\n    }, [editProfileStatus, isProfileEditedSuccesssfully, setEditProfileStatus] ) // переключение режима редактирования зависит от ответа с сервера\r\n\r\n\r\n    const showProfile = <ShowProfile profile={profile} setEditMode={setEditMode} isMyProfile={isMyProfile}/>\r\n\r\n    const editProfile = <EditProfileFormikBS\r\n        putProfile={putProfile} setEditMode={setEditMode} profile={profile}\r\n        editProfileStatus={editProfileStatus} setEditProfileStatus={setEditProfileStatus}\r\n    />\r\n\r\n    return <div>\r\n        <h2 className={commonClasses.pageHeader}>Profile</h2> {/*Заголовок*/}\r\n\r\n        {!editMode && showProfile} {/*показать профиль*/}\r\n\r\n        {editMode && editProfile} {/*редактировать профиль*/}\r\n    </div>\r\n} )\r\nexport default ProfileInfo;\r\n","import ProfileInfo from \"./ProfileInfoBS\";\nimport React from \"react\";\nimport {NotifyType, NulableType, ProfileType} from \"../../common/types/commonTypes\";\nimport {GetProfileType} from \"../../api/apiTypes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport {profileActions, putMyProfileThunkCreator} from \"../../../redux/profile-reducer\";\n\nconst ProfileInfoContainer = () => {\n    console.log( \"ProfileInfoContainer\" )\n\n    const {setEditProfileStatus} = profileActions\n    const dispatch = useDispatch()\n\n    const profile: NulableType<GetProfileType> = useSelector( (state: GlobalStateType) => state.profilePage.profile )\n    const myId: number = useSelector( (state: GlobalStateType) => state.auth.myId )\n    const userId: number | undefined = useSelector( (state: GlobalStateType) => state.profilePage?.profile?.userId ) // id пользователя\n    const editProfileStatus: Array<string> = useSelector( (state: GlobalStateType) => state.profilePage.editProfileStatus )\n    const notify: Array<NotifyType> = useSelector( (state: GlobalStateType) => state.app.notify ) // массив уведомлений\n\n    const putProfile = (putProfile2: ProfileType) => { // обновить данные профиля просле правки\n        // добавить в данные после изменения формы мой ID для чтения результата обновления с сервера\n        const MyProfile = Object.assign( {}, {userId: myId}, putProfile2 );\n        dispatch( putMyProfileThunkCreator( MyProfile ) )// обновить данные профиля просле правки\n    }\n\n    const isMyProfile: boolean = userId === myId\n\n    let isProfileEditedSuccesssfully: boolean = false\n    notify.forEach( (item: NotifyType) => {\n            if (item.message === \"Edited successfully!\") {\n                isProfileEditedSuccesssfully = true\n            }\n        }\n    )\n    return <ProfileInfo // Отображение данных выбранного пользователя\n        profile={profile} // профиль выбранного пользователя\n        isMyProfile={isMyProfile} // id выбранного пользователя, берется из URL\n        putProfile={putProfile}\n        editProfileStatus={editProfileStatus} // список ошибок правки формы профиля с сервера\n        setEditProfileStatus={setEditProfileStatus}\n        isProfileEditedSuccesssfully={isProfileEditedSuccesssfully}\n    />\n}\nexport default ProfileInfoContainer\n","import React, {ChangeEvent, useState} from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\n\ntype ProfileStatusUseStateType = {\n    myId: number, // мой id для модификации статуса\n    userId: number | undefined, // id отображаемого пользователя\n    status: string, // статус из BLL\n    putStatusThunkCreator: (statusTmpInput: string) => void, // санкреатор для обновления сатуса\n}\n\nconst ProfileStatusUseState: React.FC<ProfileStatusUseStateType> = ({userId, myId, status, putStatusThunkCreator}) => {\n    const [modifyStatus, setModifyStatus] = useState<boolean>( false ) // локальная переменная-флаг модификации статуса\n    const [statusTmpInput, setStatusTmpInput] = useState<string>( \"\" ) // локальный статус до отправки на сервер (поле input)\n\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\n        if (userId === myId) { // если ID открытого пользователя равен моему\n            setModifyStatus( true )// смена текстового отображения статуса на поле input\n            setStatusTmpInput( status )// временное значение статуса на время ввода поля input. Изначально берем из статуса BLL\n        }\n    }\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\n        setModifyStatus( false ) // переключение с поля ввода статуса на простой текст\n        putStatusThunkCreator( statusTmpInput )\n    }\n    const onChangeStatus = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const text = event.currentTarget.value;// вынимаем значение введенное в поле ввода input\n        setStatusTmpInput( text );// присваиваем переменной временного статуса из локального стейта введенное значение в поле\n    }\n\n    const checkEnterPressed = (event: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (event.charCode === 13) {\n            setMyStatus()//задание статуса при нажатии Enter\n        }\n    }\n\n    return <InputGroup className=\"my-3\" onClick={checkIfICanModifyStatus}>\n        <InputGroup.Text id=\"basic-addon1\">Статус:</InputGroup.Text> {/* текст слева от поля*/}\n        <Form.Control\n            value={!modifyStatus ? status : statusTmpInput} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\n            title={!modifyStatus ? \"Клик для - правки\" : \"Клик/смена фокуса/enter - для сохранения\"}\n            onChange={onChangeStatus} // задание временного локального статуса\n            autoFocus={true}\n            onBlur={setMyStatus}// задание стейта при потере фокуса input\n            placeholder={!modifyStatus ? \"нет статуса\" : \"задайте статус\"}// текст при пустом поле ввода\n            onKeyPress={checkEnterPressed} // проверка нажатия Enter\n            disabled={!modifyStatus ? true : false}\n        />\n    </InputGroup>\n}\n\nexport default ProfileStatusUseState\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\nimport {putStatusThunkCreator} from \"../../../redux/profile-reducer\";\nimport ProfileStatusUseState from \"./ProfileStatus/ProfileStatusUseState\";\n\nconst StatusContainer:React.FC = () => {\n    console.log(\"StatusContainer\")\n    const dispatch = useDispatch()\n    const myId: number = useSelector( (state: GlobalStateType) => state.auth.myId ) // мой id\n    const userId: number | undefined = useSelector( (state: GlobalStateType) => state.profilePage.profile?.userId ) // id пользователя\n    const status: string = useSelector( (state: GlobalStateType) => state.profilePage.status )//текущий статус\n    const putStatusThunkCreatorLocal = (status: string) => {\n        dispatch( putStatusThunkCreator( status ) ) // обновление статуса\n    }\n\n    return <div>\n        <ProfileStatusUseState // можно еще использовать ProfileStatusUseState и ProfileStatusClass\n            myId={myId} // мой id для модификации статуса\n            userId={userId} // id отображаемого пользователя\n            status={status} // статус из BLL\n            putStatusThunkCreator={putStatusThunkCreatorLocal} // санкреатор для обновления сатуса\n        />\n    </div>\n}\nexport default StatusContainer\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__v8PmM\",\"postsBlock\":\"MyPosts_postsBlock__Vokae\",\"newPostFormTextArea\":\"MyPosts_newPostFormTextArea__Ehj-D\",\"legendStyle\":\"MyPosts_legendStyle__kuSLI\",\"content\":\"MyPosts_content__lZSb5\",\"item\":\"MyPosts_item__No0HI\"};","import React from 'react';\nimport classes from './MyPosts.module.css' // css обработка\n\ntype PostType = {\n    message:string, like: number\n}\nconst PostItem: React.FC<PostType> = ({message, like}) => {\n    return (\n        <div className={classes.item}>\n            <img alt={\"Мистер бин на прогулке\"}\n                 src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\n            {message}\n            <div>\n                <span>Like {like}</span>\n            </div>\n        </div>\n    )\n}\nexport default PostItem;\n","import React, {useState} from \"react\";\nimport {InputGroup, Form} from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n\ntype MyPostsInputType = {\n    addPost: any\n}\n\nconst MyPostsInput:React.FC<MyPostsInputType> = ({addPost}) => {\n    const [inputOnChange, setInputOnchange] = useState<string>(\"\")\n    const checkEnterPressed = (event: React.KeyboardEvent) => { // проверка нажатия Enter\n        if (event.charCode === 13) {\n            inputOnChange && addPost(inputOnChange)//отправка поста при нажатии Enter\n            setInputOnchange(\"\") // зануление поля\n\n        }\n    }\n    return <div>\n        <InputGroup>\n            <Form.Control\n                value={inputOnChange}\n                onChange={(e)=>setInputOnchange(e.target.value)}\n                placeholder={\"введите сообщение...\"}\n                onKeyPress={checkEnterPressed} // проверка нажатия Enter\n\n            />\n            <Button\n                disabled={!inputOnChange}\n                onClick={()=>{\n                    inputOnChange && addPost(inputOnChange)\n                    setInputOnchange(\"\")// зануление поля\n                }}\n            > {/*кнопка отправить форму*/}\n                Submit\n            </Button>\n            <Button\n                disabled={!inputOnChange}\n                variant=\"warning\"\n                type='button'\n                onClick={()=>setInputOnchange(\"\")}\n\n            >Reset\n            </Button>\n        </InputGroup>\n    </div>\n}\nexport default MyPostsInput\n","import React from 'react'; // импорт реакта\nimport classes from './MyPosts.module.css' // css обработка\nimport PostItem from \"./PostItem\"; // подкомпонента отрисовки постов через map\nimport Container from \"react-bootstrap/Container\";\nimport {PostsType} from \"../../common/types/commonTypes\";\nimport MyPostsInput from \"./MyPosts/MyPostsInput\"; // reduxForm для ввода новых постов\n\ntype MyPostsBSType = {\n    posts: Array<PostsType>,\n    addPost: (newPostData: string) => void\n}\nconst MyPostsBS: React.FC<MyPostsBSType> = ({posts, addPost}) => { // основная компонента отрисовки постов\n\n    return <Container>\n        <div className={classes.legendStyle}>Мои посты</div>\n        <MyPostsInput //вызов формы постов с отсылкой на локальный обработчик сабмита\n            addPost={addPost}/>\n        <div className={classes.posts}>\n            {posts.map( (p, ind) => // подкомпонента отрисовки всех постов через map\n                <PostItem key={ind} message={p.message} like={p.like}/> )} {/*отрисовка постов*/}\n        </div>\n    </Container>\n}\nexport default MyPostsBS;\n","import MyPostsBS from \"./MyPostsBS\";\nimport {profileActions} from \"../../../redux/profile-reducer\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {PostsType} from \"../../common/types/commonTypes\";\nimport {GlobalStateType} from \"../../../redux/store-redux\";\n\nconst {addPostActionCreator} = profileActions\n\nconst MyPostsContainer: React.FC = () => {\n\n    console.log( \"MyPostsContainer\" )\n\n    const dispatch = useDispatch()\n\n    const posts: Array<PostsType> = useSelector( (state: GlobalStateType) => state.profilePage.posts )\n\n    type AddPostType = (newPostData: string) => void\n    const addPost: AddPostType = (newPostData: string) => {\n        dispatch( addPostActionCreator( newPostData ) ) // добавить пост с новыми данными\n    }\n    return <MyPostsBS posts={posts} addPost={addPost}/>\n}\n\nexport default MyPostsContainer\n\n\n\n","import {GlobalStateType} from \"../../redux/store-redux\";\nimport {compose} from \"redux\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    getProfileThunkCreator,\n} from \"../../redux/profile-reducer\";\nimport withRouter2 from \"../hoc/withRouter2\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport React, {useEffect, useMemo} from \"react\";\nimport PhotoContainer from \"./Photo/PhotoContainer\";\nimport ProfileInfoContainer from \"./ProfileInfo/ProfileInfoContainer\";\nimport StatusContainer from \"./Status/StatusContainer\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {Col, Row} from \"react-bootstrap\";\n\ntype OwnPropsType = {\n    userId: number // id пользователя из withRouter\n}\n\nconst ProfileContainerFC: React.FC<OwnPropsType> = ({userId}) => {\n\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        dispatch( getProfileThunkCreator( userId ) );// обновить профиль в зависомости от ID\n    }, [userId, dispatch] )\n\n    const isMyPrifile: boolean = userId === 0 //это мой аккаунт в профиле? (пустой userId в URL на моем аккаунте)\n\n    const myPostsRender = useMemo(()=><MyPostsContainer/>,[])\n\n    return <div>\n        <Row>\n            <Col lg={6} md={6} sm={12}>\n                {useMemo(()=><PhotoContainer/>,[])} {/*Отрисовка фото выбранного профиля с возможностью редактирования на моей странице*/}\n            </Col>\n            <Col lg={6} md={6} sm={12}>\n                {useMemo(()=><ProfileInfoContainer/>,[])} {/*Отрисовка данных выбранного профиля и возможность редактировать свой профиль*/}\n            </Col>\n        </Row>\n\n        {useMemo(()=><StatusContainer/>,[])}{/* отобразить статус*/}\n\n        {isMyPrifile && myPostsRender} {/* для моего аккаункт отобразить мои посты*/}\n    </div>\n}\n\nexport default compose<React.ComponentType>(\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2// проверка, залогинен ли я\n)( ProfileContainerFC )\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // текущий флаг авторизации\n    }\n}\n\nconst NavigateToLoginHoc2 = (Component) => {\n    const NavigateToLoginHocWithAuth2 = (props) => {\n        if (!props.isAuth) {\n            return <Navigate to='../login'/>;\n        }\n        return <Component {...props}/>;\n    }\n\n    return connect(mapStateToProps, null)(NavigateToLoginHocWithAuth2);\n}\n\nexport default NavigateToLoginHoc2\n","import React from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nconst withRouter2 = (Children) => {\n    const WithRouter2withProps = (props) => {\n        const aaa = {params: useParams()}\n        const userId=Number(aaa.params['*']);\n        return <Children {...props} userId={userId}/>\n    }\n    return connect(null, null)(WithRouter2withProps)\n    // доп данные с connect пока нулевые, если понадобятся, сможем добавить\n}\nexport default withRouter2\n"],"names":["_ref","photo","isMyProfile","onChangeLocal","_jsxs","children","_jsx","className","classesCommon","Image","fluid","alt","concat","classes","src","Form","type","onChange","_profile$photos","console","log","dispatch","useDispatch","profile","useSelector","state","profilePage","userId","_state$profilePage$pr","myId","auth","photos","large","userPhoto1","PhotoRender","e","target","files","length","setprofilePhotoThunkCreator","myValidationSchema","Yup","putProfile","setEditMode","editProfileStatus","setEditProfileStatus","myInitialValues","FullName","fullName","AboutMe","aboutMe","LookingForAJob","lookingForAJob","LookingForAJobDescription","lookingForAJobDescription","contacts","React","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","MyTextInput","label","autoFocus","name","placeholder","leftLabelLength","MyCheckbox","Object","keys","map","c","key","err","toLowerCase","includes","Button","variant","onClick","key1","Value","title","memo","commonClasses","toString","ind","Contact","isProfileEditedSuccesssfully","_useState","useState","_useState2","_slicedToArray","editMode","useEffect","setTimeout","showProfile","ShowProfile","editProfile","EditProfileFormikBS","profileActions","_state$profilePage","notify","app","forEach","item","message","ProfileInfo","putProfile2","MyProfile","assign","putMyProfileThunkCreator","status","putStatusThunkCreator","modifyStatus","setModifyStatus","_useState3","_useState4","statusTmpInput","setStatusTmpInput","setMyStatus","InputGroup","id","value","event","text","currentTarget","onBlur","onKeyPress","charCode","disabled","ProfileStatusUseState","like","addPost","inputOnChange","setInputOnchange","posts","Container","MyPostsInput","p","PostItem","addPostActionCreator","MyPostsBS","newPostData","compose","withRouter2","NavigateToLoginHoc2","getProfileThunkCreator","isMyPrifile","myPostsRender","useMemo","MyPostsContainer","Row","Col","lg","md","sm","PhotoContainer","ProfileInfoContainer","StatusContainer","mapStateToProps","isAuth","Component","connect","props","_objectSpread","Navigate","to","Children","aaa","params","useParams","Number"],"sourceRoot":""}