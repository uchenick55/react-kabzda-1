{"version":3,"file":"static/js/159.8996ac41.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/FeedBack/FeedBack.module.css?b10b","components/FeedBack/FeedBackForm.jsx","components/FeedBack/FeedBack.jsx","components/FeedBack/FeedBackContainer.jsx","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"feedBackGreed\":\"FeedBack_feedBackGreed__xb18p\",\"FeedBackCommon\":\"FeedBack_FeedBackCommon__atwA+\",\"FeedBackForm2\":\"FeedBack_FeedBackForm2__iUbxx\",\"FeedBackSuccess\":\"FeedBack_FeedBackSuccess__tFRsF\",\"legendStyle\":\"FeedBack_legendStyle__rOg3O\",\"fieldSetStyle\":\"FeedBack_fieldSetStyle__ifcUC\",\"sendMessageBoard\":\"FeedBack_sendMessageBoard__UG9aW\",\"buttonSuccess\":\"FeedBack_buttonSuccess__8u00M\"};","import React from \"react\"; // импорт реакта\nimport {Field, reduxForm} from \"redux-form\";// reduxForm для ввода новых постов\nimport classes from './FeedBack.module.css'\nimport {Input, Textarea} from \"../common/Validation/customFields\";\nimport {email, Required} from \"../common/Validation/validationField\";\n\nconst FeedBackForm2 = ({handleSubmit}) => { // компонента формы\n    return (\n        <form onSubmit={handleSubmit}/*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\n            <fieldset>\n                <legend>\n                    <div className={classes.legendStyle}>Обратная связь</div>\n                </legend>\n                <div className={classes.fieldSetStyle}>\n                    <div>\n                        <Field\n                            name=\"name\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                            component={Input}// компонент - ввод\n                            placeholder=\"Ваше имя (не обязательно)\" // текст подсказка при пустом поле\n                            validate={[]}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            name=\"email\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                            component={Input}// компонент - ввод\n                            placeholder=\"Ваш Email (не обязательно)\" // текст подсказка при пустом поле\n                            validate={[email]}\n                        />\n                    </div>\n                    <div>\n                        <Field\n                            name=\"message\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                            component={Textarea}// компонент - ввод\n                            placeholder=\"Введите сообщение\" // текст подсказка при пустом поле\n                            validate={[Required]}\n                        />\n                    </div>\n                    <div>\n                        <button type=\"submit\">Отправить сообщение</button>\n                        {/*кнопка*/}\n                    </div>\n                </div>\n            </fieldset>\n        </form>\n    )\n}\n\n// оберточная компонента формы, задает имя подстейта \"FeedBackForm2\"\nlet FeedBackReduxForm = reduxForm({form: 'FeedBackForm2'})(FeedBackForm2)\n\nlet FeedBackForm = ({sendFeedBack}) => {\n\n    let onSubmit = (formData) => { // функция реакции на сабмит формы с данными от формы formData\n        let data = {name: formData.name, email: formData.email, message: formData.message}\n        sendFeedBack(data)//вызов функции из контейнера на диспатч санки feedBack\n    }\n    return (\n        <div className={classes.FeedBackCommon}/*стиль*/ >\n            <div className={classes.FeedBackForm2}>\n                <div><FeedBackReduxForm\n                    onSubmit={onSubmit}\n                />{/*вызов формы логина с отсылкой на локальный обработчик сабмита*/}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FeedBackForm\n","import React from \"react\";\nimport classes from \"./FeedBack.module.css\";\nimport FeedBackForm from \"./FeedBackForm\";\n\nconst FeedBack = ({sendFeedBack, feedBackStatus, setFeedBackStatus}) => {\n    let SendMessageBoard = (props) => {\n        return <div className={classes.sendMessageBoard}>{/*стилизация отправки данных на сервер*/}\n            {props.children}\n        </div>\n    }\n\n    if (feedBackStatus) { // если статус feedback из BLL не пустой\n        return (\n            <div>\n                <SendMessageBoard> {/*стилизация отправки данных на сервер*/}\n                    <div>Спасибо!</div>\n                    <div>{feedBackStatus}</div>\n                    {/*отобразить статус*/}\n                    <button className={classes.buttonSuccess} onClick={() => {\n                        setFeedBackStatus(\"\")\n                    }}>Новое сообщение\n                    </button>\n                    {/*обнуление статуса и отображение формы*/}\n                </SendMessageBoard>\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.feedBackGreed}> {/*растягивание полей ввода не на весь экран*/}\n            <div>\n                <FeedBackForm\n                    sendFeedBack={sendFeedBack} // redux форма ввода данных\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default FeedBack;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {postFeedBackThunkCreator2, setFeedBackStatus} from \"../../redux/feedback-reducer\";\nimport FeedBack from \"./FeedBack\";\n\nclass FeedBackContainer extends React.Component {\n\n    sendFeedBack = (data) => {\n        this.props.postFeedBackThunkCreator2(data)// отправка фидбека из api\n    }\n\n    render () {\n        return <div>\n            <FeedBack\n                sendFeedBack={this.sendFeedBack} // колбек отправки сообщения из контейнера\n                feedBackStatus={this.props.feedBackStatus} // фидбэк статус из BLL\n                setFeedBackStatus={this.props.setFeedBackStatus} // задать статус (обнулить для отправки нового сообщения)\n            />\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        feedBackStatus: state.feedback.feedBackStatus // статус отправки сообщения на сервер\n    }\n}\n\nexport default connect(mapStateToProps,\n    {postFeedBackThunkCreator2, setFeedBackStatus})(FeedBackContainer);\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError && <span className={classes.textError}>{meta.error}</span>}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError && <span className={classes.textError}>{meta.error}</span>}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CreateField = (name, component, placeholder, validate ) => {\r\n    return (<div>\r\n        <Field\r\n            name={name}// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n            component={component}// компонент - кастомная строка с валидацией\r\n            placeholder={placeholder}// текст подсказка при пустом поле\r\n            validate={validate}\r\n        />\r\n    </div>)\r\n\r\n}\r\n\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["FeedBackReduxForm","reduxForm","form","handleSubmit","onSubmit","className","classes","Field","name","component","Input","placeholder","validate","email","Textarea","Required","type","sendFeedBack","formData","data","message","feedBackStatus","setFeedBackStatus","SendMessageBoard","props","children","onClick","FeedBackContainer","postFeedBackThunkCreator2","this","React","connect","state","feedback","input","meta","restProps","isError","touched","error","value","maxLengthCreator","maxLength","length","test","undefined"],"sourceRoot":""}