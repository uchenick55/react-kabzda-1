{"version":3,"file":"static/js/299.faa67f7b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","webpack://my-app/./src/components/Dialogs/DialogsFormik/Dialogs.module.css?f73d","components/Dialogs/DialogsFormik/DialogsFormik.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dM24o\",\"dialogList\":\"Dialogs_dialogList__DRCp9\",\"dialogListHeader\":\"Dialogs_dialogListHeader__LoidE\",\"messagesHeader\":\"Dialogs_messagesHeader__0aYgL\",\"knopka\":\"Dialogs_knopka__xT3Jx\",\"dialogItemGreed\":\"Dialogs_dialogItemGreed__AaCdb\",\"dialog\":\"Dialogs_dialog__YZmRT\",\"dialogCurrent\":\"Dialogs_dialogCurrent__ICI5E\",\"dialogImg\":\"Dialogs_dialogImg__H5UvS\",\"FieldLeft\":\"Dialogs_FieldLeft__5h4r2\",\"buttonRight\":\"Dialogs_buttonRight__XYfP1\",\"FieldButtonGreed\":\"Dialogs_FieldButtonGreed__pgs7l\",\"dialogContainer\":\"Dialogs_dialogContainer__4-aI+\",\"x\":\"Dialogs_x__6nHnv\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport x from \"../../../assets/images/x.png\";\r\nimport {PointerCursor} from \"../../Dark_light_theme/globalStyles\";\r\n\r\n\r\nconst DialogItem = ({deleteDialog, dialogId, userPhoto, userName, userId, dialogUserID}) => {\r\n    let onMouseOverAction = () => {\r\n\r\n    }\r\n    return <div className={userId === dialogUserID ? classes.dialogCurrent : classes.dialog} >\r\n        <div className={classes.dialogItemGreed}>  {/*разделение фото имени с кнопкой закрытия диалога в диалогЛисте*/}\r\n            <div >\r\n                <NavLink to={'/dialogs/' + userId}> {/*навигация на диалог*/}\r\n                    <div className={classes.knopka}>\r\n                        <div className={classes.dialogList}>{/* Разделение фото и имени*/}\r\n                            <div>\r\n                                <img src={userPhoto} alt={\"userPhoto\"} className={classes.dialogImg}/> {/*Фото диалога*/}\r\n                            </div>\r\n                            <div>\r\n                                <div>{userName}</div> {/*имя*/}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                <PointerCursor>\r\n                    <img src={x} alt={\"Удалить из своего диалогЛиста\"} className={classes.x}\r\n                         onMouseOver={onMouseOverAction} onClick={() => {\r\n                        deleteDialog(dialogId, userId)\r\n                    }} title={\"Удалить из своего диалогЛиста\"}/>\r\n                </PointerCursor>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageCommon\":\"Message_messageCommon__JBI1k\",\"timeStyle\":\"Message_timeStyle__nW8fG\",\"x\":\"Message_x__9QsEg\",\"messageswrapper\":\"Message_messageswrapper__KRV1p\",\"messageMyId\":\"Message_messageMyId__w6TOo\",\"messageNotMyId\":\"Message_messageNotMyId__wjpf9\"};","import React from 'react';\nimport classes from './Message.module.css';\nimport x from \"../../../assets/images/x.png\";\n\n\nconst Message = ({message, myId, userId, Date, MessageId, deleteMessage}) => {\n\n    let onMouseOverAction = () => {\n\n    }\n    return <div className={classes.messageswrapper}> {/*разделить сообщения на мои и собеседника поровну (право-лево)*/}\n        <div className={myId === userId ? classes.messageMyId : classes.messageNotMyId}> {/*в зависимости от того кто пишет, доп стили к тексту*/}\n            <span>{message}</span>\n            <img src={x} className={classes.x} onMouseOver={onMouseOverAction} onClick={()=>{deleteMessage(MessageId)}} alt={\"Удалить сообщение у всех\"} title = {\"Удалить сообщение у всех\"}/>\n            <span className={classes.timeStyle}>{Date.Hour}{\":\"}{Date.Minutes}</span>\n        </div>\n    </div>\n}\n\nexport default Message;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"MyPosts\":\"Dialogs_MyPosts__qPzH8\",\"legendStyle\":\"Dialogs_legendStyle__6zAkW\",\"fieldSetStyle\":\"Dialogs_fieldSetStyle__rJI1r\",\"fieldButtonGrid\":\"Dialogs_fieldButtonGrid__brdxv\"};","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./Dialogs.module.css\"\n//import DisplayFormikState from \"../../common/formikCommon/DisplayFormikState\"\nimport {MyTextInput} from \"../../common/formikCommon/MyFields\"\n\nlet myInitialValues = { // начальные зачения форм\n    newMessage: \"\",\n}\nlet myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n})\n\nconst DialogsFormik = ({sendMessage}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values, {resetForm}) => { // действия по сабмиту\n        sendMessage(values.newMessage) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    return (\n        <>\n            <Formik\n                initialValues={myInitialValues}\n                validationSchema={myValidationSchema}\n                onSubmit={myOnSubmit}\n            >\n\n                {({\n                      handleReset,// обнуление полей\n                  }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n                    <Form className={classes.MyPosts}>\n                        <div className={classes.fieldButtonGrid}>\n                            <div>\n                                <MyTextInput // сообщение в MyPosts\n                                    label=\"\"\n                                    name='newMessage'\n                                    type='text'\n                                    placeholder='Введите ваше сообщение'\n                                    autoFocus ={true}\n                                />\n                            </div>\n                            <div>\n                                <button type=\"submit\"> {/*кнопка отправить форму*/}\n                                    Submit\n                                </button>\n                            </div>\n                        </div>\n                        {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default DialogsFormik\n\n","import React, {useEffect} from 'react'; // импорт реакта\nimport classes from './Dialogs.module.css';// css обработка\nimport DialogItem from \"./DialogItem/DialogItem\";// подкомпонента отрисовки диалогов через map\nimport Message from \"./Message/Message\";// подкомпонента отрисовки сообщений через map\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\";\nimport userPhotoAva from \"../../assets/images/no-image3.png\";\nimport DialogsFormik from \"./DialogsFormik/DialogsFormik\";\n\nconst Dialogs = ({deleteDialog, dialogUserID, getDialogList, dialogs2, messages2, sendMessage,\n                     getDialogLastUpdateTime, myId, deleteMessage}) => { // основная компонента отрисовки диалогов\n\n    let dialogElements = dialogs2.map((d) => // подкомпонента отрисовки всех диалогов через map\n        {\n            let userPhoto = d.userPhoto ? d.userPhoto : userPhotoAva; // если аватарки с сервера нет, подставить заглушку\n            return <DialogItem key={d.userId} userName={d.userName} userId={d.userId}\n                               userPhoto={userPhoto} dialogUserID={dialogUserID}\n                               deleteDialog={deleteDialog} dialogId={d.dialogId}\n            />\n        }\n    );\n\n    let messagesElements = messages2.map((m) => // подкомпонента отрисовки всех сообщений через map\n        <Message key={m.id+m.message} message={m.message} myId={myId} userId={m.userId} Date={m.Date} MessageId={m.id}\n                 deleteMessage={deleteMessage}/>);\n\n    useEffect(() => { // при очередном ререндере\n        const id = setInterval(() => { // задать цикл с интервалом в 1 сек\n            getDialogLastUpdateTime() // получить время обновления текущего диалога\n            getDialogList()// получить диалогЛист (мне кто то написал, или я начал диалог)\n        }, 1000)\n        return (() => {\n            clearInterval(id)\n        }) // для сброса цикла при очередном рендере\n    }, [getDialogLastUpdateTime, getDialogList]) // useEffect без зависимостей\n\n    return (\n        <div className={classes.dialogs} /*стиль всех диалогов*/>\n            <div>\n                <h3 className={classes.dialogListHeader}>dialogList</h3>\n                <div className={classes.dialogContainer}>\n                    <ScrollContainer // обернуть сообщения скролом\n                        child={dialogElements}\n                        height={window.screen.availHeight - 277} // высота поля скрола\n                        firstInsideContainer={\"DialogsUp\"}\n                        secondInsideContainer={\"DialogsDown\"}\n                        containerElement={\"DialogsContainer123\"}\n                    /> {/*отрисовка диалогов в скрол контейнере*/}</div>\n\n            </div>\n            <div>\n                <h3 className={classes.messagesHeader}>Messages</h3>\n\n                <ScrollContainer // обернуть сообщения скролом\n                    child={messagesElements}\n                    height={window.screen.availHeight - 300} // высота поля скрола\n                    firstInsideContainer={\"MessagesUp\"}\n                    secondInsideContainer={\"MessagesDown\"}\n                    containerElement={\"MessagesContainer\"}\n                /> {/*отрисовка сообщений в скрол контейнере*/}\n                <div>\n                    <DialogsFormik sendMessage={sendMessage}/>{/*вызов формы сообщений*/}\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Dialogs;\n\n","import React from 'react';\nimport Dialogs from \"./Dialogs\";\nimport {\n    deleteDialogThunkCreator,\n    deleteMessageThunkCreator,\n    getDialogLastUpdateTimeTnkCrt,\n    getDialogsThunkCreator, getFollowThunkCreator, getMyDialogListThunkCreator,\n    sendDialogsThunkCreator,\n    setdialogUserID,\n    setMessages, updateDialogListThunkCreator\n} from \"../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getProfileThunkCreator} from \"../../redux/profile-reducer\";\nimport NavigateToLoginHoc2 from \"../hoc/NavigateToLoginHoc2\";\nimport withRouter2 from \"../hoc/withRouter2\";\n\nclass DialogsContainer extends React.Component {\n    commonPartMountUpdate = () => {// общая часть для componentDidMount и componentDidUpdate\n        if (!this.props.userId) { // если перешли на вкладку Dialogs с нулевым userId\n            if (this.props.messages2.length>0) { // если массив сообщений непустой\n                this.props.setMessages([]); // занулить массив сообщений (очистить список сообщений)\n                this.props.setdialogUserID(null) // занулить userId (убрать выделение диалога)\n            }\n            return\n        }\n        if ( this.props.dialogUserID!==this.props.userId) { // если считаный из URL userId не равен тому, что в BLL\n            this.props.setdialogUserID(this.props.userId) // задать в BLL считаный из URL ID\n            //здесь запросить профиль выбранного userId через getProfileThunkCreator\n            this.props.getProfileThunkCreator(this.props.userId, true, this.props.myId)// при переходе в диалог любого пользователя считать его данные профиля с сервера\n        }\n\n    }\n    componentDidMount() {\n        this.getDialogList()\n        //      console.log(\"DialogsContainer -> componentDidMount\")\n        this.commonPartMountUpdate();// общая часть для componentDidMount и componentDidUpdate\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //       console.log(\"DialogsContainer -> componentDidUpdate\")\n        this.commonPartMountUpdate(); // общая часть для componentDidMount и componentDidUpdate\n        if  (this.props.dialogLastUpdateTime!==prevProps.dialogLastUpdateTime) { // если время обновления диалога изменилось\n            this.getDialogs()// запросить новые сообщения по диалогу\n        }\n    }\n\n    getDialogs = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке Dialogs\n        this.props.getDialogsThunkCreator(this.props.myId, this.props.userId);// получить диалоги\n    }\n\n    getDialogLastUpdateTime = () => {\n        if (this.props.userId === \"\") {return}// при клике просто по вкладке Dialogs\n        this.props.getDialogLastUpdateTimeTnkCrt(this.props.myId, this.props.userId); // получить время последенего обновления диалога\n    }\n\n    getDialogList = () => {\n        this.props.getMyDialogListThunkCreator(this.props.myId)\n    }\n\n    sendMessage = (NewMessage) => { // отправка сообщения\n        if (!this.props.userId) { // при клике просто по вкладке Dialogs\n            alert(\"Выберите диалог\") // предупреждение если диалог не выбран\n            return\n        }\n        if (!NewMessage) { // при клике просто по вкладке Dialogs\n            return // не реагировать на пустые сообщения\n        }\n\n        let profilePage = this.props.profilePage // локальный стейт страницы пользователя\n        let userName = 0 // задаем переменную имени пользователя\n        let userPhoto = 0 // и его фото для отображения в диалоглисте\n        if (profilePage!==null) { // если профиль пользователя уже загружен\n            userName = this.props.profilePage.profile.fullName; // переопределить имя пользователя\n            userPhoto = this.props.profilePage.profile.photos.small; // и его фото и стейта\n        }\n\n        this.props.sendDialogsThunkCreator( // отправить сообщение\n            NewMessage,\n            this.props.auth.myId, // мой ID для формирования DialogList собеседника\n            this.props.auth.myLogin, // мой логин  для формирования DialogList собеседника\n            this.props.auth.myProfile.photos.small, // мое фото  для формирования DialogList собеседника\n            this.props.userId, // ID собеседника для формирования моего DialogList\n        ); // отправить сообщение\n\n        this.props.updateDialogListThunkCreator( // обновление диалогЛиста\n            this.props.auth.myId, // мой ID\n            this.props.userId, // ID с кем веду диалог\n            userName, // его имя\n            userPhoto // и фото\n        )\n        //userId1, userId2, Name2, Photo2\n    }\n\n    deleteMessage = (messageID) => { // удалить сообщение по его ID в списке\n        this.props.deleteMessageThunkCreator(messageID, this.props.myId, this.props.userId);\n    }\n\n    deleteDialog = (dialogId, userId2) => {\n        this.props.deleteDialogThunkCreator(dialogId, this.props.myId, userId2)\n        // здесь сменить URL без ID\n    }\n\n    render () {\n        return <div>\n            <Dialogs\n                messages2 ={this.props.messages2}// массив сообщений текущего диалога\n                dialogs ={this.props.dialogs} // список диалогов\n                dialogs2 ={this.props.dialogs2} // список диалогов с LocalStorage\n                {...this.props} // все входящие пропсы пробросили дальше\n                sendMessage={this.sendMessage} // проброс местного метода отправки сообщений\n                getDialogs={this.getDialogs}  // проброс местного метода получить диалоги\n                getDialogLastUpdateTime={this.getDialogLastUpdateTime} // проброс метода - получить время обновления текущего диалога\n                myId={this.props.myId} // мой ID\n                deleteMessage = {this.deleteMessage} // удалить сообщение\n                getDialogList={this.getDialogList} // периодическая проверка написал ли кто мне, или я с кем диалог начал\n                dialogUserID = {this.props.dialogUserID}\n                deleteDialog = {this.deleteDialog}\n            />\n        </div>\n    }\n}\n\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth: state.auth.isAuth, // флаг, авторизован ли я сейчас,\n        myId: state.auth.myId, // мой ID (авторизованного пользователя)\n        dialogUserID: state.dialogsPage.dialogUserID, // ID пользователя, с кем сейчас идет диалог\n        messages2: state.dialogsPage.messages2, // массив сообщений текущего диалога\n        dialogs: state.dialogsPage.dialogs, // список диалогов\n        dialogLastUpdateTime: state.dialogsPage.dialogLastUpdateTime,// время последнего времени обновления текущего диалога\n        dialogs2: state.dialogsPage.dialogs2, // список диалогов с LocalStorage\n        profilePage:state.profilePage, // страница профиля пользователя для создания dialogList\n        auth: state.auth,// страница моего профиля для создания dialogList\n        editProfileStatus: state.auth.editProfileStatus // ошибка правки формы профиля\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps,\n        {\n            sendDialogsThunkCreator,//санкреатор отправки нового сообщения в диалог\n            getDialogsThunkCreator,//санкреатор получения диалогов с данными\n            setdialogUserID, // экшнкреатор задания списка сообщений в стейт messages2\n            setMessages,// экшнкреатор задания списка сообщений в стейт messages2\n            getDialogLastUpdateTimeTnkCrt,//санкреатор получения диалогов с данными\n            deleteMessageThunkCreator,//санкреатор удаления сообщения из далога\n            getProfileThunkCreator,// санкреатор на получение профиля выбранного пользователя\n            getFollowThunkCreator,//санкреатор проверки follow/unfollow выбранного юзера для составления списка диалогов\n            getMyDialogListThunkCreator,//санкреатор получения моего диалогЛиста\n            updateDialogListThunkCreator,//санкреатор обновления диалогЛиста (моего когда я пишу кому то сообщение) - запись в localStorage.\n            deleteDialogThunkCreator, //санкреатор удаления диалога из диалогЛиста\n        }\n    ),\n    withRouter2,// получить данные ID из URL браузера и добавить в пропсы\n    NavigateToLoginHoc2 // проверка, залогинен ли я\n)\n(DialogsContainer);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["deleteDialog","dialogId","userPhoto","userName","userId","dialogUserID","className","classes","to","src","alt","x","onMouseOver","onClick","title","message","myId","Date","MessageId","deleteMessage","Hour","Minutes","myInitialValues","newMessage","myValidationSchema","Yup","sendMessage","initialValues","validationSchema","onSubmit","values","resetForm","handleReset","label","name","type","placeholder","autoFocus","getDialogList","dialogs2","messages2","getDialogLastUpdateTime","dialogElements","map","d","userPhotoAva","messagesElements","m","id","useEffect","setInterval","clearInterval","ScrollContainer","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","DialogsContainer","commonPartMountUpdate","props","setdialogUserID","getProfileThunkCreator","length","setMessages","getDialogs","getDialogsThunkCreator","getDialogLastUpdateTimeTnkCrt","getMyDialogListThunkCreator","NewMessage","profilePage","profile","fullName","photos","small","sendDialogsThunkCreator","auth","myLogin","myProfile","updateDialogListThunkCreator","alert","messageID","deleteMessageThunkCreator","userId2","deleteDialogThunkCreator","this","prevProps","prevState","snapshot","dialogLastUpdateTime","dialogs","React","compose","connect","state","isAuth","dialogsPage","editProfileStatus","getFollowThunkCreator","withRouter2","NavigateToLoginHoc2"],"sourceRoot":""}