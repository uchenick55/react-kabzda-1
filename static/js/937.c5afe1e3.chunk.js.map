{"version":3,"file":"static/js/937.c5afe1e3.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://my-app/./src/components/common/ButtonOverImage/ButtonOverImage.module.css?06cf","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusUseReducer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/EditProfile/EditProfile.module.css?6ed4","components/Profile/ProfileInfo/EditProfile/EditProfile.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/common/Validation/customFields.jsx","components/common/Validation/validationField.jsx","components/hoc/NavigateToLoginHoc.js","webpack://my-app/./src/components/common/Validation/customFields.module.css?2ef1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__2H7Cx\",\"posts\":\"Profile_posts__Zsb5o\",\"ProfileRender\":\"Profile_ProfileRender__e0enY\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoGreed\":\"ProfileInfo_profileInfoGreed__Ivmkx\",\"buttonsPhotoUpload\":\"ProfileInfo_buttonsPhotoUpload__Uo53b\",\"profilefullName\":\"ProfileInfo_profilefullName__+C+kf\",\"ProfileContacts\":\"ProfileInfo_ProfileContacts__RZOg6\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ButtonOverImage_container__y1asv\",\"profilePhotoIMG\":\"ButtonOverImage_profilePhotoIMG__kODVQ\",\"btn1\":\"ButtonOverImage_btn1__PBZvs\",\"displayNone\":\"ButtonOverImage_displayNone__J37Bu\",\"btn2\":\"ButtonOverImage_btn2__WL2vZ\",\"btn\":\"ButtonOverImage_btn__qB6UG\"};","import React, {useReducer} from \"react\";\nimport {bedug_mode} from \"../../../../redux/store-redux\";\n\nlet ProfileStatusUseReducer = ({status, userId, myId, putStatusThunkCreator}) => {\n    const initialState = {\n        modifyStatus2: false,// локальная переменная-флаг модификации статуса\n        statusTmpInput2: null // локальный статус до отправки на сервер (поле input)\n    }\n\n    const SET_MODIFY_STATUS_TRUE = \"SET_MODIFY_STATUS_TRUE\"; // константа чтобы не ошибиться при диспатче (modify true)\n    const SET_MODIFY_STATUS_FALSE = \"SET_MODIFY_STATUS_FALSE\";// константа чтобы не ошибиться при диспатче (modify false)\n    const SET_STATUS_TMP_INPUT = \"SET_STATUS_TMP_INPUT\";// константа чтобы не ошибиться при диспатче (временный статус input)\n\n    const localReducer = (localState, action) => {\n        let stateCopy; // копия стейта для дебага\n        switch (action.type) {\n            case SET_MODIFY_STATUS_TRUE: // если мы открываем поле input (модификацию стьатуса)\n                stateCopy = {\n                    ...localState,\n                    modifyStatus2: true, // флаг модификации в true\n                    statusTmpInput2: status// локальный статус для input берем из стейта\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            case SET_MODIFY_STATUS_FALSE: // если мы закрываем модификацию стьатуса\n                stateCopy = {\n                    ...localState,\n                    modifyStatus2: false // флаг модификации в false\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            case 'SET_STATUS_TMP_INPUT':\n                stateCopy = {\n                    ...localState,\n                    statusTmpInput2: action.text // задаем локальный статус из value input\n                };\n                return stateCopy; // проверяем что все вернулось как нужно\n            default:\n                throw new Error(); // заглушка обработчика ошибок\n        }\n    }\n\n    const [localState, dispatch] = useReducer(localReducer, initialState)// меняем отдельные useState на useReducer\n\n    const checkIfICanModifyStatus = () => {// проверка, что я могу менять статус (открыт мой профиль со статусом)\n        if (userId === myId) { // если ID открытого пользователя равен моему\n            dispatch({type: SET_MODIFY_STATUS_TRUE})// смена текстового отображения статуса на поле input\n        }\n    }\n    const setMyStatus = () => { // действия после двойного клика по полю input статуса или вводу Enter\n        dispatch({type: SET_MODIFY_STATUS_FALSE})// смена текстового отображения статуса на поле input\n\n        if (bedug_mode) {console.log(\"ProfileStatusUseReducer.jsx, setMyStatus putStatusThunkCreator() ->SET_USER_PROFILE\" )} // дебаг\n\n        /////////  ProfileInfo.jsx\n\n        putStatusThunkCreator(localState.statusTmpInput2, myId)// санкреатор на обновление статуса на сервере\n    }\n    const onChangeStatus = (event) => {\n        const text = event.currentTarget.value;// вынимаем значение введенное в поле ввода input\n        dispatch({type: SET_STATUS_TMP_INPUT, text: text})// присваиваем переменной временного статуса из локального стейта введенное значение в поле\n    }\n    const checkEnterPressed = (event) => { // проверка нажатия Enter\n        if (event.charCode === 13) {\n            setMyStatus()//задание статуса при нажатии Enter\n        }\n    }\n\n    return (<div>\n        {!localState.modifyStatus2\n            ? <div>\n                <h3\n                    onDoubleClick={checkIfICanModifyStatus}> {/*при двойном клике на статусе проверка могу ли я ввобще менять статус*/}\n                    Статус: {!status // если статуса из стейта нет или он нулевой\n                        ? \"нет статуса\" // отображение \"нет статуса\"\n                        : status // если статус есть из BLL, он отображается\n                    }\n                </h3>\n            </div>\n            : <h3>\n                <span onDoubleClick={setMyStatus}>\n                    <input\n                        value={localState.statusTmpInput2} // жестко зафиксировали значение поля ввода на временное значение статуса в локальном стейте\n                        onChange={onChangeStatus} // задание временного локального статуса\n                        onBlur={setMyStatus}// задание стейта при потере фокуса input\n                        autoFocus={true} // фокусировка на поле ввода текста\n                        placeholder={\"задайте статус\"}// текст при пустом поле ввода\n                        onKeyPress={checkEnterPressed} // проверка нажатия Enter\n                    />\n                </span>\n            </h3>\n        }\n    </div>)\n}\nexport default ProfileStatusUseReducer\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"HeaderEditProfileForm\":\"EditProfile_HeaderEditProfileForm__DZFNn\",\"EditProfile\":\"EditProfile_EditProfile__TaRTd\",\"EditProfileContactsFields\":\"EditProfile_EditProfileContactsFields__YBhCw\"};","import React, {useEffect} from \"react\"; // импорт реакта\nimport {Field, initialize, reduxForm, reset} from \"redux-form\";// reduxForm для ввода новых постов\nimport classes from './EditProfile.module.css'\nimport styles from './../../../common/Validation/customFields.module.css'\nimport {Input, CreateField} from \"../../../common/Validation/customFields\";\nimport {email, Required} from \"../../../common/Validation/validationField\";\n\nconst ProfileForm = ({setEditMode, error, handleSubmit, load, pristine, reset, submitting, profile}) => { // компонента формы\n    let ContactCreateField = (key) => {\n        return <div>\n            {CreateField(key, Input, key, [] )} {/*name, component, placeholder, validate*/}\n        </div>\n    }\n    return (\n        <form onSubmit={handleSubmit}/*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\n            <span>\n                <div>\n                    {CreateField(\"FullName\", Input, \"Полное имя1\", [] )} {/*name, component, placeholder, validate*/}\n                </div>\n                <div>\n                    {CreateField(\"AboutMe\", Input, \"Обо мне1\", [] )} {/*name, component, placeholder, validate*/}\n                </div>\n                <div>\n                    <label>В поисках работы:</label>\n                    <Field\n                        name=\"LookingForAJob\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\n                        component=\"input\"// компонент - ввод\n                        type=\"checkbox\"// тип - чекбокс В поиске работы? (true/false)\n                        validate={[]}\n                    />\n                </div>\n                <div>\n                    {CreateField(\"LookingForAJobDescription\", Input, \"Описание поиска работы1\", [] )} {/*name, component, placeholder, validate*/}\n                </div>\n                <label>Контакты</label>\n                <div className={classes.EditProfileContactsFields}>\n                    <div>\n                        {Object.keys(profile.contacts).map(key=>{\n                            return ContactCreateField (key)\n                        })}\n                    </div>\n                </div>\n                <button type=\"button\" onClick={reset}> Сброс </button>\n\n                <span>\n                    <button type=\"submit\">Применить</button>\n                    {/*кнопка*/}\n                </span>\n                <span>\n                    <button type=\"button\" onClick={()=>{setEditMode(false)}}>Отмена</button>\n                    {/*кнопка*/}\n                </span>\n                <span className={styles.commonError}>\n                    {/*стилизация красным сообщение об общей ошибке с сервера при ошибках ввода*/}\n                    {error} {/*вывод сообщения ошибки после диспатча stopSubmit из auth-reducer.jsx */}\n                </span>\n            </span>\n        </form>\n    )\n}\n\n// оберточная компонента формы, задает имя подстейта \"EditProfileForm\"\nlet EditProfileReduxForm = reduxForm({form: 'EditProfileForm'})(ProfileForm)\n\nlet EditProfile = ({putProfile, dispatch, setEditMode, profile, userId, myId}) => {\n    let onSubmit = (formData) => { // функция реакции на сабмит формы с данными от формы formData\n        //      dispatch(reset('EditProfileForm')) // сброс полей формы после ввода\n        const LookingForAJob = !formData.LookingForAJob ? false : formData.LookingForAJob // если галочка LookingForAJob не стоит, то false\n        putProfile(\n            formData.FullName,\n            formData.AboutMe,\n            LookingForAJob,\n            formData.LookingForAJobDescription,\n            formData.github,\n            formData.vk,\n            formData.facebook,\n            formData.instagram,\n            formData.twitter,\n            formData.website,\n            formData.youtube,\n            formData.mainLink,\n        )//вызов putMyProfileThunkCreator выше из ProfileContainer\n        setEditMode(false)\n    }\n    let resetFormFields = () => { // альтернативный вариант сброса формы, можно подключить к сабмиту\n        dispatch(reset('EditProfileForm')) // сброс полей формы после ввода\n\n    }\n\n    let initialProfile = {\n        FullName: profile.fullName,\n        AboutMe: profile.aboutMe,\n        LookingForAJob: profile.lookingForAJob,\n        LookingForAJobDescription: profile.lookingForAJobDescription,\n        github: profile.contacts.github,\n        vk: profile.contacts.vk,\n        facebook: profile.contacts.facebook,\n        instagram: profile.contacts.instagram,\n        twitter: profile.contacts.twitter,\n        website: profile.contacts.website,\n        youtube: profile.contacts.youtube,\n        mainLink: profile.contacts.mainLink,\n    }\n\n    useEffect(()=>{\n        dispatch(initialize(\"EditProfileForm\", initialProfile)); // подгрузка значений формы по умолчанию\n        if (userId !== 0) {setEditMode(false)} // если при правке формы переключаемся на другого пользователя, отключаем editMode\n    })\n    return (\n        <div>\n            <div className={classes.HeaderEditProfileForm}>Отредактируйте профиль</div>\n            {/*h3 заголовок*/}\n            <div>(можно отдельные поля)</div>\n            <div className={classes.EditProfile}>\n                <div>\n                    <EditProfileReduxForm\n                        onSubmit={onSubmit}\n                        setEditMode = {setEditMode}\n                        profile = {profile}\n                    />{/*вызов формы логина с отсылкой на локальный обработчик сабмита*/}\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default EditProfile\n","import React, {useState} from 'react';\nimport classes from './ProfileInfo.module.css'\nimport commonClasses from '../../common/ButtonOverImage/ButtonOverImage.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusUseReducer from \"./ProfileStatus/ProfileStatusUseReducer\";\nimport {bedug_mode} from \"../../../redux/store-redux\";\nimport userPhoto1 from \"../../../assets/images/no-image3.png\";\nimport EditProfile from \"./EditProfile/EditProfile\"; // заглушка фото пользователя\n\nconst ShowProfile = ({profile, setEditMode, userId, myId}) => { // вынес отдельно отображение профиля\n    let Contact = (key) => { /*простая функция вывода отдельного элемента contacts из profile*/\n        return <div>\n            <b>{key}: </b>{profile.contacts[key]}\n        </div>\n    }\n    return (<div>\n            <div className={classes.profilefullName}>{profile.fullName}</div>\n            <div><b>Обо мне</b>: {profile.aboutMe}</div>\n            <div><b>В поиске работы?</b> {profile.lookingForAJob ? \"Да\" : \"Нет\"}</div>\n            <div><b>Описание поиска работы:</b> {profile.lookingForAJobDescription}</div>\n            <div><b>userId:</b> {profile.userId}</div>\n            <div><b>Контакты:</b></div>\n            <div className={classes.ProfileContacts}>\n                {Object.keys(profile.contacts).map(key=>{ //\n                   return Contact (key)\n                })}\n            </div>\n            {(userId === 0 || userId === myId) && <button onClick={() => {\n                setEditMode(true)\n            }}>Редактировать профиль </button>}\n\n        </div>\n    )\n}\n\nconst ProfileInfo = ({profile, myId, status, putStatusThunkCreator, uploadImage, userId, putProfile, dispatch}) => {\n    const [profilePhoto, setprofilePhoto] = useState(userPhoto1) // useState для временного хранения фото пользователя\n    const [editMode, setEditMode] = useState(false) // флаг режима редактирования профиля\n    const [showUploadImageButton, setshowUploadImageButton] = useState(false) // флаг показать ли кнопку загрузки изображения\n    if (bedug_mode) {\n        console.log(\"ProfileInfo.jsx\")\n    } // дебаг\n    if (!profile) { // если профиль еще не загружен\n        return <Preloader/> // отобразить предзагрузку\n    }\n    let onChangeProfilePhoto = (e) => {\n        setprofilePhoto(e.target.files[0]) // записать в useState выбранный файл фото профиля(временный стейт)\n    }\n    let displayClass = showUploadImageButton ? \"\" : commonClasses.displayNone // класс скрытия/отображения кнопок загрузки поверх картинки профиля\n    return <div>\n        <div className={classes.profileInfoGreed}>\n            <div className={commonClasses.container}>\n                <img\n                    alt={\"userPhoto\"}\n                    onMouseOver={() => {\n                        setshowUploadImageButton(true)\n                    }} // при поя\n                    onMouseOut={() => {\n                        setshowUploadImageButton(false)\n                    }}\n                    className={commonClasses.profilePhotoIMG}\n                    src={profile.photos.large ? profile.photos.large : userPhoto1}/>\n                <div>\n                    {(userId === 0 || userId === myId)// если мы перешли на свой профиль (в браузере нет ID возле profile)\n                        ? <div>\n                            <form> {/*форма отправки фото профиля на сервер*/}\n                                <span><button\n                                    className={commonClasses.btn1 + \" \" + displayClass} // двойной класс - сама кнопка загрузки + класс скрыть/показать при наведении\n                                    onMouseOver={() => {\n                                        setshowUploadImageButton(true)\n                                    }} // при наведении сменить флаг  setshowUploadImageButton на true (показать кнопку)\n                                    onMouseOut={() => {\n                                        setshowUploadImageButton(false)\n                                    }}// при убирании мышки сменить флаг  setshowUploadImageButton на false (скрыть кнопку)\n                                    onClick={() => { //\n                                        uploadImage(profilePhoto)\n                                    }}>Загрузить</button></span> {/*По клику отправить файл на сервер*/}\n                                <span><input\n                                    className={commonClasses.btn2 + \" \" + displayClass} // двойной класс - сама кнопка загрузки + класс скрыть/показать при наведении\n                                    onMouseOver={() => {\n                                        setshowUploadImageButton(true)\n                                    }} // при наведении сменить флаг  setshowUploadImageButton на true (показать кнопку)\n                                    onMouseOut={() => {\n                                        setshowUploadImageButton(false)\n                                    }}// при убирании мышки сменить флаг  setshowUploadImageButton на false (скрыть кнопку)\n                                    type=\"file\" onChange={onChangeProfilePhoto}/></span> {/*загрузить файл*/}\n                            </form>\n                        </div>\n                        : null}\n                </div>\n            </div>\n\n\n            <div>\n                {!editMode && <ShowProfile profile={profile} setEditMode={setEditMode} userId={userId} myId={myId}/>}\n                {editMode && <EditProfile profile={profile} putProfile={putProfile} dispatch={dispatch} setEditMode={setEditMode} userId={userId} myId={myId} />}\n                <div>\n                    {/*Компонента отображения моего статуса*/}\n                    <ProfileStatusUseReducer // можно еще использовать ProfileStatusUseState и ProfileStatusClass\n                        myId={myId} // мой id для модификации статуса\n                        userId={profile.userId} // id отображаемого пользователя\n                        status={status} // статус из BLL\n                        putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\n                    />\n                </div>\n            </div>\n        </div>\n\n    </div>\n}\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__g8RkF\",\"postsBlock\":\"MyPosts_postsBlock__JTP3R\",\"newPostFormTextArea\":\"MyPosts_newPostFormTextArea__-hvVi\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__+6X+V\",\"item\":\"Post_item__kFO1d\",\"posts\":\"Post_posts__VMct2\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = ({message, like}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img alt={\"Мистер бин на прогулке\"}  src=\"https://i.pinimg.com/originals/03/b6/fe/03b6fe528accfd011629f5271e90e9ac.jpg\"/>\r\n            {message}\r\n            <div>\r\n                <span>Like {like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Post;\r\n","import React from 'react'; // импорт реакта\nimport classes from './MyPosts.module.css' // css обработка\nimport Post from \"./Post/Post\"; // подкомпонента отрисовки постов через map\nimport {Field, reduxForm, reset} from \"redux-form\";\nimport {maxLengthCreator, Required} from \"../../common/Validation/validationField\";\nimport {Textarea} from \"../../common/Validation/customFields\";\nimport {bedug_mode} from \"../../../redux/store-redux\"; // reduxForm для ввода новых постов\n\nconst newPostForm = ({handleSubmit}) => { // компонента формы\n    return (\n        <form onSubmit={handleSubmit} /*привязка сабмита формы к внутренней функции reduxForm - handleSubmit*/>\n            <div>\n                <div className={classes.newPostFormTextArea}>\n                    <Field\n                        name={\"newPostData\"} // имя поля формы и возвращаемого свойства объекта после сабмита формы\n                        component={Textarea} //настраиваемый компонент текстовое поле для вывода ошибок ввода\n                        placeholder={\"newPost\"} // текст подсказка при пустом поле\n                        validate={[Required, maxLengthCreator(60)]} //  валидация требуемого поля и максимальной длины\n                    />\n                </div>\n                <div>\n                    <button>Submit</button>\n                    {/*кнопка*/}\n                </div>\n            </div>\n        </form>\n    )\n}\n\n// оберточная компонента формы, задает имя подстейта \"newPostForm\"\nconst NewPostReduxForm = reduxForm({form: \"newPostForm\"})(newPostForm)\n\nconst MyPosts = ({userId, state, addPost, dispatch}) => { // основная компонента отрисовки постов\n    if (bedug_mode) {\n        console.log(\"MyPosts.jsx\")\n    } // дебаг\n\n    let postElements = state.posts.map((p) => // подкомпонента отрисовки всех постов через map\n        <Post message={p.message} like={p.like} id={p.id}/>);\n\n    let AddPost = (formData) => { // функция отправления данных формы нового поста в стейт\n// здесь зарезетить форму\n        dispatch(reset('newPostForm'))\n        addPost(formData.newPostData);\n    };\n\n    return (\n        <div className={classes.postsBlock} /*стиль*/ >\n            {(userId === 0) // если мы перешли на свой профиль (в браузере нет ID возле profile)\n                ? <div>\n                    <h3>My posts</h3> {/*h3 заголовок*/}\n                    <NewPostReduxForm\n                        onSubmit={AddPost}/> {/*вызов формы постов с отсылкой на локальный обработчик сабмита*/}\n                    <div className={classes.posts}>\n                        {postElements} {/*отрисовка постов*/}\n                    </div>\n                </div>\n                : null\n            }\n        </div>\n    )\n}\nexport default MyPosts;\n//скрыть поле ввода постов, если это не мой аккаунт\n","import MyPosts from \"./MyPosts\";\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        state: state.profilePage,\n        myId: state.auth.myID\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostData) => {\n            dispatch(addPostActionCreator(newPostData))\n        },\n        dispatch: dispatch\n    }\n}\n\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n\n","import React from 'react';\r\nimport classes from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {bedug_mode} from \"../../redux/store-redux\";\r\nimport ScrollContainer from \"../common/Scroll/ScrollContainer\";\r\n\r\nconst Profile = ({profile, status, myId, putStatusThunkCreator, uploadImage, userId, putProfile, dispatch}) => {\r\n    if (bedug_mode) {\r\n        console.log(\"Profile.jsx\")\r\n    } // дебаг\r\n\r\n    let ProfileRender = <div className={classes.ProfileRender}>\r\n        <ProfileInfo // Отображение данных выбранного пользователя\r\n            profile={profile} // профиль выбранного пользователя\r\n            status={status} // статус из BLL\r\n            myId={myId} // мой id для модификации статуса\r\n            putStatusThunkCreator={putStatusThunkCreator} // санкреатор для обновления сатуса\r\n            uploadImage={uploadImage} // колбек загрузки фото профиля на сервер\r\n            userId={userId} // id выбранного пользователя, берется из URL\r\n            putProfile={putProfile}\r\n            dispatch={dispatch}\r\n        />\r\n        <MyPostsContainer // контейнер отображения постов (пока заглушка из стейта BLL)\r\n            userId={userId} // id выбранного пользователя, берется из URL\r\n        />\r\n    </div>\r\n    return <div>\r\n        <ScrollContainer\r\n            child={ProfileRender}\r\n            height={window.screen.availHeight-230}\r\n            firstInsideContainer={\"ProfileUp\"}\r\n            secondInsideContainer={\"ProfileDown\"}\r\n            containerElement={\"ProfileContainer\"}\r\n        /> {/*отрисовка FriendList в скрол контейнере*/}\r\n\r\n\r\n    </div>\r\n}\r\nexport default Profile;\r\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getProfileThunkCreator,\n    putStatusThunkCreator,\n    setprofilePhotoThunkCreator\n} from \"../../redux/profile-reducer\";\nimport {useParams} from \"react-router-dom\"\nimport {NavigateToLoginHoc} from \"../hoc/NavigateToLoginHoc\";\nimport {compose} from \"redux\";\nimport {bedug_mode} from \"../../redux/store-redux\";\nimport {putMyProfileThunkCreator} from \"../../redux/auth-reducer\";\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        if (bedug_mode) {\n            console.log(\"ProfileContainer.js componentDidMount()\")\n        } // дебаг\n        this.props.getProfileThunkCreator(this.props.userId);// обновить профиль в зависомости от ID\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let userId = this.props.userId; // получить локальный userId из URL браузера\n        if (userId === 0) {\n            userId = this.props.myId // подставить мой ID если URL профиля пустой\n        }// если кликнули на мой профиль (без ID в URL браузера) то смотрим мой профиль\n        if (userId !== this.props.profile.userId) { // если считаный из URL ID не равен записаному в стейт (смена пользователя)\n            this.props.getProfileThunkCreator(userId); // обновить профиль в зависомости от ID\n            // здесь сменить setEditMode на false\n        }\n    }\n\n    uploadImage = (profilePhoto) => {\n        console.log(profilePhoto)\n        this.props.setprofilePhotoThunkCreator(profilePhoto, this.props.myId)\n    }\n\n    putProfile = ( FullName, AboutMe, LookingForAJob, LookingForAJobDescription,\n        github, vk, facebook, instagram, twitter, website, youtube, mainLink ) => {\n        let MyProfile = {\n            userId: this.props.myId, //userId: required(integer) мой ID\n            LookingForAJob: LookingForAJob, //lookingForAJob: required(boolean)\n            AboutMe: AboutMe,\n            LookingForAJobDescription: LookingForAJobDescription, //  lookingForAJobDescription: required(string)\n            FullName: FullName,//required(string)\n            contacts: {\n                github: github, //  required(string)\n                vk: vk, // required(string)\n                facebook: facebook, // required(string)\n                instagram: instagram, //required(string),\n                twitter: twitter, //required(string),\n                website: website, //required(string),\n                youtube: youtube, //required(string),\n                mainLink: mainLink //required(string)\n            }\n        }\n        this.props.putMyProfileThunkCreator(MyProfile, this.props.myId)\n    }\n\n    render() {\n        return <Profile\n            {...this.props}\n            uploadImage={this.uploadImage} // загрузка\n            putProfile={this.putProfile} // задание профиля на сервер после ввода данных\n            dispatch={this.props.dispatch} // для резета формы профиля\n        />\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        profile: state.profilePage.profile,\n        isAuth: state.auth.isAuth,\n        myId: state.auth.myID,\n        status: state.profilePage.status,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        getProfileThunkCreator: (userId) => {\n            dispatch(getProfileThunkCreator(userId))\n        },\n        putStatusThunkCreator: (statusTmpInput, myId) => {\n            dispatch(putStatusThunkCreator(statusTmpInput, myId))\n        },\n        setprofilePhotoThunkCreator: (profilePhoto, myId) => {\n            dispatch(setprofilePhotoThunkCreator(profilePhoto, myId))\n        },\n        putMyProfileThunkCreator: (MyProfile, myId) => {\n            dispatch(putMyProfileThunkCreator(MyProfile, myId))\n        },\n        dispatch: dispatch\n    }\n}\n\n\nfunction withRouter(Children) {\n    return (props) => {\n        let match = {params: useParams()}\n        let userId = Number(match.params[\"*\"]); // получить локальный userId из URL браузера\n        return <Children {...props} match={match} userId={userId}/>\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter,\n    NavigateToLoginHoc\n)\n(ProfileContainer)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\r\nimport classes from \"./customFields.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const Textarea = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.textAreaError:classes.textArea}\r\n                    //границу textarea подсветить красным если ошибка в meta\r\n                />\r\n            </div>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...restProps}) => {\r\n    const isError = meta.touched && meta.error; // объединение наличия ошибки в meta и поле уже трогали\r\n    return (\r\n        <span>\r\n            <span >\r\n                <input {...input} // формат задан в redux field validation\r\n                          placeholder={restProps.placeholder} // проброс пропсов с плейсхолдером\r\n                          className={isError?classes.InputError:classes.Input}\r\n                    //границу login подсветить красным если ошибка в meta\r\n                />\r\n            </span>\r\n            <div >\r\n                {isError?<span className={classes.textError}>{meta.error}</span>:null}\r\n{/*                если ошибка в meta и поле тронули, то отобразить текс ошибки*/}\r\n            </div>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const CreateField = (name, component, placeholder, validate ) => {\r\n    return (<div>\r\n        <Field\r\n            name={name}// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n            component={component}// компонент - кастомная строка с валидацией\r\n            placeholder={placeholder}// текст подсказка при пустом поле\r\n            validate={validate}\r\n        />\r\n    </div>)\r\n\r\n}\r\n/*\r\n                        name=\"FullName\"// имя поля формы и возвращаемого свойства объекта после сабмита формы\r\n                        component={Input}// компонент - кастомная строка с валидацией\r\n                        placeholder=\"Полное имя\"// текст подсказка при пустом поле\r\n                        validate={[]}\r\n\r\n\r\n*/\r\n\r\n\r\n","export const Required = (value) => {\r\n    if (value) {\r\n        return undefined // возврет нет ошибки, если поле не пустое\r\n    } else {\r\n        return \"Field is required\" // предупреддение, поле требуется\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n    // делаем замыкание, передаем максимальную длину поля во внутреннюю функцию проверки макс длины\r\n    if (value && value.length>maxLength) { // если что то ввели и количество символов\r\n        return `MaxLength is ${maxLength}` // возврат ошибки превышено максимальная длина\r\n    } else {\r\n        return undefined // ошибки нет, поле в пределах заданной длины\r\n    }\r\n}\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => { // флаги isAuth - \"я авторизован?\"\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport let NavigateToLoginHoc = (Component) => { // оберточная компонента проверки на Login, оборачивающая целевую компоненту\r\n    class NavigateToLoginHocWithAuth extends React.Component { // внутренняя компонента уже с данными isAuth\r\n        render () {\r\n            if (!this.props.isAuth) { // условие что я не авторизован\r\n                return <Navigate to='../login'/>; // редирект на страницу Login\r\n            }\r\n            return <Component {...this.props}/> /// возврат целевой компоненты, если редиректа не было на Login\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(NavigateToLoginHocWithAuth)// добавляем в стейт флаги isAuth - \"я авторизован?\"\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textAreaError\":\"customFields_textAreaError__R-r1L\",\"textArea\":\"customFields_textArea__DhXBS\",\"textError\":\"customFields_textError__koMT7\",\"commonError\":\"customFields_commonError__Um+7V\",\"Input\":\"customFields_Input__lhbLD\",\"InputError\":\"customFields_InputError__9Zp9E\"};"],"names":["status","userId","myId","putStatusThunkCreator","SET_MODIFY_STATUS_TRUE","SET_MODIFY_STATUS_FALSE","useReducer","localState","action","type","modifyStatus2","statusTmpInput2","text","Error","dispatch","setMyStatus","bedug_mode","console","log","onDoubleClick","value","onChange","event","currentTarget","onBlur","autoFocus","placeholder","onKeyPress","charCode","EditProfileReduxForm","reduxForm","form","setEditMode","error","handleSubmit","reset","load","pristine","profile","submitting","onSubmit","CreateField","Input","Field","name","component","validate","className","classes","Object","keys","contacts","map","key","ContactCreateField","onClick","styles","putProfile","initialProfile","FullName","fullName","AboutMe","aboutMe","LookingForAJob","lookingForAJob","LookingForAJobDescription","lookingForAJobDescription","github","vk","facebook","instagram","twitter","website","youtube","mainLink","useEffect","initialize","formData","ShowProfile","Contact","uploadImage","useState","userPhoto1","profilePhoto","setprofilePhoto","editMode","showUploadImageButton","setshowUploadImageButton","Preloader","displayClass","commonClasses","alt","onMouseOver","onMouseOut","src","photos","large","e","target","files","message","like","NewPostReduxForm","Textarea","Required","maxLengthCreator","state","addPost","postElements","posts","p","id","newPostData","connect","profilePage","auth","myID","addPostActionCreator","MyPosts","ProfileRender","ScrollContainer","child","height","window","screen","availHeight","firstInsideContainer","secondInsideContainer","containerElement","ProfileContainer","props","setprofilePhotoThunkCreator","MyProfile","putMyProfileThunkCreator","this","getProfileThunkCreator","prevProps","prevState","snapshot","React","compose","isAuth","statusTmpInput","Children","match","params","useParams","Number","NavigateToLoginHoc","input","meta","restProps","isError","touched","maxLength","length","email","test","undefined","mapStateToProps","Component","NavigateToLoginHocWithAuth","to"],"sourceRoot":""}