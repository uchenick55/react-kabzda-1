{"version":3,"file":"static/js/650.c13fd38d.chunk.js","mappings":"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","sources":["components/Info/LoginInfoShort.tsx","webpack://my-app/./src/components/Login/Login.module.css?3530","../node_modules/react-bootstrap/esm/ButtonGroup.js","components/Login/LoginFormikBS.tsx","components/Login/LoginContainer.tsx","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React from \"react\";\n\nconst LoginInfoShort:React.FC = () => {\n    return <div>\n        Страницы Profile и Dialogs доступны только после авторизации.\n        <p>Данные для тестового входа:</p>\n        <p>Аккаунт 1: Email: evgeniysazonov1983@gmail.com <br/>\n            Password: 12qwaszx</p>\n        <p>Аккаунт 2 : Email: evgeniysazonov1983@googlemail.com <br/>\n            Password: 12qwaszx</p>\n        <p>Аккаунт 3: Email: free@samuraijs.com <br/>\n            Password: free</p>\n        <p>В случае проблем с авторизацией, попробуйте сначала войти по указанным парам логин/пароль на <br/>\n            <a href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a>\n        </p>\n    </div>\n}\n\nexport default LoginInfoShort\n","// extracted by mini-css-extract-plugin\nexport default {\"LoginForm\":\"Login_LoginForm__tY6-C\",\"legendStyle\":\"Login_legendStyle__-tuTd\",\"fieldSetStyle\":\"Login_fieldSetStyle__LTe39\",\"errorText\":\"Login_errorText__E5Dby\"};","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React from \"react\";\nimport {Formik, Form} from \"formik\"; //формик с компонентами и пользовательским хуком\nimport * as Yup from 'yup' // валидация форм с помошью сторонней библиотеки Yup\nimport classes from \"./Login.module.css\"\nimport {MyTextInput, MyCheckbox} from \"../common/formikCommon/MyFieldsBS\"\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\n//import DisplayFormikState from \"../common/formikCommon/DisplayFormikState\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Col from \"react-bootstrap/Col\";\nimport LoginInfoShort from \"../Info/LoginInfoShort\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport commonClasses from \"../common/CommonClasses/common.module.css\"\n\nconst myInitialValues = { // начальные зачения форм\n    email: \"\",\n    password: \"\",\n    captcha: \"\",\n}\nconst myValidationSchema = Yup.object({ // валидация форм на required, длину и заполнение полей\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    password: Yup.string()\n        .required('Required'),\n})\n\ntype LoginFormikType = {\n    captchaURL: string, // URL каптчи после 5 неправильных вводов\n    loginError: string // ошибка авторизации\n    postLogin: (values: { email:string, password:string, rememberme?:boolean, captcha?:string }) => void,\n    updateCaptcha: () => void,\n}\ntype ValuesType = {\n    email: string,\n    password: string,\n    rememberme?: boolean\n    captcha?: string\n}\nconst LoginFormik:React.FC<LoginFormikType> = ({postLogin, captchaURL, updateCaptcha, loginError}) => { // основная компонента с входным колбэком, чтобы забрать данные с форм\n    const myOnSubmit = (values:ValuesType, {resetForm}:any) => { // действия по сабмиту\n        postLogin(values) // колбек, который принмает результат ввода формы\n        resetForm()// сбросить значение формы после ввода\n    }\n\n    const loginForm = <Formik\n        initialValues={myInitialValues}\n        validationSchema={myValidationSchema}\n        onSubmit={myOnSubmit}\n    >\n\n        {({\n              handleReset,// обнуление полей\n          }) => ( // обертка для вывода значений ввода в любом месте формы паралельно (или в итоге)\n            <Form> {/*className={classes.LoginForm}*/}\n                <Col> {/*lg={6} md={12}*/}\n\n                    <MyTextInput // email\n                        label=\"Email Address\"\n                        autoFocus={false}\n                        name='email'\n                        type='email'\n                        placeholder='email'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyTextInput // password\n                        label=\"Password\"\n                        autoFocus={false}\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder='password'\n                        leftLabelLength='7rem'\n                    />\n\n                    <MyCheckbox name='rememberme'>  {/*чекбокс */}\n                        запомнить меня\n                    </MyCheckbox>\n\n                    {captchaURL && <div>\n                        <div>\n                            <img src={captchaURL} onClick={updateCaptcha} alt=\"captcha\"/>\n                        </div>\n                        {/*<label htmlFor=\"captcha\">Captcha</label> {/*альтернатива написания input с обработкой ошибок*/}\n\n                        <MyTextInput // email\n                            label=\"Captcha\"\n                            autoFocus={false}\n                            name='captcha'\n                            type='text'\n                            placeholder='captcha'\n                            leftLabelLength='7rem'\n                        />\n                    </div>\n\n                    }\n                    <ButtonGroup aria-label=\"Basic example\">\n                        <Button variant=\"warning\" type='button' onClick={handleReset}>Reset</Button>\n                        <Button type=\"submit\"> {/*кнопка отправить форму*/}\n                            Submit\n                        </Button>\n                    </ButtonGroup>\n\n                    {/*кнопка сброса к значениям по умолчанию*/}\n                    <div className={classes.errorText}>{loginError && loginError}</div>\n\n                    {/* <DisplayFormikState/> {/*отображение всего стейта формика*/}\n                </Col>\n            </Form>\n        )}\n    </Formik>\n    return (\n        <>\n            <Container className=\"d-inline-block\">\n                <h2 className={commonClasses.pageHeader}>Login</h2>\n\n                <Row >\n                    <Col>{loginForm}</Col>\n                    <Col><LoginInfoShort/></Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default LoginFormik\n\n","import React from \"react\";\nimport Login from \"./LoginFormikBS\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport type {} from 'redux-thunk/extend-redux';\nimport {getCaptchaThunkCreator, postLoginThunkCreator} from \"../../redux/auth-reducer\";\nimport {Navigate} from \"react-router-dom\";\nimport {GlobalStateType} from \"../../redux/store-redux\";\n\nconst LoginContainer: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n    const postLogin = (values: { email: string, password: string, rememberme?: boolean, captcha?: string }) => {\n        // email, password, rememberme берем из формы login\n\n        //функция для проброса дальше целевой компоненты для вызова postLoginThunkCreator (авторизация на сервере)\n        dispatch( postLoginThunkCreator( values.email, values.password, values.rememberme, values.captcha ));\n    }\n    const captchaURL: string = useSelector((state: GlobalStateType) => state.auth.captchaURL )\n    const isAuth:boolean = useSelector((state: GlobalStateType) => state.auth.isAuth )\n    const loginError:string = useSelector((state: GlobalStateType) => state.auth.loginError )\n\n    const updateCaptcha = () => {\n\n        dispatch(  getCaptchaThunkCreator())\n    }\n\n    if (isAuth) { // условие что я авторизован\n        return <Navigate to='../dialog2'/>; // редирект на страницу Profile\n    }\n\n    return (\n        <div>\n            <Login postLogin={postLogin}\n                   captchaURL={captchaURL}\n                   updateCaptcha={updateCaptcha}\n                   loginError={loginError}\n            /> {/*Возврат целевой компоненты*/}\n        </div>\n    )\n}\nexport default LoginContainer\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["_jsxs","children","_jsx","href","ButtonGroup","React","_ref","ref","bsPrefix","size","vertical","className","_ref$as","as","Component","rest","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","baseClass","concat","_objectSpread","classNames","displayName","defaultProps","role","myInitialValues","email","password","captcha","myValidationSchema","Yup","required","postLogin","captchaURL","updateCaptcha","loginError","loginForm","Formik","initialValues","validationSchema","onSubmit","values","_ref2","resetForm","_ref3","handleReset","Form","Col","MyTextInput","label","autoFocus","name","type","placeholder","leftLabelLength","MyCheckbox","src","onClick","alt","Button","variant","classes","_Fragment","Container","commonClasses","Row","LoginInfoShort","dispatch","useDispatch","useSelector","state","auth","isAuth","Navigate","to","Login","postLoginThunkCreator","rememberme","getCaptchaThunkCreator","props","decoratedBsPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","forEach","brkPoint","cols","propValue","infix","push"],"sourceRoot":""}